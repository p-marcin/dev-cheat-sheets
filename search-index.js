antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1-1",[0,52.513]],["name/1-1",[]],["text/1-1",[]],["component/1-1",[]],["title/1-2",[1,31.827]],["name/1-2",[]],["text/1-2",[]],["component/1-2",[]],["title/1-3",[1,27.004,2,39.225]],["name/1-3",[]],["text/1-3",[]],["component/1-3",[]],["title/1",[3,32.352,4,34.063,5,34.063]],["name/1",[6,1.305]],["text/1",[1,3.534,3,3.053,4,3.215,5,3.215,7,3.977,8,3.409,9,2.421,10,5.526,11,3.409,12,2.767,13,3.409,14,3.977,15,3.977,16,3.409,17,5.526,18,3.409,19,3.409,20,3.977,21,3.977,22,3.977,23,3.652,24,3.215,25,3.977,26,3.652,27,3.409,28,3.977,29,3.652,30,3.652,31,2.915,32,2.915,33,3.977,34,2.794,35,3.165,36,4.243,37,3.977,38,4.135,39,2.421,40,3.652,41,3.977,42,2.2,43,3.409,44,3.995,45,2.915,46,2.421,47,2.305,48,2.153,49,2.502,50,1.853,51,2.213,52,2.794,53,3.008,54,2.687,55,3.409,56,3.053,57,2.687,58,3.364,59,3.652,60,3.409,61,3.053,62,3.409]],["component/1",[12,0.435]],["title/2-1",[63,27.44,64,32.352,65,34.063]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2",[59,44.555,60,41.591]],["name/2",[59,1.305]],["text/2",[63,4.261,64,5.023,65,5.289,66,6.008,67,4.42,68,4.597,69,7.356]],["component/2",[12,0.435]],["title/3-1",[42,14.303,70,48.524]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[42,8.906,53,18.898,54,20.409,71,19.006,72,22.144]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3-3",[42,12.421,53,17.579,73,47.371]],["name/3-3",[]],["text/3-3",[]],["component/3-3",[]],["title/3-4",[4,34.063,5,34.063,42,12.421]],["name/3-4",[]],["text/3-4",[]],["component/3-4",[]],["title/3-5",[35,17.303,42,8.906,74,33.963,75,25.896,76,20.409,77,24.422]],["name/3-5",[]],["text/3-5",[]],["component/3-5",[]],["title/3-6",[42,12.421,78,29.604,79,38.692]],["name/3-6",[]],["text/3-6",[]],["component/3-6",[]],["title/3-7",[42,10.977,80,37.239,81,30.102,82,41.862]],["name/3-7",[]],["text/3-7",[]],["component/3-7",[]],["title/3-8",[42,10.977,53,15.534,83,27.295,84,41.862]],["name/3-8",[]],["text/3-8",[]],["component/3-8",[]],["title/3-9",[42,9.833,85,14.528,86,37.501,87,26.966,88,28.593]],["name/3-9",[]],["text/3-9",[]],["component/3-9",[]],["title/3-10",[89,49.019]],["name/3-10",[]],["text/3-10",[]],["component/3-10",[]],["title/3-11",[90,31.598,91,34.09]],["name/3-11",[]],["text/3-11",[]],["component/3-11",[]],["title/3-12",[92,24.134,93,34.063,94,27.44]],["name/3-12",[]],["text/3-12",[]],["component/3-12",[]],["title/3-13",[42,9.833,87,26.966,95,22.535,96,33.359,97,28.593]],["name/3-13",[]],["text/3-13",[]],["component/3-13",[]],["title/3-14",[42,10.977,71,23.426,98,37.239,99,37.239]],["name/3-14",[]],["text/3-14",[]],["component/3-14",[]],["title/3-15",[42,9.833,100,33.359,101,37.501,102,37.501,103,20.985]],["name/3-15",[]],["text/3-15",[]],["component/3-15",[]],["title/3-16",[42,10.977,95,25.155,104,23.426,105,26.162]],["name/3-16",[]],["text/3-16",[]],["component/3-16",[]],["title/3-17",[3,25.612,42,9.833,53,13.916,72,24.451,106,28.593]],["name/3-17",[]],["text/3-17",[]],["component/3-17",[]],["title/3-18",[42,12.421,53,17.579,107,42.139]],["name/3-18",[]],["text/3-18",[]],["component/3-18",[]],["title/3-19",[53,20.242,108,37.254]],["name/3-19",[]],["text/3-19",[]],["component/3-19",[]],["title/3-20",[42,12.421,53,17.579,109,42.139]],["name/3-20",[]],["text/3-20",[]],["component/3-20",[]],["title/3-21",[53,20.242,110,48.524]],["name/3-21",[]],["text/3-21",[]],["component/3-21",[]],["title/3-22",[53,20.242,55,41.591]],["name/3-22",[]],["text/3-22",[]],["component/3-22",[]],["title/3-23",[42,10.977,53,15.534,95,25.155,111,19.625]],["name/3-23",[]],["text/3-23",[]],["component/3-23",[]],["title/3-24",[42,10.977,53,15.534,111,19.625,112,37.239]],["name/3-24",[]],["text/3-24",[]],["component/3-24",[]],["title/3-25",[42,14.303,113,37.254]],["name/3-25",[]],["text/3-25",[]],["component/3-25",[]],["title/3-26",[42,7.492,114,28.572,115,28.572,116,28.572,117,28.572,118,28.572,119,28.572,120,28.572]],["name/3-26",[]],["text/3-26",[]],["component/3-26",[]],["title/3-27",[42,12.421,121,42.139,122,47.371]],["name/3-27",[]],["text/3-27",[]],["component/3-27",[]],["title/3-28",[42,10.977,83,27.295,123,37.239,124,34.193]],["name/3-28",[]],["text/3-28",[]],["component/3-28",[]],["title/3-29",[42,14.303,125,29.542]],["name/3-29",[]],["text/3-29",[]],["component/3-29",[]],["title/3",[42,12.421,53,17.579,54,28.465]],["name/3",[6,1.305]],["text/3",[0,0.459,1,2.435,3,1.038,9,0.305,18,2.016,24,0.404,27,1.158,30,1.576,31,0.695,35,1.173,36,0.384,38,2.033,39,0.823,42,2.008,44,1.479,45,0.991,46,0.823,47,1.204,51,0.278,52,1.206,53,2.736,54,2.394,55,0.813,56,0.384,58,1.757,60,0.429,61,0.384,63,2.033,65,1.901,67,0.338,68,1.439,72,2.736,75,0.429,76,2.956,78,2.863,79,1.881,80,0.948,81,2.865,83,1.724,85,1.626,87,0.404,88,0.429,89,1.158,90,3.381,91,3.074,92,1.788,93,0.404,94,1.118,95,1.384,96,2.049,97,1.756,98,0.5,99,0.5,100,0.5,103,2.23,104,0.596,105,0.351,106,2.254,107,3.122,108,0.384,109,0.948,110,0.5,111,1.968,112,3.122,113,2.866,121,0.5,123,0.948,124,2.65,125,3.101,126,0.562,127,1.439,128,0.562,129,0.404,130,0.404,131,0.429,132,2.736,133,0.384,134,0.562,135,0.404,136,0.367,137,0.695,138,0.562,139,0.562,140,0.562,141,0.562,142,1.066,143,0.562,144,0.562,145,0.562,146,0.562,147,0.562,148,0.948,149,0.562,150,0.562,151,0.562,152,0.404,153,1.776,154,0.813,155,1.066,156,1.656,157,0.64,158,0.562,159,0.5,160,0.367,161,1.388,162,0.562,163,0.562,164,0.562,165,0.562,166,0.562,167,0.562,168,0.562,169,0.562,170,0.562,171,0.562,172,0.562,173,0.562,174,1.158,175,0.459,176,1.066,177,1.241,178,0.562,179,1.066,180,0.562,181,0.562,182,1.241,183,1.038,184,0.562,185,1.388,186,0.948,187,0.562,188,1.066,189,1.066,190,0.562,191,1.724,192,0.404,193,0.404,194,1.776,195,1.573,196,0.562,197,0.562,198,1.066,199,0.871,200,0.562,201,1.158,202,0.871,203,1.066,204,1.038,205,0.813,206,1.08,207,0.64,208,1.519,209,3.374,210,0.948,211,1.519,212,0.338,213,0.695,214,0.562,215,1.652,216,0.367,217,0.459,218,0.429,219,1.066,220,1.388,221,0.5,222,0.459,223,0.562,224,0.459,225,0.404,226,0.666,227,0.948,228,0.813,229,0.562,230,0.367,231,1.241,232,0.813,233,0.991,234,0.5,235,1.038,236,0.871,237,0.562,238,0.991,239,2.46,240,0.562,241,0.562,242,0.666,243,0.562,244,0.562,245,0.728,246,0.562,247,0.562,248,0.459,249,0.562,250,1.519,251,0.562,252,1.066,253,0.384,254,0.562,255,1.318,256,0.429,257,0.562,258,0.562,259,0.404,260,0.596,261,0.562,262,0.562,263,1.066,264,0.429,265,1.038,266,0.562,267,0.429,268,0.562,269,0.871,270,1.318,271,0.562,272,0.562,273,1.066,274,0.562,275,0.562,276,0.562,277,1.388,278,1.501,279,1.158,280,0.429,281,0.666,282,1.066,283,2.016,284,2.65,285,1.092,286,0.562,287,0.562,288,0.562,289,0.562,290,0.813,291,0.766,292,1.066,293,1.038,294,0.459,295,0.562,296,1.066,297,2.159,298,0.562,299,0.562,300,0.562,301,0.562,302,0.404,303,0.562,304,0.459,305,2.303,306,2.956,307,2.303,308,0.913,309,1.93,310,2.159,311,0.562,312,0.562,313,1.656,314,0.404,315,0.562,316,1.673,317,1.439,318,1.93,319,1.501,320,1.066,321,1.241,322,0.459,323,0.459,324,1.519,325,1.158,326,1.351,327,0.562,328,0.562,329,0.459,330,0.813,331,0.367,332,0.596,333,0.459,334,0.459,335,0.562,336,1.589,337,1.573,338,0.728,339,0.5,340,1.716,341,0.728,342,0.459,343,0.562,344,0.404,345,0.562,346,1.881,347,0.429,348,0.562,349,0.404,350,0.5,351,0.5,352,0.728,353,0.562,354,0.562,355,0.562,356,0.562,357,0.429,358,0.562,359,0.562,360,0.562,361,1.388,362,0.562,363,0.562,364,1.318,365,1.158,366,1.881,367,0.404,368,1.258,369,0.728,370,0.459,371,0.5,372,1.334,373,0.459,374,0.562,375,0.562,376,0.948,377,0.948,378,1.901,379,1.092,380,2.303,381,0.88,382,1.066,383,0.459,384,0.429,385,0.871,386,0.459,387,1.066,388,1.066,389,0.562,390,1.158,391,1.109,392,1.93,393,0.351,394,0.562,395,1.531,396,0.562,397,0.5,398,0.384,399,0.562,400,0.562,401,0.429,402,0.562,403,0.948,404,0.766,405,0.459,406,0.459,407,0.562,408,0.429,409,0.367,410,0.562,411,0.404,412,0.562,413,0.562,414,0.562,415,0.459,416,1.066,417,0.562,418,0.562,419,0.562,420,1.519,421,0.562,422,0.562,423,0.562,424,0.459,425,0.562,426,0.562,427,1.652,428,0.459,429,0.459,430,0.459,431,0.813,432,0.562,433,0.562,434,0.562,435,0.459,436,1.038,437,1.93,438,1.351,439,0.562,440,1.519,441,0.367,442,1.092,443,0.367,444,0.562,445,1.656,446,0.949,447,0.384,448,0.404,449,0.459,450,0.5,451,0.384,452,0.562,453,1.519,454,1.716,455,0.562,456,0.949,457,0.562,458,0.562,459,0.562,460,0.5,461,0.948,462,0.728,463,0.596,464,0.384,465,0.562,466,0.404,467,0.813,468,0.562,469,0.562,470,0.459,471,0.429,472,0.459,473,0.562,474,1.351,475,0.562,476,0.459,477,0.404,478,1.241,479,1.158,480,0.562,481,0.562,482,1.241,483,0.562,484,0.562,485,2.049,486,0.562,487,0.384,488,0.367,489,0.766,490,0.429,491,0.562,492,1.066,493,0.562,494,0.948,495,0.562,496,0.766,497,0.459,498,0.459,499,0.562,500,0.562,501,0.326,502,1.881,503,0.562,504,1.501,505,0.813,506,2.956,507,0.562,508,1.066,509,0.459,510,1.471,511,0.948,512,1.066,513,2.886,514,1.93,515,0.562,516,0.813,517,0.459,518,0.562,519,0.562,520,0.562,521,1.066,522,1.724,523,0.5,524,0.562,525,0.562,526,0.404,527,0.766,528,1.092,529,0.404,530,1.388,531,0.562,532,0.562,533,0.562,534,0.871,535,0.429,536,0.367,537,0.562,538,0.384,539,1.038,540,2.303,541,0.766,542,0.871,543,0.562,544,0.562,545,0.64,546,0.459,547,0.459,548,0.562,549,0.562,550,0.562,551,0.5,552,0.5,553,1.066,554,0.562,555,0.5,556,0.728,557,0.562,558,0.429,559,0.562,560,0.562,561,0.562,562,0.766,563,0.338,564,0.5,565,1.038,566,0.562,567,0.404,568,0.429,569,0.429,570,0.351,571,1.241,572,0.562,573,0.384,574,0.459,575,0.562,576,0.562,577,0.429,578,0.871,579,0.562,580,0.562,581,0.562,582,0.562,583,0.562,584,1.241,585,0.384,586,0.429,587,0.404,588,0.562,589,0.459,590,0.429,591,0.562,592,0.562,593,0.562,594,0.871,595,1.576,596,0.562,597,0.351,598,0.562,599,0.367,600,1.066,601,0.404,602,0.404,603,0.459,604,0.404,605,0.459,606,0.459,607,0.562]],["component/3",[12,0.435]],["title/4-1",[78,34.09,608,41.591]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["title/4-2",[232,41.591,609,39.225]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["title/4-3",[381,37.241]],["name/4-3",[]],["text/4-3",[]],["component/4-3",[]],["title/4-4",[57,25.155,58,22.671,260,23.426,610,37.239]],["name/4-4",[]],["text/4-4",[]],["component/4-4",[]],["title/4-5",[57,25.155,58,22.671,260,23.426,464,28.59]],["name/4-5",[]],["text/4-5",[]],["component/4-5",[]],["title/4-6",[125,34.817]],["name/4-6",[]],["text/4-6",[]],["component/4-6",[]],["title/4",[53,17.579,57,28.465,58,25.654]],["name/4",[53,0.229,57,0.371,58,0.334]],["text/4",[29,3.187,39,2.113,42,2.282,44,1.351,53,1.448,56,1.648,57,3.981,58,2.66,67,1.45,68,1.508,72,1.574,83,1.574,90,2.845,125,3.055,127,2.438,156,2.806,194,4.361,201,1.84,206,2.183,209,2.113,212,1.45,233,3.678,255,3.354,260,2.183,277,2.806,316,1.075,317,3.069,332,1.351,336,1.45,337,1.648,338,1.648,381,2.26,391,1.162,398,2.665,404,3.531,460,2.147,464,1.648,488,3.678,573,1.648,577,1.84,587,2.806,605,1.971,606,4.607,610,2.147,611,1.971,612,1.971,613,3.902,614,2.544,615,3.187,616,3.902,617,3.902,618,2.414,619,2.414,620,2.414,621,2.414,622,2.414,623,2.414,624,2.414,625,2.414,626,2.147,627,2.414,628,2.414,629,2.414,630,2.414,631,2.414,632,2.414,633,2.414,634,2.414,635,4.721,636,5.051,637,3.902,638,2.414,639,2.544,640,2.665,641,2.147,642,2.147,643,2.414,644,2.147,645,2.147,646,3.902,647,3.471,648,3.902,649,3.902,650,1.971,651,2.414,652,1.84,653,2.414,654,3.471,655,3.902,656,3.902,657,3.902,658,3.902,659,3.902,660,3.902,661,3.902,662,3.902,663,3.902,664,3.902,665,3.902,666,3.902,667,3.902,668,2.147,669,2.414,670,2.414,671,2.414,672,2.414,673,2.414,674,2.414,675,1.736,676,2.414,677,2.414,678,2.414,679,2.414,680,2.414,681,2.414,682,2.414,683,2.414,684,2.414,685,2.414,686,2.414,687,1.508,688,1.736,689,3.471,690,2.414,691,2.414,692,1.508,693,1.84,694,2.147,695,2.414,696,2.414,697,3.902,698,1.574,699,1.84,700,2.414,701,2.414,702,2.147,703,2.147,704,2.147,705,2.147,706,2.147,707,2.147,708,2.147,709,2.147,710,2.147]],["component/4",[12,0.435]],["title/5-1",[78,34.09,608,41.591]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[232,41.591,609,39.225]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5-3",[381,37.241]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["title/5-4",[57,25.155,58,22.671,260,23.426,338,28.59]],["name/5-4",[]],["text/5-4",[]],["component/5-4",[]],["title/5",[1,23.451,53,17.579,58,25.654]],["name/5",[1,0.305,53,0.229,58,0.334]],["text/5",[1,3.742,42,2.324,44,2.794,53,1.853,57,3,58,4.375,68,3.12,72,3.255,83,3.255,90,2.892,156,3.59,206,2.794,212,4.025,215,3.12,233,4.368,235,4.575,260,2.794,316,2.224,336,3,337,3.41,338,3.41,427,3.12,569,3.807,570,3.12,577,3.807,602,3.59,611,4.078,612,4.078,615,5.472,635,3.807,639,4.368,640,4.575,711,4.442,712,4.442,713,4.442,714,4.442,715,4.442,716,4.993,717,4.993,718,4.442,719,3.41,720,4.442,721,4.078,722,4.442,723,4.442]],["component/5",[12,0.435]],["title/6-1",[78,34.09,608,41.591]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[85,18.352,724,27.44,725,30.886]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[47,11.517,85,12.023,95,18.649,239,17.367,464,21.196,724,17.977,725,20.235]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[260,26.508,726,42.139,727,42.139]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6-5",[42,8.906,85,13.158,108,23.195,209,18.393,724,19.674,725,22.144]],["name/6-5",[]],["text/6-5",[]],["component/6-5",[]],["title/6-6",[85,21.232,125,20.309,724,21.723,725,24.451]],["name/6-6",[]],["text/6-6",[]],["component/6-6",[]],["title/6-7",[85,19.73,125,18.393,265,23.195,724,19.674,725,22.144]],["name/6-7",[]],["text/6-7",[]],["component/6-7",[]],["title/6-8",[635,36.118,639,30.886,640,32.352]],["name/6-8",[]],["text/6-8",[]],["component/6-8",[]],["title/6-9",[70,57.19]],["name/6-9",[]],["text/6-9",[]],["component/6-9",[]],["title/6-10",[71,20.985,85,14.528,639,24.451,724,21.723,725,24.451]],["name/6-10",[]],["text/6-10",[]],["component/6-10",[]],["title/6-11",[47,12.603,95,20.409,239,19.006,464,23.195,639,22.144,640,23.195]],["name/6-11",[]],["text/6-11",[]],["component/6-11",[]],["title/6-12",[90,24.249,125,22.671,639,27.295,640,28.59]],["name/6-12",[]],["text/6-12",[]],["component/6-12",[]],["title/6",[53,20.242,56,37.254]],["name/6",[53,0.33,56,0.608]],["text/6",[1,2.215,9,0.401,18,0.565,34,2.947,36,0.506,39,0.401,42,2.391,43,1.479,44,1.823,47,0.902,53,1.339,54,0.445,56,2.681,57,4.154,58,2.554,60,0.565,67,0.445,68,1.52,72,1.265,76,1.166,78,0.863,83,2.353,85,2.064,90,3.282,92,1.461,93,0.993,94,0.8,95,1.461,111,0.347,124,0.605,125,2.673,127,1.52,131,0.565,132,1.87,153,0.445,156,2.595,160,0.483,161,0.533,174,0.565,185,1.395,186,0.659,194,3.202,195,0.506,201,0.565,206,2.197,209,3.15,212,3.806,213,2.353,226,0.863,230,0.483,231,0.605,233,3.793,235,2.681,238,2.353,239,0.415,242,0.863,245,0.943,248,1.128,255,1.959,260,0.773,265,0.506,270,1.325,277,1.749,279,0.565,280,0.565,313,0.533,314,0.993,316,1.083,317,2.255,319,0.483,329,1.128,330,0.565,332,0.773,336,3.404,338,0.506,339,1.228,347,0.565,349,0.533,350,0.659,351,0.659,357,0.565,361,0.533,364,0.943,365,0.565,372,0.8,381,0.8,391,1.569,395,1.124,397,0.659,404,2.343,408,0.565,409,0.9,427,2.255,441,0.483,445,0.993,446,0.463,447,0.943,456,0.463,464,0.506,477,0.533,479,2.484,485,1.228,488,2.747,494,0.659,505,1.053,510,1.053,511,0.659,545,0.83,564,0.659,565,0.943,569,2.187,570,0.463,573,1.325,577,1.053,585,0.506,586,0.565,594,1.584,597,0.863,599,0.483,604,3.391,605,0.605,606,1.986,608,0.565,611,1.128,612,0.605,615,1.584,626,0.659,635,3.212,636,3.412,639,2.353,640,1.661,641,3.21,642,3.21,645,0.659,647,1.228,654,2.163,668,1.726,675,0.533,687,1.212,688,0.533,689,0.659,693,0.565,694,0.659,702,0.659,703,0.659,704,0.659,705,0.659,706,0.659,707,1.228,708,0.659,709,0.659,710,0.659,711,0.659,712,0.659,713,0.659,714,0.659,715,0.659,718,0.659,719,1.959,720,2.552,721,1.128,722,0.659,723,0.659,724,2.731,725,2.559,726,2.163,727,3.492,728,0.741,729,0.741,730,0.741,731,0.565,732,3.609,733,0.741,734,0.741,735,1.381,736,0.741,737,0.741,738,0.741,739,1.94,740,1.87,741,1.381,742,1.381,743,1.381,744,1.381,745,1.381,746,0.605,747,0.605,748,0.741,749,0.741,750,0.741,751,1.128,752,1.381,753,0.605,754,0.533,755,0.741,756,0.741,757,0.993,758,0.741,759,1.94,760,0.659,761,0.741,762,0.565,763,0.741,764,0.741,765,0.741,766,0.741,767,0.533,768,0.605,769,0.659,770,0.741,771,3.258,772,0.741,773,0.741,774,1.726,775,0.565,776,1.479,777,0.741,778,0.605,779,2.432,780,0.741,781,0.741,782,0.741,783,0.741,784,0.741,785,2.432,786,0.605,787,0.533,788,0.741,789,1.381,790,2.063,791,0.741,792,0.506,793,0.741,794,1.381,795,0.506,796,0.741,797,0.659,798,0.741,799,0.741,800,0.565,801,0.741,802,0.741,803,1.381,804,0.741,805,0.741,806,0.741,807,0.741,808,0.741,809,0.741,810,0.741,811,0.741,812,0.741,813,0.741,814,0.741,815,1.053,816,4.715,817,4.213,818,1.94,819,0.605,820,1.94,821,0.659,822,2.432,823,0.741,824,1.228,825,0.741,826,5.14,827,1.381,828,0.741,829,0.741,830,0.741,831,1.94,832,1.381,833,0.741,834,1.381,835,0.605,836,1.94,837,1.94,838,0.741,839,0.741,840,1.381,841,0.605,842,0.533,843,0.741,844,0.741,845,1.381,846,0.533,847,0.741,848,0.741,849,0.741,850,3.258,851,2.868,852,2.868,853,1.94,854,0.741,855,0.741,856,0.741,857,1.381,858,1.381,859,4.475,860,0.741,861,0.741,862,0.605,863,0.741,864,0.605,865,1.381,866,1.381,867,0.741,868,0.741,869,0.741,870,0.741,871,0.741,872,0.741,873,0.741,874,0.741,875,0.741,876,0.741,877,0.741,878,0.741,879,0.943,880,0.741,881,0.741,882,0.605,883,1.381,884,1.053,885,0.741,886,0.741,887,0.741,888,0.741,889,0.741,890,0.533,891,1.381,892,0.741,893,1.726,894,0.659,895,0.659,896,0.659,897,0.741,898,0.659,899,0.659,900,0.659,901,0.741,902,0.659,903,0.659,904,0.605,905,0.659,906,1.381,907,1.381,908,0.533,909,0.741,910,0.741,911,0.741,912,0.741,913,0.741,914,0.741,915,1.228,916,0.659,917,1.381,918,0.741,919,0.741,920,0.741,921,0.741,922,0.741,923,0.741,924,0.741]],["component/6",[12,0.435]],["title/7-1",[42,14.303,108,37.254]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[925,52.513]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7-3",[85,16.218,92,21.328,365,31.918,740,27.295]],["name/7-3",[]],["text/7-3",[]],["component/7-3",[]],["title/7-4",[42,10.977,85,16.218,92,21.328,926,41.862]],["name/7-4",[]],["text/7-4",[]],["component/7-4",[]],["title/7-5",[42,10.977,85,16.218,92,21.328,927,37.239]],["name/7-5",[]],["text/7-5",[]],["component/7-5",[]],["title/7-6",[38,19.674,76,20.409,85,13.158,92,17.303,260,19.006,928,30.212]],["name/7-6",[]],["text/7-6",[]],["component/7-6",[]],["title/7-7",[2,34.063,157,28.465,378,34.063]],["name/7-7",[]],["text/7-7",[]],["component/7-7",[]],["title/7-8",[490,41.591,501,31.598]],["name/7-8",[]],["text/7-8",[]],["component/7-8",[]],["title/7-9",[378,39.225,501,31.598]],["name/7-9",[]],["text/7-9",[]],["component/7-9",[]],["title/7-10",[85,21.133,265,37.254]],["name/7-10",[]],["text/7-10",[]],["component/7-10",[]],["title/7-11",[85,21.133,281,34.09]],["name/7-11",[]],["text/7-11",[]],["component/7-11",[]],["title/7-12",[85,21.133,283,41.591]],["name/7-12",[]],["text/7-12",[]],["component/7-12",[]],["title/7-13",[42,12.421,108,32.352,125,25.654]],["name/7-13",[]],["text/7-13",[]],["component/7-13",[]],["title/7-14",[85,24.907]],["name/7-14",[]],["text/7-14",[]],["component/7-14",[]],["title/7-15",[490,41.591,501,31.598]],["name/7-15",[]],["text/7-15",[]],["component/7-15",[]],["title/7-16",[378,39.225,501,31.598]],["name/7-16",[]],["text/7-16",[]],["component/7-16",[]],["title/7-17",[85,21.133,265,37.254]],["name/7-17",[]],["text/7-17",[]],["component/7-17",[]],["title/7-18",[85,21.133,281,34.09]],["name/7-18",[]],["text/7-18",[]],["component/7-18",[]],["title/7-19",[85,21.133,283,41.591]],["name/7-19",[]],["text/7-19",[]],["component/7-19",[]],["title/7-20",[92,19.106,93,26.966,94,21.723,760,33.359,929,33.359]],["name/7-20",[]],["text/7-20",[]],["component/7-20",[]],["title/7",[53,20.242,55,41.591]],["name/7",[53,0.229,194,0.371,445,0.443]],["text/7",[1,1.473,2,1.731,23,0.778,32,0.621,38,1.009,40,0.778,42,2.449,43,0.727,44,2.179,47,0.354,49,0.533,53,1.286,67,1.047,68,1.505,72,0.621,76,2.083,79,1.423,83,2.539,85,2.097,90,3.756,91,2.434,92,2.498,93,0.685,94,0.552,103,0.533,108,3.983,125,2.494,133,0.651,148,0.848,153,1.047,156,3.071,157,0.573,160,1.57,183,0.651,191,2.26,194,1.047,201,1.836,206,0.975,207,0.573,209,2.655,210,1.55,212,2.566,213,0.621,215,2.878,216,0.621,221,1.55,226,0.596,227,0.848,230,0.621,233,3.002,234,0.848,235,3.145,238,3.197,239,0.533,242,1.86,245,2.032,248,1.423,253,1.19,255,2.032,256,1.329,259,1.253,264,1.329,265,1.19,267,1.329,270,1.19,278,1.136,281,1.089,283,1.836,308,0.573,313,1.253,314,0.685,316,1.544,317,1.86,325,0.727,332,1.665,336,3.107,337,1.19,338,2.032,349,0.685,352,1.644,364,0.651,365,2.643,367,0.685,368,0.621,369,0.651,372,0.552,376,0.848,377,0.848,378,3.718,381,1.395,391,0.839,395,0.552,409,0.621,427,1.089,431,1.836,441,0.621,446,1.089,447,0.651,450,0.848,454,2.647,456,1.089,462,0.651,463,0.975,471,0.727,474,1.55,477,1.731,490,1.329,501,2.008,526,0.685,528,0.685,551,0.848,552,0.848,555,2.647,563,1.047,565,0.651,569,0.727,573,0.651,585,0.651,594,3.181,597,0.596,599,0.621,602,2.8,644,1.55,652,0.727,675,0.685,687,0.596,688,1.731,692,0.596,698,0.621,699,0.727,721,1.423,724,0.552,731,1.329,740,1.57,762,0.727,774,0.848,795,0.651,815,1.836,824,2.142,842,0.685,879,1.19,884,1.836,893,5.64,894,0.848,895,2.647,896,0.848,898,0.848,899,0.848,900,0.848,902,0.848,903,0.848,905,1.55,915,0.848,916,0.848,927,1.55,928,3.083,929,0.848,930,0.621,931,0.953,932,1.423,933,0.778,934,0.685,935,0.685,936,0.953,937,0.953,938,0.953,939,0.953,940,0.953,941,0.778,942,0.727,943,0.953,944,0.778,945,0.953,946,1.743,947,0.953,948,0.685,949,4.903,950,1.253,951,0.953,952,2.976,953,0.953,954,0.953,955,2.14,956,1.423,957,0.778,958,0.953,959,0.953,960,0.953,961,2.976,962,0.621,963,0.685,964,0.953,965,0.953,966,0.953,967,0.953,968,1.423,969,0.953,970,0.953,971,0.778,972,0.778,973,0.953,974,0.778,975,0.727,976,1.743,977,1.253,978,1.743,979,0.953,980,0.953,981,0.778,982,0.953,983,0.953,984,0.953,985,0.953,986,0.953,987,1.253,988,0.953,989,1.253,990,0.953,991,1.423,992,2.14,993,2.408,994,0.953,995,1.743,996,0.778,997,0.953,998,2.408,999,0.953,1000,2.408,1001,0.953,1002,0.778,1003,0.621,1004,0.953,1005,0.953,1006,0.953,1007,0.953,1008,0.953,1009,0.953,1010,2.408,1011,0.953,1012,0.953,1013,0.953,1014,4.605,1015,1.743,1016,2.976,1017,0.953,1018,1.743,1019,0.953,1020,0.953,1021,0.953,1022,3.894,1023,0.953,1024,0.953,1025,0.953,1026,0.685,1027,0.953,1028,0.953,1029,0.953,1030,0.953,1031,2.408,1032,5.632,1033,1.743,1034,0.953,1035,0.953,1036,1.743,1037,2.408,1038,0.953,1039,0.953,1040,0.953,1041,0.953,1042,0.953,1043,2.408,1044,1.743,1045,1.743,1046,2.408,1047,0.953,1048,0.953,1049,0.848,1050,0.953,1051,0.953,1052,0.953,1053,0.727,1054,0.778,1055,0.778,1056,0.778,1057,0.953,1058,0.953,1059,0.727,1060,1.743,1061,0.778,1062,0.953,1063,3.083,1064,0.953,1065,0.953,1066,0.953,1067,0.953,1068,0.953,1069,2.976,1070,0.953,1071,0.953,1072,0.953,1073,0.953,1074,1.743,1075,1.743,1076,0.778,1077,0.953,1078,0.953,1079,0.953,1080,0.953,1081,0.953,1082,0.953,1083,0.953]],["component/7",[12,0.435]],["title/8-1",[46,20.309,48,18.058,49,20.985,391,18.058,463,20.985]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["title/8-2",[48,22.811,316,21.1,935,34.063]],["name/8-2",[]],["text/8-2",[]],["component/8-2",[]],["title/8-3",[46,22.671,48,20.158,316,18.646,1084,28.59]],["name/8-3",[]],["text/8-3",[]],["component/8-3",[]],["title/8-4",[48,22.811,316,21.1,1085,36.118]],["name/8-4",[]],["text/8-4",[]],["component/8-4",[]],["title/8",[48,26.267,49,30.525]],["name/8",[48,0.429,49,0.498]],["text/8",[9,1.569,35,1.476,38,1.678,39,2.999,42,2.483,44,2.524,45,2.3,46,3.946,47,1.309,48,2.523,49,2.932,50,1.462,63,0.691,66,1.743,67,0.716,76,3.487,77,0.857,91,3.626,103,0.667,104,1.194,105,2.205,125,0.646,137,0.777,153,0.716,160,0.777,183,0.814,195,0.814,206,1.194,207,1.282,209,2.999,212,2.71,220,0.857,222,0.974,224,0.974,225,0.857,238,0.777,239,1.194,242,0.745,253,0.814,255,1.457,277,0.857,290,0.909,308,0.716,316,1.29,317,2.536,319,0.777,331,2.646,332,0.667,336,2.71,352,1.979,379,1.535,381,0.691,391,1.699,393,4.232,395,0.691,398,0.814,427,1.334,431,0.909,436,0.814,443,0.777,463,3.79,466,0.857,496,0.857,501,0.691,504,2.646,509,0.974,530,0.857,536,2.646,545,0.716,563,1.282,567,1.535,599,0.777,604,3.243,614,0.777,692,0.745,699,1.627,740,0.777,778,0.974,879,1.979,882,1.743,884,1.627,890,0.857,908,0.857,925,0.974,950,2.083,955,0.857,962,0.777,977,0.857,987,2.537,992,0.857,1003,0.777,1026,1.535,1055,0.974,1084,2.41,1085,2.69,1086,0.909,1087,0.814,1088,0.909,1089,3.138,1090,0.909,1091,0.909,1092,1.06,1093,0.909,1094,0.814,1095,1.898,1096,0.909,1097,1.06,1098,1.06,1099,3.138,1100,1.06,1101,1.06,1102,1.06,1103,0.814,1104,0.909,1105,1.898,1106,0.909,1107,1.06,1108,3.61,1109,1.898,1110,4.424,1111,3.61,1112,1.06,1113,1.06,1114,5.162,1115,1.06,1116,4.424,1117,0.909,1118,1.06,1119,1.898,1120,1.627,1121,1.06,1122,1.06,1123,1.06,1124,0.909,1125,0.909,1126,1.06,1127,1.06,1128,1.06,1129,5.164,1130,1.06,1131,1.06,1132,0.857,1133,1.06,1134,1.06,1135,1.06,1136,1.898,1137,1.898,1138,1.06,1139,0.909,1140,1.06,1141,1.06,1142,1.06,1143,1.06,1144,0.909,1145,0.909,1146,2.577,1147,2.209,1148,2.209,1149,1.06,1150,1.06,1151,1.627,1152,2.69,1153,1.898,1154,1.06,1155,1.06,1156,1.627,1157,1.06,1158,1.06,1159,1.06,1160,1.06,1161,1.06,1162,1.06,1163,1.06,1164,1.06,1165,1.06,1166,1.06,1167,1.06,1168,1.06,1169,1.06,1170,1.06,1171,1.06,1172,1.06,1173,1.06,1174,1.06,1175,1.898,1176,1.06,1177,1.627,1178,1.06,1179,1.06,1180,1.06,1181,1.06,1182,1.06,1183,1.06,1184,1.06,1185,1.06,1186,2.577,1187,1.06,1188,1.627,1189,1.06,1190,1.06,1191,1.627,1192,1.898,1193,0.909,1194,1.06,1195,1.06,1196,1.06,1197,1.898,1198,1.06,1199,1.06,1200,1.898,1201,1.06,1202,1.06,1203,1.898,1204,1.898,1205,1.06,1206,1.898,1207,1.06,1208,1.06,1209,1.06,1210,1.06,1211,1.06,1212,1.06,1213,1.06,1214,1.06,1215,1.06,1216,1.06,1217,1.06,1218,1.06,1219,1.06,1220,1.06,1221,1.06,1222,1.06,1223,1.06,1224,1.06,1225,1.898,1226,1.06,1227,1.06,1228,1.06,1229,1.06]],["component/8",[12,0.435]],["title/9-1",[391,20.158,935,30.102,1230,31.918,1231,31.918]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9-2",[47,20.242,50,22.609]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["title/9-3",[47,20.242,1232,41.591]],["name/9-3",[]],["text/9-3",[]],["component/9-3",[]],["title/9-4",[31,27.295,50,17.351,111,19.625,127,26.162]],["name/9-4",[]],["text/9-4",[]],["component/9-4",[]],["title/9-5",[50,19.634,369,32.352,1233,36.118]],["name/9-5",[]],["text/9-5",[]],["component/9-5",[]],["title/9-6",[111,19.625,1234,28.59,1235,27.295,1236,31.918]],["name/9-6",[]],["text/9-6",[]],["component/9-6",[]],["title/9-7",[9,20.309,50,15.543,111,17.581,316,16.704,1237,28.593]],["name/9-7",[]],["text/9-7",[]],["component/9-7",[]],["title/9-8",[47,17.579,50,19.634,1238,27.44]],["name/9-8",[]],["text/9-8",[]],["component/9-8",[]],["title/9-9",[32,20.235,42,8.138,104,17.367,563,18.649,609,22.317,1238,17.977,1239,23.663]],["name/9-9",[]],["text/9-9",[]],["component/9-9",[]],["title/9-10",[42,8.906,54,20.409,391,16.354,1238,19.674,1239,25.896,1240,25.896]],["name/9-10",[]],["text/9-10",[]],["component/9-10",[]],["title/9-11",[111,14.55,489,22.317,1103,21.196,1238,17.977,1241,27.607,1242,27.607,1243,22.317]],["name/9-11",[]],["text/9-11",[]],["component/9-11",[]],["title/9",[47,20.242,50,22.609]],["name/9",[47,0.33,50,0.369]],["text/9",[1,0.174,8,0.518,9,0.974,11,0.518,12,0.567,13,0.268,16,0.752,19,0.268,31,1.748,32,0.229,34,0.22,35,0.179,38,1.312,39,1.655,42,2.361,44,1.141,46,0.19,47,1.066,50,3.201,54,1.081,62,0.268,63,0.894,65,1.11,67,0.593,68,0.22,76,1.489,85,0.136,87,1.11,90,0.204,91,1.91,92,0.179,94,1.312,104,0.552,105,0.796,106,0.268,111,2.387,130,0.253,132,0.443,133,0.464,137,0.229,152,0.253,153,1.941,154,0.268,157,0.211,160,0.443,161,0.253,175,0.555,177,0.555,182,0.555,183,0.464,185,0.253,191,0.229,192,0.253,193,0.253,194,0.211,199,0.287,202,0.555,204,1.228,206,1.267,207,0.593,209,2.299,213,0.229,215,1.796,216,0.831,220,1.628,225,0.253,226,0.22,228,0.268,230,1.329,233,2.995,235,2.53,236,0.287,238,1.993,239,1.71,242,0.796,245,0.24,253,0.24,256,0.752,259,0.489,260,0.38,264,0.971,267,0.268,269,1.261,270,0.674,278,0.443,279,2.825,281,0.22,291,0.916,302,0.253,304,0.287,308,0.593,310,1.041,313,0.489,316,1.776,317,1.549,321,1.469,322,1.665,323,0.806,325,1.371,331,1.476,332,0.713,336,3.864,337,0.24,341,0.87,342,1.041,344,0.253,347,1.727,349,1.466,352,2.206,364,0.24,368,1.616,369,0.674,370,1.469,373,1.469,379,0.253,381,0.738,386,0.555,391,1.384,393,0.425,395,1.181,401,0.268,409,0.229,411,0.489,415,0.287,424,1.041,435,0.555,441,0.443,443,1.329,445,0.253,446,0.425,447,0.24,448,0.916,451,0.674,456,0.965,462,0.24,463,1.387,466,0.253,472,0.287,477,0.253,478,1.469,479,0.268,482,3.364,487,1.228,488,0.831,489,1.11,496,0.489,497,1.041,498,2.19,501,0.394,502,0.287,504,2.995,510,0.268,517,1.469,522,0.229,526,0.489,527,0.253,529,0.709,530,0.253,534,1.469,536,0.443,538,0.24,539,0.24,545,0.211,546,0.287,547,0.287,556,0.24,558,2.71,562,0.253,563,2.136,567,0.489,570,0.22,573,0.24,574,0.555,589,0.287,597,1.274,599,0.229,601,0.253,602,0.489,603,0.287,614,0.229,650,0.287,652,0.268,687,1.676,688,2.556,692,0.425,693,0.518,698,1.007,719,0.24,731,0.518,740,1.748,746,0.555,751,0.806,754,0.253,757,0.489,767,0.253,786,0.287,787,1.928,790,0.253,792,0.674,795,0.24,815,0.518,846,0.916,862,0.287,864,0.287,879,0.674,890,1.466,904,0.555,908,2.198,930,0.443,932,0.287,934,0.253,941,0.555,944,1.041,948,0.489,950,0.709,955,1.628,962,0.229,963,0.253,968,5.785,971,0.555,972,0.287,975,2.589,977,0.253,987,2.198,989,0.253,991,1.665,996,0.287,1002,0.287,1003,1.173,1026,0.489,1056,0.806,1059,0.752,1061,0.287,1076,0.287,1084,1.693,1086,2.463,1087,0.24,1090,0.268,1091,0.268,1093,0.971,1094,0.24,1103,2.628,1110,1.177,1116,1.177,1117,0.752,1120,0.518,1124,2.71,1125,0.268,1129,0.971,1132,1.782,1139,0.518,1145,1.177,1147,0.518,1148,0.752,1151,0.268,1152,0.268,1156,0.518,1177,0.268,1188,2.045,1191,0.268,1193,0.268,1230,0.971,1231,1.177,1232,4.658,1233,0.518,1234,1.693,1235,3.197,1236,0.518,1237,0.268,1238,2.385,1240,1.727,1243,0.709,1244,0.313,1245,1.261,1246,0.877,1247,0.313,1248,0.971,1249,2.205,1250,0.313,1251,1.11,1252,0.313,1253,0.313,1254,0.313,1255,0.268,1256,0.313,1257,0.313,1258,0.605,1259,0.313,1260,0.253,1261,0.313,1262,0.313,1263,0.605,1264,0.877,1265,1.6,1266,0.877,1267,0.313,1268,1.133,1269,2.014,1270,0.313,1271,0.313,1272,0.313,1273,0.313,1274,0.313,1275,0.605,1276,0.313,1277,0.313,1278,2.874,1279,2.331,1280,1.554,1281,0.313,1282,1.133,1283,0.313,1284,1.133,1285,0.313,1286,0.253,1287,0.313,1288,0.605,1289,0.313,1290,0.877,1291,0.313,1292,3.423,1293,0.313,1294,0.287,1295,0.313,1296,0.313,1297,0.313,1298,1.133,1299,0.313,1300,0.313,1301,0.605,1302,0.313,1303,2.385,1304,0.605,1305,0.313,1306,0.313,1307,0.605,1308,0.313,1309,1.374,1310,0.313,1311,0.313,1312,0.287,1313,0.605,1314,0.313,1315,1.469,1316,0.313,1317,0.605,1318,0.313,1319,0.313,1320,0.313,1321,0.313,1322,0.313,1323,0.313,1324,0.877,1325,0.877,1326,0.313,1327,1.374,1328,0.605,1329,0.605,1330,0.605,1331,0.605,1332,0.605,1333,0.605,1334,0.877,1335,1.133,1336,0.605,1337,0.971,1338,0.605,1339,0.313,1340,2.385,1341,0.313,1342,0.313,1343,0.313,1344,0.313,1345,0.313,1346,0.313,1347,0.313,1348,0.605,1349,0.313,1350,0.877,1351,2.385,1352,0.313,1353,0.313,1354,0.313,1355,0.313,1356,0.313,1357,0.313,1358,0.313,1359,0.313,1360,0.605,1361,0.313,1362,0.313,1363,0.605,1364,0.605,1365,0.605,1366,0.605,1367,0.605,1368,0.605,1369,0.313,1370,0.313,1371,0.313,1372,0.313,1373,0.313,1374,0.313,1375,0.313,1376,0.313,1377,0.313,1378,0.605,1379,0.313,1380,0.313,1381,0.313,1382,0.313,1383,0.313,1384,0.313,1385,0.313,1386,0.313,1387,0.313,1388,0.313,1389,0.313,1390,0.313,1391,0.313,1392,0.313,1393,0.605,1394,0.313,1395,0.313,1396,0.313,1397,0.313,1398,0.877,1399,0.313,1400,0.313,1401,0.313,1402,0.313,1403,0.268,1404,0.605,1405,1.133,1406,0.605,1407,0.313,1408,0.605,1409,0.313,1410,0.313,1411,0.605,1412,0.605,1413,0.313,1414,0.313,1415,0.518,1416,0.313,1417,0.313,1418,3.584,1419,1.6,1420,0.313,1421,0.313,1422,0.605,1423,0.313,1424,0.877,1425,0.313,1426,0.313,1427,0.313,1428,0.268,1429,0.605,1430,0.313,1431,0.313,1432,0.313,1433,0.877,1434,0.313,1435,0.877,1436,1.374,1437,1.6,1438,0.605,1439,0.877,1440,0.313,1441,0.313,1442,0.313,1443,0.605,1444,0.877,1445,0.313,1446,0.313,1447,0.313,1448,0.313,1449,0.313,1450,0.555,1451,0.518,1452,0.877,1453,0.605,1454,0.605,1455,0.313,1456,0.313,1457,0.313,1458,0.313,1459,0.313,1460,0.313,1461,0.518,1462,0.313,1463,0.313,1464,0.313,1465,1.374,1466,0.605,1467,0.605,1468,0.605,1469,0.605,1470,0.313,1471,0.313,1472,0.313,1473,0.313,1474,0.313,1475,0.313,1476,0.313,1477,0.313,1478,0.605,1479,0.313,1480,0.287,1481,0.605,1482,0.313,1483,0.313,1484,0.313,1485,0.313,1486,0.313,1487,0.489,1488,0.313,1489,0.605,1490,0.268,1491,0.605,1492,0.605,1493,0.313,1494,0.313,1495,1.85,1496,0.605,1497,1.554,1498,0.605,1499,0.287,1500,1.133,1501,0.877,1502,0.877,1503,1.133,1504,0.268,1505,0.489,1506,0.313,1507,0.313,1508,0.605,1509,1.6,1510,1.133,1511,0.313,1512,0.229,1513,1.133,1514,0.313,1515,0.752,1516,0.605,1517,0.313,1518,0.605,1519,0.605,1520,0.313,1521,0.268,1522,0.313,1523,0.313,1524,0.313,1525,0.313,1526,1.813,1527,1.6,1528,0.605,1529,0.287,1530,0.313,1531,1.6,1532,0.313,1533,0.313,1534,0.313,1535,0.313,1536,0.605,1537,0.916,1538,0.752,1539,0.877,1540,0.605,1541,0.313,1542,0.313,1543,0.313,1544,0.877,1545,0.313,1546,0.313,1547,0.313,1548,0.313,1549,0.268,1550,0.268,1551,0.313,1552,0.253,1553,0.518,1554,0.313,1555,0.313,1556,0.313,1557,0.313,1558,0.313,1559,0.313,1560,0.268,1561,0.489,1562,0.313,1563,0.313,1564,0.313,1565,0.313,1566,0.313,1567,0.313,1568,0.313,1569,0.605,1570,0.313,1571,0.313,1572,0.605,1573,0.605,1574,0.313,1575,0.313,1576,0.313,1577,0.313,1578,0.313,1579,0.313,1580,0.313,1581,0.313,1582,0.313,1583,0.313,1584,0.313,1585,0.313,1586,0.313,1587,0.313,1588,0.313,1589,0.313,1590,0.313,1591,0.605,1592,0.605,1593,0.313,1594,0.313,1595,0.605,1596,0.268,1597,0.313,1598,0.877,1599,0.313,1600,0.313,1601,0.877,1602,0.253,1603,0.253,1604,1.133,1605,0.605,1606,0.313,1607,0.268,1608,0.313,1609,0.313,1610,0.313,1611,0.313]],["component/9",[12,0.435]],["title/10-1",[51,16.814,71,28.498,135,24.422,136,22.144,1612,25.896]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[51,31.827]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[51,18.565,136,24.451,541,26.966,1512,24.451,1613,33.359]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10-4",[372,31.598,442,39.225]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["title/10-5",[47,20.242,1614,41.591]],["name/10-5",[]],["text/10-5",[]],["component/10-5",[]],["title/10-6",[372,31.598,1615,41.591]],["name/10-6",[]],["text/10-6",[]],["component/10-6",[]],["title/10-7",[1616,41.591,1617,41.591]],["name/10-7",[]],["text/10-7",[]],["component/10-7",[]],["title/10-8",[129,46.23]],["name/10-8",[]],["text/10-8",[]],["component/10-8",[]],["title/10-9",[1618,41.591,1619,48.524]],["name/10-9",[]],["text/10-9",[]],["component/10-9",[]],["title/10-10",[71,20.985,103,20.985,293,25.612,930,24.451,1620,26.966]],["name/10-10",[]],["text/10-10",[]],["component/10-10",[]],["title/10-11",[71,19.006,103,19.006,113,23.195,157,20.409,522,22.144,1621,25.896]],["name/10-11",[]],["text/10-11",[]],["component/10-11",[]],["title/10-12",[64,32.352,285,34.063,1622,36.118]],["name/10-12",[]],["text/10-12",[]],["component/10-12",[]],["title/10-13",[1623,41.591,1624,41.591]],["name/10-13",[]],["text/10-13",[]],["component/10-13",[]],["title/10",[51,31.827]],["name/10",[51,0.791]],["text/10",[9,0.536,24,0.711,34,0.618,35,0.504,36,1.232,39,0.536,45,0.645,47,1.623,51,3.187,61,0.676,63,0.573,64,0.676,71,0.554,75,1.375,77,0.711,78,0.618,81,0.711,85,0.383,88,1.375,89,0.754,92,0.919,94,0.573,95,1.493,97,1.894,103,1.714,104,1.009,105,0.618,111,1.436,113,1.697,127,2.496,129,1.297,130,1.297,131,0.754,132,3.265,133,0.676,135,2.203,136,3.74,137,0.645,152,0.711,153,1.841,157,1.841,174,1.375,191,1.62,192,1.297,193,1.297,194,1.493,195,1.697,204,1.232,205,1.375,206,2.447,207,1.084,209,1.659,212,1.084,213,1.176,215,0.618,216,1.997,217,0.808,218,0.754,226,0.618,230,0.645,239,3.423,278,1.176,280,1.375,281,0.618,284,0.808,285,2.561,291,0.711,293,2.432,294,3.262,297,2.502,302,0.711,308,1.493,314,0.711,316,0.441,319,0.645,330,0.754,331,0.645,332,1.009,333,0.808,334,0.808,341,0.676,344,1.297,346,0.808,357,0.754,361,0.711,366,0.808,367,2.203,368,2.322,372,4.298,383,1.473,384,1.375,385,0.808,390,0.754,391,0.476,393,0.618,395,1.439,398,1.232,404,0.711,405,1.473,406,0.808,408,0.754,409,0.645,411,0.711,427,0.618,428,0.808,429,0.808,430,0.808,436,0.676,441,0.645,442,1.297,443,1.62,446,1.553,448,0.711,449,2.029,451,2.092,456,0.618,462,0.676,463,1.39,467,0.754,470,1.473,471,1.375,476,1.473,487,2.432,488,0.645,504,3.265,505,0.754,516,0.754,522,1.176,527,1.297,528,1.297,529,0.711,535,1.894,536,0.645,538,1.232,539,4.397,541,2.561,542,2.502,545,1.084,556,1.232,562,1.297,565,0.676,568,1.375,570,0.618,571,1.473,578,2.502,584,0.808,585,0.676,586,0.754,587,1.297,590,0.754,595,0.808,597,1.553,601,0.711,614,1.176,636,0.754,675,0.711,687,1.915,692,0.618,698,1.176,719,0.676,724,0.573,747,2.029,753,1.473,754,0.711,757,0.711,762,0.754,767,1.787,768,2.029,775,1.894,776,0.754,787,0.711,790,0.711,792,0.676,795,0.676,800,0.754,819,1.473,835,0.808,841,0.808,842,0.711,846,0.711,930,1.176,933,0.808,934,0.711,942,0.754,948,1.297,956,0.808,957,0.808,962,0.645,963,0.711,974,0.808,981,1.473,989,0.711,992,0.711,1003,0.645,1053,0.754,1054,0.808,1087,0.676,1088,1.375,1094,0.676,1096,1.375,1104,0.754,1106,2.336,1144,1.894,1234,1.697,1235,0.645,1248,0.754,1251,1.787,1255,0.754,1260,1.787,1279,0.754,1280,0.754,1286,0.711,1337,1.375,1403,1.375,1415,2.336,1418,0.754,1428,1.375,1451,0.754,1461,1.894,1487,1.297,1490,0.754,1497,0.754,1504,0.754,1505,1.787,1512,1.176,1515,0.754,1521,0.754,1537,0.711,1538,0.754,1549,0.754,1550,0.754,1552,0.711,1553,0.754,1560,0.754,1561,0.711,1596,0.754,1602,3.794,1603,0.711,1607,0.754,1612,0.754,1614,2.336,1615,1.894,1616,3.045,1617,1.375,1618,1.375,1620,1.297,1621,1.894,1622,3.335,1623,1.375,1624,1.375,1625,2.21,1626,0.88,1627,0.88,1628,1.604,1629,1.604,1630,1.604,1631,1.473,1632,0.88,1633,2.029,1634,0.88,1635,1.473,1636,0.808,1637,0.88,1638,0.88,1639,0.88,1640,0.88,1641,0.88,1642,0.88,1643,1.604,1644,1.604,1645,0.88,1646,1.604,1647,1.604,1648,1.604,1649,1.604,1650,1.473,1651,2.21,1652,1.604,1653,0.88,1654,0.808,1655,0.88,1656,1.604,1657,0.88,1658,1.604,1659,0.88,1660,0.88,1661,1.604,1662,2.21,1663,0.88,1664,2.029,1665,0.88,1666,1.604,1667,0.88,1668,0.88,1669,1.604,1670,1.473,1671,2.21,1672,0.88,1673,0.88,1674,0.88,1675,0.88,1676,0.88,1677,0.88,1678,2.725,1679,0.88,1680,0.88,1681,0.88,1682,0.88,1683,0.88,1684,0.88,1685,1.604,1686,0.88,1687,0.88,1688,0.88,1689,0.88,1690,0.88,1691,0.88,1692,0.88,1693,0.88,1694,0.88,1695,0.88,1696,0.88,1697,0.88,1698,0.88,1699,0.88,1700,0.88,1701,0.88,1702,1.604,1703,0.88,1704,2.21,1705,0.88,1706,0.88,1707,0.88,1708,0.88,1709,0.88,1710,0.88,1711,0.88,1712,1.604,1713,0.88,1714,1.604,1715,0.88,1716,0.88,1717,1.604,1718,0.88,1719,0.88,1720,0.88,1721,0.808,1722,0.88,1723,0.88,1724,0.88,1725,0.88,1726,0.808,1727,0.88,1728,0.88,1729,0.88,1730,0.88,1731,0.88,1732,0.88,1733,1.604,1734,0.88,1735,1.604,1736,0.88,1737,1.604,1738,0.88,1739,1.473,1740,0.88,1741,0.88,1742,0.88,1743,2.029,1744,0.88,1745,0.88,1746,0.88,1747,0.88,1748,0.88,1749,0.88,1750,0.88,1751,0.88,1752,0.88,1753,0.88,1754,0.88,1755,0.88,1756,0.808,1757,0.808,1758,0.88,1759,0.88,1760,0.88,1761,0.808,1762,1.604,1763,0.88,1764,0.88,1765,0.88,1766,0.88,1767,0.88,1768,0.88,1769,0.88]],["component/10",[12,0.435]],["title/11-1",[52,34.09,1770,48.524]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11-2",[35,27.791,52,34.09]],["name/11-2",[]],["text/11-2",[]],["component/11-2",[]],["title/11-3",[47,17.579,50,19.634,52,29.604]],["name/11-3",[]],["text/11-3",[]],["component/11-3",[]],["title/11",[35,27.791,52,34.09]],["name/11",[35,0.453,52,0.556]],["text/11",[1,1.385,2,1.166,26,1.325,27,1.236,34,1.013,35,2.759,38,0.939,39,1.515,42,2.007,46,1.515,47,1.628,50,2.542,52,4.782,53,0.602,61,2.519,63,0.939,81,2.653,90,0.939,91,1.748,92,3.124,94,0.939,104,0.907,111,2.321,127,1.013,132,2.861,154,1.236,159,1.443,161,1.166,185,1.166,191,1.057,204,1.91,205,1.236,207,2.217,209,1.515,215,1.013,216,1.824,218,1.236,226,1.748,228,1.236,231,2.285,232,1.236,242,1.013,245,1.107,259,1.166,270,1.91,278,1.824,290,2.133,293,1.91,308,0.974,319,2.861,326,1.443,329,1.325,332,0.907,340,5.162,341,1.107,361,3.156,364,1.107,367,1.166,368,2.861,371,1.443,372,0.939,384,1.236,390,1.236,393,1.013,395,0.939,401,1.236,403,2.488,436,3.382,438,3.904,446,1.748,447,1.107,451,1.107,456,1.748,461,1.443,463,2.456,467,1.236,487,1.91,513,1.443,516,2.133,523,1.443,526,1.166,528,1.166,535,1.236,538,1.107,539,4.827,545,1.681,556,1.107,558,2.133,563,0.974,565,2.997,568,3.346,570,1.748,585,1.107,587,4.79,590,1.236,597,1.748,604,1.166,609,1.166,687,2.305,698,1.057,769,1.443,775,2.133,776,1.236,792,1.107,797,1.443,800,2.133,821,2.488,842,1.166,942,1.236,975,1.236,1049,2.488,1053,1.236,1059,1.236,1063,1.443,1132,1.166,1235,1.057,1243,1.166,1245,1.325,1251,2.653,1260,1.166,1286,1.166,1294,1.325,1312,1.325,1315,2.285,1450,1.325,1480,1.325,1487,1.166,1495,1.325,1499,1.325,1505,3.156,1512,1.057,1529,1.325,1537,1.166,1552,1.166,1561,1.166,1602,1.166,1603,1.166,1620,3.156,1631,1.325,1633,1.325,1635,1.325,1636,1.325,1650,1.325,1654,1.325,1664,1.325,1670,1.325,1721,1.325,1726,1.325,1739,2.285,1743,2.285,1756,1.325,1757,1.325,1761,2.285,1770,1.443,1771,4.952,1772,1.622,1773,1.622,1774,1.622,1775,1.622,1776,1.622,1777,1.622,1778,1.622,1779,1.622,1780,1.622,1781,1.622,1782,1.622,1783,1.622,1784,3.689,1785,2.797,1786,2.797,1787,1.622,1788,1.622,1789,2.797,1790,1.622,1791,3.689,1792,1.622,1793,1.622,1794,1.622,1795,1.622,1796,1.622,1797,1.622,1798,1.622,1799,2.797,1800,1.622,1801,1.622,1802,1.622,1803,2.797,1804,1.622,1805,1.622,1806,1.622,1807,1.622,1808,1.622,1809,2.797,1810,1.622,1811,1.622,1812,1.622,1813,1.622,1814,3.689,1815,1.622,1816,1.622,1817,1.622,1818,1.622,1819,1.622,1820,1.622,1821,1.622,1822,6.877,1823,1.622,1824,1.622,1825,1.622,1826,1.622,1827,1.622,1828,1.622,1829,1.622,1830,1.622,1831,1.622,1832,1.622,1833,2.797,1834,1.622,1835,1.622,1836,1.622,1837,1.622,1838,4.388,1839,1.622,1840,1.622,1841,1.622,1842,1.622,1843,1.622,1844,1.622,1845,1.622,1846,1.622,1847,1.622,1848,1.622]],["component/11",[12,0.435]],["title/12-1",[0,52.513]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12-2",[1,31.827]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["title/12-3",[1,27.004,2,39.225]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["title/12",[3,32.352,4,34.063,5,34.063]],["name/12",[6,1.305]],["text/12",[1,3.278,3,3.351,4,3.528,5,3.528,7,4.365,8,3.741,9,2.657,10,5.89,11,3.741,12,2.949,13,3.741,14,4.365,15,4.365,16,3.741,17,5.89,18,3.741,19,3.741,20,4.365,21,4.365,22,4.365,23,4.008,24,3.528,25,4.365,26,4.008,27,3.741,28,4.365,29,4.008,30,4.008,31,3.199,32,3.199,33,4.365,34,3.067,35,2.5,36,4.522,37,4.365,38,4.341,39,2.657,40,4.008,41,4.365,42,2.196,43,3.741,44,4.193,45,3.199,46,2.657,47,2.457,48,2.363,49,2.746,50,2.034,51,2.429,61,3.351,62,3.741]],["component/12",[12,0.435]],["title/13-1",[46,20.309,48,18.058,49,20.985,391,18.058,463,20.985]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13-2",[48,22.811,316,21.1,935,34.063]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["title/13-3",[46,22.671,48,20.158,316,18.646,1084,28.59]],["name/13-3",[]],["text/13-3",[]],["component/13-3",[]],["title/13-4",[48,22.811,316,21.1,1085,36.118]],["name/13-4",[]],["text/13-4",[]],["component/13-4",[]],["title/13",[48,26.267,49,30.525]],["name/13",[48,0.429,49,0.498]],["text/13",[9,1.569,35,1.476,38,1.678,39,2.999,42,2.483,44,2.524,45,2.3,46,3.946,47,1.309,48,2.523,49,2.932,50,1.462,63,0.691,66,1.743,67,0.716,76,3.487,77,0.857,91,3.626,103,0.667,104,1.194,105,2.205,125,0.646,137,0.777,153,0.716,160,0.777,183,0.814,195,0.814,206,1.194,207,1.282,209,2.999,212,2.71,220,0.857,222,0.974,224,0.974,225,0.857,238,0.777,239,1.194,242,0.745,253,0.814,255,1.457,277,0.857,290,0.909,308,0.716,316,1.29,317,2.536,319,0.777,331,2.646,332,0.667,336,2.71,352,1.979,379,1.535,381,0.691,391,1.699,393,4.232,395,0.691,398,0.814,427,1.334,431,0.909,436,0.814,443,0.777,463,3.79,466,0.857,496,0.857,501,0.691,504,2.646,509,0.974,530,0.857,536,2.646,545,0.716,563,1.282,567,1.535,599,0.777,604,3.243,614,0.777,692,0.745,699,1.627,740,0.777,778,0.974,879,1.979,882,1.743,884,1.627,890,0.857,908,0.857,925,0.974,950,2.083,955,0.857,962,0.777,977,0.857,987,2.537,992,0.857,1003,0.777,1026,1.535,1055,0.974,1084,2.41,1085,2.69,1086,0.909,1087,0.814,1088,0.909,1089,3.138,1090,0.909,1091,0.909,1092,1.06,1093,0.909,1094,0.814,1095,1.898,1096,0.909,1097,1.06,1098,1.06,1099,3.138,1100,1.06,1101,1.06,1102,1.06,1103,0.814,1104,0.909,1105,1.898,1106,0.909,1107,1.06,1108,3.61,1109,1.898,1110,4.424,1111,3.61,1112,1.06,1113,1.06,1114,5.162,1115,1.06,1116,4.424,1117,0.909,1118,1.06,1119,1.898,1120,1.627,1121,1.06,1122,1.06,1123,1.06,1124,0.909,1125,0.909,1126,1.06,1127,1.06,1128,1.06,1129,5.164,1130,1.06,1131,1.06,1132,0.857,1133,1.06,1134,1.06,1135,1.06,1136,1.898,1137,1.898,1138,1.06,1139,0.909,1140,1.06,1141,1.06,1142,1.06,1143,1.06,1144,0.909,1145,0.909,1146,2.577,1147,2.209,1148,2.209,1149,1.06,1150,1.06,1151,1.627,1152,2.69,1153,1.898,1154,1.06,1155,1.06,1156,1.627,1157,1.06,1158,1.06,1159,1.06,1160,1.06,1161,1.06,1162,1.06,1163,1.06,1164,1.06,1165,1.06,1166,1.06,1167,1.06,1168,1.06,1169,1.06,1170,1.06,1171,1.06,1172,1.06,1173,1.06,1174,1.06,1175,1.898,1176,1.06,1177,1.627,1178,1.06,1179,1.06,1180,1.06,1181,1.06,1182,1.06,1183,1.06,1184,1.06,1185,1.06,1186,2.577,1187,1.06,1188,1.627,1189,1.06,1190,1.06,1191,1.627,1192,1.898,1193,0.909,1194,1.06,1195,1.06,1196,1.06,1197,1.898,1198,1.06,1199,1.06,1200,1.898,1201,1.06,1202,1.06,1203,1.898,1204,1.898,1205,1.06,1206,1.898,1207,1.06,1208,1.06,1209,1.06,1210,1.06,1211,1.06,1212,1.06,1213,1.06,1214,1.06,1215,1.06,1216,1.06,1217,1.06,1218,1.06,1219,1.06,1220,1.06,1221,1.06,1222,1.06,1223,1.06,1224,1.06,1225,1.898,1226,1.06,1227,1.06,1228,1.06,1229,1.06]],["component/13",[12,0.435]],["title/14-1",[391,20.158,935,30.102,1230,31.918,1231,31.918]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[47,20.242,50,22.609]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14-3",[47,20.242,1232,41.591]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["title/14-4",[31,27.295,50,17.351,111,19.625,127,26.162]],["name/14-4",[]],["text/14-4",[]],["component/14-4",[]],["title/14-5",[50,19.634,369,32.352,1233,36.118]],["name/14-5",[]],["text/14-5",[]],["component/14-5",[]],["title/14-6",[111,19.625,1234,28.59,1235,27.295,1236,31.918]],["name/14-6",[]],["text/14-6",[]],["component/14-6",[]],["title/14-7",[9,20.309,50,15.543,111,17.581,316,16.704,1237,28.593]],["name/14-7",[]],["text/14-7",[]],["component/14-7",[]],["title/14-8",[47,17.579,50,19.634,1238,27.44]],["name/14-8",[]],["text/14-8",[]],["component/14-8",[]],["title/14-9",[32,20.235,42,8.138,104,17.367,563,18.649,609,22.317,1238,17.977,1239,23.663]],["name/14-9",[]],["text/14-9",[]],["component/14-9",[]],["title/14-10",[42,8.906,54,20.409,391,16.354,1238,19.674,1239,25.896,1240,25.896]],["name/14-10",[]],["text/14-10",[]],["component/14-10",[]],["title/14-11",[111,14.55,489,22.317,1103,21.196,1238,17.977,1241,27.607,1242,27.607,1243,22.317]],["name/14-11",[]],["text/14-11",[]],["component/14-11",[]],["title/14",[47,20.242,50,22.609]],["name/14",[47,0.33,50,0.369]],["text/14",[1,0.174,8,0.518,9,0.974,11,0.518,12,0.567,13,0.268,16,0.752,19,0.268,31,1.748,32,0.229,34,0.22,35,0.179,38,1.312,39,1.655,42,2.361,44,1.141,46,0.19,47,1.066,50,3.201,54,1.081,62,0.268,63,0.894,65,1.11,67,0.593,68,0.22,76,1.489,85,0.136,87,1.11,90,0.204,91,1.91,92,0.179,94,1.312,104,0.552,105,0.796,106,0.268,111,2.387,130,0.253,132,0.443,133,0.464,137,0.229,152,0.253,153,1.941,154,0.268,157,0.211,160,0.443,161,0.253,175,0.555,177,0.555,182,0.555,183,0.464,185,0.253,191,0.229,192,0.253,193,0.253,194,0.211,199,0.287,202,0.555,204,1.228,206,1.267,207,0.593,209,2.299,213,0.229,215,1.796,216,0.831,220,1.628,225,0.253,226,0.22,228,0.268,230,1.329,233,2.995,235,2.53,236,0.287,238,1.993,239,1.71,242,0.796,245,0.24,253,0.24,256,0.752,259,0.489,260,0.38,264,0.971,267,0.268,269,1.261,270,0.674,278,0.443,279,2.825,281,0.22,291,0.916,302,0.253,304,0.287,308,0.593,310,1.041,313,0.489,316,1.776,317,1.549,321,1.469,322,1.665,323,0.806,325,1.371,331,1.476,332,0.713,336,3.864,337,0.24,341,0.87,342,1.041,344,0.253,347,1.727,349,1.466,352,2.206,364,0.24,368,1.616,369,0.674,370,1.469,373,1.469,379,0.253,381,0.738,386,0.555,391,1.384,393,0.425,395,1.181,401,0.268,409,0.229,411,0.489,415,0.287,424,1.041,435,0.555,441,0.443,443,1.329,445,0.253,446,0.425,447,0.24,448,0.916,451,0.674,456,0.965,462,0.24,463,1.387,466,0.253,472,0.287,477,0.253,478,1.469,479,0.268,482,3.364,487,1.228,488,0.831,489,1.11,496,0.489,497,1.041,498,2.19,501,0.394,502,0.287,504,2.995,510,0.268,517,1.469,522,0.229,526,0.489,527,0.253,529,0.709,530,0.253,534,1.469,536,0.443,538,0.24,539,0.24,545,0.211,546,0.287,547,0.287,556,0.24,558,2.71,562,0.253,563,2.136,567,0.489,570,0.22,573,0.24,574,0.555,589,0.287,597,1.274,599,0.229,601,0.253,602,0.489,603,0.287,614,0.229,650,0.287,652,0.268,687,1.676,688,2.556,692,0.425,693,0.518,698,1.007,719,0.24,731,0.518,740,1.748,746,0.555,751,0.806,754,0.253,757,0.489,767,0.253,786,0.287,787,1.928,790,0.253,792,0.674,795,0.24,815,0.518,846,0.916,862,0.287,864,0.287,879,0.674,890,1.466,904,0.555,908,2.198,930,0.443,932,0.287,934,0.253,941,0.555,944,1.041,948,0.489,950,0.709,955,1.628,962,0.229,963,0.253,968,5.785,971,0.555,972,0.287,975,2.589,977,0.253,987,2.198,989,0.253,991,1.665,996,0.287,1002,0.287,1003,1.173,1026,0.489,1056,0.806,1059,0.752,1061,0.287,1076,0.287,1084,1.693,1086,2.463,1087,0.24,1090,0.268,1091,0.268,1093,0.971,1094,0.24,1103,2.628,1110,1.177,1116,1.177,1117,0.752,1120,0.518,1124,2.71,1125,0.268,1129,0.971,1132,1.782,1139,0.518,1145,1.177,1147,0.518,1148,0.752,1151,0.268,1152,0.268,1156,0.518,1177,0.268,1188,2.045,1191,0.268,1193,0.268,1230,0.971,1231,1.177,1232,4.658,1233,0.518,1234,1.693,1235,3.197,1236,0.518,1237,0.268,1238,2.385,1240,1.727,1243,0.709,1244,0.313,1245,1.261,1246,0.877,1247,0.313,1248,0.971,1249,2.205,1250,0.313,1251,1.11,1252,0.313,1253,0.313,1254,0.313,1255,0.268,1256,0.313,1257,0.313,1258,0.605,1259,0.313,1260,0.253,1261,0.313,1262,0.313,1263,0.605,1264,0.877,1265,1.6,1266,0.877,1267,0.313,1268,1.133,1269,2.014,1270,0.313,1271,0.313,1272,0.313,1273,0.313,1274,0.313,1275,0.605,1276,0.313,1277,0.313,1278,2.874,1279,2.331,1280,1.554,1281,0.313,1282,1.133,1283,0.313,1284,1.133,1285,0.313,1286,0.253,1287,0.313,1288,0.605,1289,0.313,1290,0.877,1291,0.313,1292,3.423,1293,0.313,1294,0.287,1295,0.313,1296,0.313,1297,0.313,1298,1.133,1299,0.313,1300,0.313,1301,0.605,1302,0.313,1303,2.385,1304,0.605,1305,0.313,1306,0.313,1307,0.605,1308,0.313,1309,1.374,1310,0.313,1311,0.313,1312,0.287,1313,0.605,1314,0.313,1315,1.469,1316,0.313,1317,0.605,1318,0.313,1319,0.313,1320,0.313,1321,0.313,1322,0.313,1323,0.313,1324,0.877,1325,0.877,1326,0.313,1327,1.374,1328,0.605,1329,0.605,1330,0.605,1331,0.605,1332,0.605,1333,0.605,1334,0.877,1335,1.133,1336,0.605,1337,0.971,1338,0.605,1339,0.313,1340,2.385,1341,0.313,1342,0.313,1343,0.313,1344,0.313,1345,0.313,1346,0.313,1347,0.313,1348,0.605,1349,0.313,1350,0.877,1351,2.385,1352,0.313,1353,0.313,1354,0.313,1355,0.313,1356,0.313,1357,0.313,1358,0.313,1359,0.313,1360,0.605,1361,0.313,1362,0.313,1363,0.605,1364,0.605,1365,0.605,1366,0.605,1367,0.605,1368,0.605,1369,0.313,1370,0.313,1371,0.313,1372,0.313,1373,0.313,1374,0.313,1375,0.313,1376,0.313,1377,0.313,1378,0.605,1379,0.313,1380,0.313,1381,0.313,1382,0.313,1383,0.313,1384,0.313,1385,0.313,1386,0.313,1387,0.313,1388,0.313,1389,0.313,1390,0.313,1391,0.313,1392,0.313,1393,0.605,1394,0.313,1395,0.313,1396,0.313,1397,0.313,1398,0.877,1399,0.313,1400,0.313,1401,0.313,1402,0.313,1403,0.268,1404,0.605,1405,1.133,1406,0.605,1407,0.313,1408,0.605,1409,0.313,1410,0.313,1411,0.605,1412,0.605,1413,0.313,1414,0.313,1415,0.518,1416,0.313,1417,0.313,1418,3.584,1419,1.6,1420,0.313,1421,0.313,1422,0.605,1423,0.313,1424,0.877,1425,0.313,1426,0.313,1427,0.313,1428,0.268,1429,0.605,1430,0.313,1431,0.313,1432,0.313,1433,0.877,1434,0.313,1435,0.877,1436,1.374,1437,1.6,1438,0.605,1439,0.877,1440,0.313,1441,0.313,1442,0.313,1443,0.605,1444,0.877,1445,0.313,1446,0.313,1447,0.313,1448,0.313,1449,0.313,1450,0.555,1451,0.518,1452,0.877,1453,0.605,1454,0.605,1455,0.313,1456,0.313,1457,0.313,1458,0.313,1459,0.313,1460,0.313,1461,0.518,1462,0.313,1463,0.313,1464,0.313,1465,1.374,1466,0.605,1467,0.605,1468,0.605,1469,0.605,1470,0.313,1471,0.313,1472,0.313,1473,0.313,1474,0.313,1475,0.313,1476,0.313,1477,0.313,1478,0.605,1479,0.313,1480,0.287,1481,0.605,1482,0.313,1483,0.313,1484,0.313,1485,0.313,1486,0.313,1487,0.489,1488,0.313,1489,0.605,1490,0.268,1491,0.605,1492,0.605,1493,0.313,1494,0.313,1495,1.85,1496,0.605,1497,1.554,1498,0.605,1499,0.287,1500,1.133,1501,0.877,1502,0.877,1503,1.133,1504,0.268,1505,0.489,1506,0.313,1507,0.313,1508,0.605,1509,1.6,1510,1.133,1511,0.313,1512,0.229,1513,1.133,1514,0.313,1515,0.752,1516,0.605,1517,0.313,1518,0.605,1519,0.605,1520,0.313,1521,0.268,1522,0.313,1523,0.313,1524,0.313,1525,0.313,1526,1.813,1527,1.6,1528,0.605,1529,0.287,1530,0.313,1531,1.6,1532,0.313,1533,0.313,1534,0.313,1535,0.313,1536,0.605,1537,0.916,1538,0.752,1539,0.877,1540,0.605,1541,0.313,1542,0.313,1543,0.313,1544,0.877,1545,0.313,1546,0.313,1547,0.313,1548,0.313,1549,0.268,1550,0.268,1551,0.313,1552,0.253,1553,0.518,1554,0.313,1555,0.313,1556,0.313,1557,0.313,1558,0.313,1559,0.313,1560,0.268,1561,0.489,1562,0.313,1563,0.313,1564,0.313,1565,0.313,1566,0.313,1567,0.313,1568,0.313,1569,0.605,1570,0.313,1571,0.313,1572,0.605,1573,0.605,1574,0.313,1575,0.313,1576,0.313,1577,0.313,1578,0.313,1579,0.313,1580,0.313,1581,0.313,1582,0.313,1583,0.313,1584,0.313,1585,0.313,1586,0.313,1587,0.313,1588,0.313,1589,0.313,1590,0.313,1591,0.605,1592,0.605,1593,0.313,1594,0.313,1595,0.605,1596,0.268,1597,0.313,1598,0.877,1599,0.313,1600,0.313,1601,0.877,1602,0.253,1603,0.253,1604,1.133,1605,0.605,1606,0.313,1607,0.268,1608,0.313,1609,0.313,1610,0.313,1611,0.313]],["component/14",[12,0.435]],["title/15-1",[51,16.814,71,28.498,135,24.422,136,22.144,1612,25.896]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["title/15-2",[51,31.827]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["title/15-3",[51,18.565,136,24.451,541,26.966,1512,24.451,1613,33.359]],["name/15-3",[]],["text/15-3",[]],["component/15-3",[]],["title/15-4",[372,31.598,442,39.225]],["name/15-4",[]],["text/15-4",[]],["component/15-4",[]],["title/15-5",[47,20.242,1614,41.591]],["name/15-5",[]],["text/15-5",[]],["component/15-5",[]],["title/15-6",[372,31.598,1615,41.591]],["name/15-6",[]],["text/15-6",[]],["component/15-6",[]],["title/15-7",[1616,41.591,1617,41.591]],["name/15-7",[]],["text/15-7",[]],["component/15-7",[]],["title/15-8",[129,46.23]],["name/15-8",[]],["text/15-8",[]],["component/15-8",[]],["title/15-9",[1618,41.591,1619,48.524]],["name/15-9",[]],["text/15-9",[]],["component/15-9",[]],["title/15-10",[71,20.985,103,20.985,293,25.612,930,24.451,1620,26.966]],["name/15-10",[]],["text/15-10",[]],["component/15-10",[]],["title/15-11",[71,19.006,103,19.006,113,23.195,157,20.409,522,22.144,1621,25.896]],["name/15-11",[]],["text/15-11",[]],["component/15-11",[]],["title/15-12",[64,32.352,285,34.063,1622,36.118]],["name/15-12",[]],["text/15-12",[]],["component/15-12",[]],["title/15-13",[1623,41.591,1624,41.591]],["name/15-13",[]],["text/15-13",[]],["component/15-13",[]],["title/15",[51,31.827]],["name/15",[51,0.791]],["text/15",[9,0.536,24,0.711,34,0.618,35,0.504,36,1.232,39,0.536,45,0.645,47,1.623,51,3.187,61,0.676,63,0.573,64,0.676,71,0.554,75,1.375,77,0.711,78,0.618,81,0.711,85,0.383,88,1.375,89,0.754,92,0.919,94,0.573,95,1.493,97,1.894,103,1.714,104,1.009,105,0.618,111,1.436,113,1.697,127,2.496,129,1.297,130,1.297,131,0.754,132,3.265,133,0.676,135,2.203,136,3.74,137,0.645,152,0.711,153,1.841,157,1.841,174,1.375,191,1.62,192,1.297,193,1.297,194,1.493,195,1.697,204,1.232,205,1.375,206,2.447,207,1.084,209,1.659,212,1.084,213,1.176,215,0.618,216,1.997,217,0.808,218,0.754,226,0.618,230,0.645,239,3.423,278,1.176,280,1.375,281,0.618,284,0.808,285,2.561,291,0.711,293,2.432,294,3.262,297,2.502,302,0.711,308,1.493,314,0.711,316,0.441,319,0.645,330,0.754,331,0.645,332,1.009,333,0.808,334,0.808,341,0.676,344,1.297,346,0.808,357,0.754,361,0.711,366,0.808,367,2.203,368,2.322,372,4.298,383,1.473,384,1.375,385,0.808,390,0.754,391,0.476,393,0.618,395,1.439,398,1.232,404,0.711,405,1.473,406,0.808,408,0.754,409,0.645,411,0.711,427,0.618,428,0.808,429,0.808,430,0.808,436,0.676,441,0.645,442,1.297,443,1.62,446,1.553,448,0.711,449,2.029,451,2.092,456,0.618,462,0.676,463,1.39,467,0.754,470,1.473,471,1.375,476,1.473,487,2.432,488,0.645,504,3.265,505,0.754,516,0.754,522,1.176,527,1.297,528,1.297,529,0.711,535,1.894,536,0.645,538,1.232,539,4.397,541,2.561,542,2.502,545,1.084,556,1.232,562,1.297,565,0.676,568,1.375,570,0.618,571,1.473,578,2.502,584,0.808,585,0.676,586,0.754,587,1.297,590,0.754,595,0.808,597,1.553,601,0.711,614,1.176,636,0.754,675,0.711,687,1.915,692,0.618,698,1.176,719,0.676,724,0.573,747,2.029,753,1.473,754,0.711,757,0.711,762,0.754,767,1.787,768,2.029,775,1.894,776,0.754,787,0.711,790,0.711,792,0.676,795,0.676,800,0.754,819,1.473,835,0.808,841,0.808,842,0.711,846,0.711,930,1.176,933,0.808,934,0.711,942,0.754,948,1.297,956,0.808,957,0.808,962,0.645,963,0.711,974,0.808,981,1.473,989,0.711,992,0.711,1003,0.645,1053,0.754,1054,0.808,1087,0.676,1088,1.375,1094,0.676,1096,1.375,1104,0.754,1106,2.336,1144,1.894,1234,1.697,1235,0.645,1248,0.754,1251,1.787,1255,0.754,1260,1.787,1279,0.754,1280,0.754,1286,0.711,1337,1.375,1403,1.375,1415,2.336,1418,0.754,1428,1.375,1451,0.754,1461,1.894,1487,1.297,1490,0.754,1497,0.754,1504,0.754,1505,1.787,1512,1.176,1515,0.754,1521,0.754,1537,0.711,1538,0.754,1549,0.754,1550,0.754,1552,0.711,1553,0.754,1560,0.754,1561,0.711,1596,0.754,1602,3.794,1603,0.711,1607,0.754,1612,0.754,1614,2.336,1615,1.894,1616,3.045,1617,1.375,1618,1.375,1620,1.297,1621,1.894,1622,3.335,1623,1.375,1624,1.375,1625,2.21,1626,0.88,1627,0.88,1628,1.604,1629,1.604,1630,1.604,1631,1.473,1632,0.88,1633,2.029,1634,0.88,1635,1.473,1636,0.808,1637,0.88,1638,0.88,1639,0.88,1640,0.88,1641,0.88,1642,0.88,1643,1.604,1644,1.604,1645,0.88,1646,1.604,1647,1.604,1648,1.604,1649,1.604,1650,1.473,1651,2.21,1652,1.604,1653,0.88,1654,0.808,1655,0.88,1656,1.604,1657,0.88,1658,1.604,1659,0.88,1660,0.88,1661,1.604,1662,2.21,1663,0.88,1664,2.029,1665,0.88,1666,1.604,1667,0.88,1668,0.88,1669,1.604,1670,1.473,1671,2.21,1672,0.88,1673,0.88,1674,0.88,1675,0.88,1676,0.88,1677,0.88,1678,2.725,1679,0.88,1680,0.88,1681,0.88,1682,0.88,1683,0.88,1684,0.88,1685,1.604,1686,0.88,1687,0.88,1688,0.88,1689,0.88,1690,0.88,1691,0.88,1692,0.88,1693,0.88,1694,0.88,1695,0.88,1696,0.88,1697,0.88,1698,0.88,1699,0.88,1700,0.88,1701,0.88,1702,1.604,1703,0.88,1704,2.21,1705,0.88,1706,0.88,1707,0.88,1708,0.88,1709,0.88,1710,0.88,1711,0.88,1712,1.604,1713,0.88,1714,1.604,1715,0.88,1716,0.88,1717,1.604,1718,0.88,1719,0.88,1720,0.88,1721,0.808,1722,0.88,1723,0.88,1724,0.88,1725,0.88,1726,0.808,1727,0.88,1728,0.88,1729,0.88,1730,0.88,1731,0.88,1732,0.88,1733,1.604,1734,0.88,1735,1.604,1736,0.88,1737,1.604,1738,0.88,1739,1.473,1740,0.88,1741,0.88,1742,0.88,1743,2.029,1744,0.88,1745,0.88,1746,0.88,1747,0.88,1748,0.88,1749,0.88,1750,0.88,1751,0.88,1752,0.88,1753,0.88,1754,0.88,1755,0.88,1756,0.808,1757,0.808,1758,0.88,1759,0.88,1760,0.88,1761,0.808,1762,1.604,1763,0.88,1764,0.88,1765,0.88,1766,0.88,1767,0.88,1768,0.88,1769,0.88]],["component/15",[12,0.435]]],"invertedIndex":[["",{"_index":42,"title":{"3":{},"3-1":{},"3-2":{},"3-3":{},"3-4":{},"3-5":{},"3-6":{},"3-7":{},"3-8":{},"3-9":{},"3-13":{},"3-14":{},"3-15":{},"3-16":{},"3-17":{},"3-18":{},"3-20":{},"3-23":{},"3-24":{},"3-25":{},"3-26":{},"3-27":{},"3-28":{},"3-29":{},"6-5":{},"7-1":{},"7-4":{},"7-5":{},"7-13":{},"9-9":{},"9-10":{},"14-9":{},"14-10":{}},"name":{},"text":{"1":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["0",{"_index":373,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["0d",{"_index":1423,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["1",{"_index":233,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"14":{}},"component":{}}],["1+1",{"_index":1565,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["1.0",{"_index":146,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10",{"_index":264,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"14":{}},"component":{}}],["10e4",{"_index":742,"title":{},"name":{},"text":{"6":{}},"component":{}}],["11",{"_index":267,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"14":{}},"component":{}}],["12",{"_index":1394,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["13",{"_index":1395,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["14",{"_index":1396,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["15",{"_index":1397,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["16",{"_index":1398,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["17",{"_index":1399,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["18",{"_index":1400,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["19",{"_index":1401,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["1l",{"_index":1580,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["1xx",{"_index":355,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2",{"_index":235,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{},"14":{}},"component":{}}],["2.0",{"_index":640,"title":{"6-8":{},"6-11":{},"6-12":{}},"name":{},"text":{"4":{},"5":{},"6":{}},"component":{}}],["2.3",{"_index":575,"title":{},"name":{},"text":{"3":{}},"component":{}}],["20",{"_index":1156,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["200",{"_index":1360,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["2003",{"_index":140,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2004",{"_index":145,"title":{},"name":{},"text":{"3":{}},"component":{}}],["201",{"_index":402,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2013",{"_index":1772,"title":{},"name":{},"text":{"11":{}},"component":{}}],["22348883d954",{"_index":745,"title":{},"name":{},"text":{"6":{}},"component":{}}],["24",{"_index":1205,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["25",{"_index":1207,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["25+1",{"_index":1568,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["26",{"_index":1567,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["28",{"_index":1196,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["2xx",{"_index":356,"title":{},"name":{},"text":{"3":{}},"component":{}}],["3",{"_index":238,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["3.0",{"_index":1833,"title":{},"name":{},"text":{"11":{}},"component":{}}],["30",{"_index":1388,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["33",{"_index":1202,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["35",{"_index":1199,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["3xx",{"_index":358,"title":{},"name":{},"text":{"3":{}},"component":{}}],["4",{"_index":242,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"11":{},"13":{},"14":{}},"component":{}}],["4+1",{"_index":1566,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["400",{"_index":566,"title":{},"name":{},"text":{"3":{}},"component":{}}],["401",{"_index":737,"title":{},"name":{},"text":{"6":{}},"component":{}}],["403",{"_index":755,"title":{},"name":{},"text":{"6":{}},"component":{}}],["404",{"_index":929,"title":{"7-20":{}},"name":{},"text":{"7":{}},"component":{}}],["480b",{"_index":684,"title":{},"name":{},"text":{"4":{}},"component":{}}],["4997",{"_index":743,"title":{},"name":{},"text":{"6":{}},"component":{}}],["499d",{"_index":671,"title":{},"name":{},"text":{"4":{}},"component":{}}],["4d5fea8eaeab",{"_index":673,"title":{},"name":{},"text":{"4":{}},"component":{}}],["4mdp",{"_index":666,"title":{},"name":{},"text":{"4":{}},"component":{}}],["4xx",{"_index":360,"title":{},"name":{},"text":{"3":{}},"component":{}}],["5",{"_index":245,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"11":{},"14":{}},"component":{}}],["5xx",{"_index":362,"title":{},"name":{},"text":{"3":{}},"component":{}}],["6",{"_index":248,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["60x",{"_index":1143,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["64",{"_index":1507,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["7",{"_index":253,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["70",{"_index":582,"title":{},"name":{},"text":{"3":{}},"component":{}}],["778a",{"_index":670,"title":{},"name":{},"text":{"4":{}},"component":{}}],["7faf52507bfb",{"_index":686,"title":{},"name":{},"text":{"4":{}},"component":{}}],["8",{"_index":256,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"14":{}},"component":{}}],["80",{"_index":583,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9",{"_index":259,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"11":{},"14":{}},"component":{}}],["9882",{"_index":744,"title":{},"name":{},"text":{"6":{}},"component":{}}],["9e59",{"_index":672,"title":{},"name":{},"text":{"4":{}},"component":{}}],["a11",{"_index":1539,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["a12",{"_index":1540,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["abil",{"_index":1821,"title":{},"name":{},"text":{"11":{}},"component":{}}],["abstract",{"_index":45,"title":{},"name":{},"text":{"1":{},"3":{},"8":{},"10":{},"12":{},"13":{},"15":{}},"component":{}}],["accept",{"_index":1338,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["accept(mediatype.application_json",{"_index":702,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["accept(t",{"_index":1113,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["access",{"_index":488,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["accommod",{"_index":1705,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["accord",{"_index":322,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["account",{"_index":766,"title":{},"name":{},"text":{"6":{}},"component":{}}],["accumul",{"_index":1278,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["accur",{"_index":1811,"title":{},"name":{},"text":{"11":{}},"component":{}}],["achiev",{"_index":1743,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["acid",{"_index":1621,"title":{"10-11":{},"15-11":{}},"name":{},"text":{"10":{},"15":{}},"component":{}}],["act",{"_index":769,"title":{},"name":{},"text":{"6":{},"11":{}},"component":{}}],["action",{"_index":390,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"15":{}},"component":{}}],["activ",{"_index":523,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["actual",{"_index":956,"title":{},"name":{},"text":{"7":{},"10":{},"15":{}},"component":{}}],["ad",{"_index":277,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"8":{},"13":{}},"component":{}}],["add",{"_index":573,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"9":{},"14":{}},"component":{}}],["addit",{"_index":409,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["additionalinterceptors(clientinterceptor",{"_index":901,"title":{},"name":{},"text":{"6":{}},"component":{}}],["adjust",{"_index":1815,"title":{},"name":{},"text":{"11":{}},"component":{}}],["adopt",{"_index":1827,"title":{},"name":{},"text":{"11":{}},"component":{}}],["afterpropertiesset",{"_index":257,"title":{},"name":{},"text":{"3":{}},"component":{}}],["ag",{"_index":1193,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["again",{"_index":1601,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["age=24",{"_index":1227,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["age=25",{"_index":1226,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["age=28",{"_index":1222,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["age=33",{"_index":1224,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["age=35",{"_index":1229,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["aggreg",{"_index":472,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["aim",{"_index":1735,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["akka",{"_index":1828,"title":{},"name":{},"text":{"11":{}},"component":{}}],["alert",{"_index":1126,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["alg\":\"rs256",{"_index":674,"title":{},"name":{},"text":{"4":{}},"component":{}}],["algorithm",{"_index":1231,"title":{"9-1":{},"14-1":{}},"name":{},"text":{"9":{},"14":{}},"component":{}}],["aliv",{"_index":288,"title":{},"name":{},"text":{"3":{}},"component":{}}],["alloc",{"_index":1294,"title":{},"name":{},"text":{"9":{},"11":{},"14":{}},"component":{}}],["allow",{"_index":226,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["alter",{"_index":186,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["altern",{"_index":142,"title":{},"name":{},"text":{"3":{}},"component":{}}],["alway",{"_index":1428,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["amount",{"_index":1597,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["an5o0x",{"_index":657,"title":{},"name":{},"text":{"4":{}},"component":{}}],["analyz",{"_index":468,"title":{},"name":{},"text":{"3":{}},"component":{}}],["and/or",{"_index":848,"title":{},"name":{},"text":{"6":{}},"component":{}}],["andexpect(content().contenttype(mediatype.application_json",{"_index":704,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["andexpect(jsonpath(\"$.content.length",{"_index":705,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["andexpect(queryparam(\"nam",{"_index":1067,"title":{},"name":{},"text":{"7":{}},"component":{}}],["andexpect(requestto(\"http://localhost:8080/api/v1/resourc",{"_index":1044,"title":{},"name":{},"text":{"7":{}},"component":{}}],["andexpect(requestto(uri",{"_index":1066,"title":{},"name":{},"text":{"7":{}},"component":{}}],["andexpect(requesttouritemplate(\"http://localhost:8080/api/v1/resource/{resourceid",{"_index":1069,"title":{},"name":{},"text":{"7":{}},"component":{}}],["andexpect(status().isok",{"_index":703,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["andrespond(withaccepted().location(uri",{"_index":1072,"title":{},"name":{},"text":{"7":{}},"component":{}}],["andrespond(withnocont",{"_index":1074,"title":{},"name":{},"text":{"7":{}},"component":{}}],["andrespond(withresourcenotfound",{"_index":1080,"title":{},"name":{},"text":{"7":{}},"component":{}}],["andrespond(withsuccess(payload",{"_index":1045,"title":{},"name":{},"text":{"7":{}},"component":{}}],["andrespond(withsuccess(respons",{"_index":1068,"title":{},"name":{},"text":{"7":{}},"component":{}}],["annot",{"_index":255,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"8":{},"13":{}},"component":{}}],["annotations](annotations.md",{"_index":163,"title":{},"name":{},"text":{"3":{}},"component":{}}],["anonym",{"_index":1089,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["anoth",{"_index":207,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["anti",{"_index":1675,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["anyon",{"_index":28,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["anyth",{"_index":1026,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["apach",{"_index":937,"title":{},"name":{},"text":{"7":{}},"component":{}}],["api",{"_index":47,"title":{"9":{},"14":{},"6-3":{},"6-11":{},"9-2":{},"9-3":{},"9-8":{},"10-5":{},"11-3":{},"14-2":{},"14-3":{},"14-8":{},"15-5":{}},"name":{"9":{},"14":{}},"text":{"1":{},"3":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["api](api.md",{"_index":164,"title":{},"name":{},"text":{"3":{}},"component":{}}],["app",{"_index":1700,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["appli",{"_index":321,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["applic",{"_index":132,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["application.properti",{"_index":1006,"title":{},"name":{},"text":{"7":{}},"component":{}}],["application’",{"_index":469,"title":{},"name":{},"text":{"3":{}},"component":{}}],["apply(springsecur",{"_index":709,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["apply(t",{"_index":1121,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["approach",{"_index":1252,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["appropri",{"_index":802,"title":{},"name":{},"text":{"6":{}},"component":{}}],["architectur",{"_index":136,"title":{"10-1":{},"10-3":{},"15-1":{},"15-3":{}},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["aren’t",{"_index":524,"title":{},"name":{},"text":{"3":{}},"component":{}}],["argument",{"_index":1109,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["aris",{"_index":1759,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["arithmet",{"_index":1302,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["around",{"_index":152,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["array",{"_index":1292,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["arraylist",{"_index":1465,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["arrays#stream(t",{"_index":1342,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["arrays.aslist(\"on",{"_index":1162,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["arrays.aslist(sarah",{"_index":1208,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["arrays.stream(words).count",{"_index":1372,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["arrow",{"_index":1102,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["artifact",{"_index":1652,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["ascii",{"_index":1376,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["ask",{"_index":1818,"title":{},"name":{},"text":{"11":{}},"component":{}}],["assert",{"_index":898,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["assertthat(resourcedtos.getcontent().size()).isgreaterthan(0",{"_index":1048,"title":{},"name":{},"text":{"7":{}},"component":{}}],["assertthrows(httpclienterrorexception.class",{"_index":1081,"title":{},"name":{},"text":{"7":{}},"component":{}}],["associ",{"_index":1280,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["assumpt",{"_index":1590,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["asymmetr",{"_index":791,"title":{},"name":{},"text":{"6":{}},"component":{}}],["asynchron",{"_index":1620,"title":{"10-10":{},"15-10":{}},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["atom",{"_index":1736,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["attempt",{"_index":840,"title":{},"name":{},"text":{"6":{}},"component":{}}],["aud\":\"oidc",{"_index":677,"title":{},"name":{},"text":{"4":{}},"component":{}}],["auth",{"_index":725,"title":{"6-2":{},"6-3":{},"6-5":{},"6-6":{},"6-7":{},"6-10":{}},"name":{},"text":{"6":{}},"component":{}}],["authent",{"_index":720,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["author",{"_index":57,"title":{"4":{},"4-4":{},"4-5":{},"5-4":{}},"name":{"4":{}},"text":{"1":{},"4":{},"5":{},"6":{}},"component":{}}],["authorizationgranttype(authorizationgranttype.authorization_cod",{"_index":624,"title":{},"name":{},"text":{"4":{}},"component":{}}],["authorizationgranttype(authorizationgranttype.client_credenti",{"_index":626,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["authorizationgranttype(authorizationgranttype.refresh_token",{"_index":625,"title":{},"name":{},"text":{"4":{}},"component":{}}],["authorizationserversettings.html#build",{"_index":691,"title":{},"name":{},"text":{"4":{}},"component":{}}],["authorize.anyrequest().authent",{"_index":715,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["authorizedcli",{"_index":869,"title":{},"name":{},"text":{"6":{}},"component":{}}],["authorizedclient.getaccesstoken().gettokenvalu",{"_index":874,"title":{},"name":{},"text":{"6":{}},"component":{}}],["authorizedclientmanag",{"_index":851,"title":{},"name":{},"text":{"6":{}},"component":{}}],["authorizedclientmanager(clientregistrationrepositori",{"_index":825,"title":{},"name":{},"text":{"6":{}},"component":{}}],["authorizedclientmanager.authorize(authorizerequest",{"_index":870,"title":{},"name":{},"text":{"6":{}},"component":{}}],["authorizedclientprovid",{"_index":828,"title":{},"name":{},"text":{"6":{}},"component":{}}],["authorizedclientservic",{"_index":827,"title":{},"name":{},"text":{"6":{}},"component":{}}],["authorizedclientserviceauthorizedclientmanag",{"_index":832,"title":{},"name":{},"text":{"6":{}},"component":{}}],["authorizedclientserviceauthorizedclientmanager.setauthorizedclientprovider(authorizedclientprovid",{"_index":833,"title":{},"name":{},"text":{"6":{}},"component":{}}],["authorizedclientserviceoauth2authorizedclientmanag",{"_index":831,"title":{},"name":{},"text":{"6":{}},"component":{}}],["authorizerequest",{"_index":866,"title":{},"name":{},"text":{"6":{}},"component":{}}],["auto",{"_index":155,"title":{},"name":{},"text":{"3":{}},"component":{}}],["autobox",{"_index":1146,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["autoconfigur",{"_index":730,"title":{},"name":{},"text":{"6":{}},"component":{}}],["autom",{"_index":149,"title":{},"name":{},"text":{"3":{}},"component":{}}],["automat",{"_index":413,"title":{},"name":{},"text":{"3":{}},"component":{}}],["autonom",{"_index":1640,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["autowir",{"_index":210,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["avail",{"_index":1505,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["averag",{"_index":291,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["average().orelsethrow",{"_index":1427,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["avoid",{"_index":225,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["awar",{"_index":1647,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["b520",{"_index":685,"title":{},"name":{},"text":{"4":{}},"component":{}}],["back",{"_index":526,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"11":{},"14":{}},"component":{}}],["backward",{"_index":1097,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["bad",{"_index":567,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["base",{"_index":157,"title":{"7-7":{},"10-11":{},"15-11":{}},"name":{},"text":{"3":{},"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["base64",{"_index":732,"title":{},"name":{},"text":{"6":{}},"component":{}}],["basestream>#parallel",{"_index":1474,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["baseuri",{"_index":895,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["basic",{"_index":724,"title":{"6-2":{},"6-3":{},"6-5":{},"6-6":{},"6-7":{},"6-10":{}},"name":{},"text":{"6":{},"7":{},"10":{},"15":{}},"component":{}}],["be",{"_index":228,"title":{},"name":{},"text":{"3":{},"9":{},"11":{},"14":{}},"component":{}}],["bean",{"_index":83,"title":{"3-8":{},"3-28":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{}},"component":{}}],["bearer",{"_index":689,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["becom",{"_index":1415,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["befor",{"_index":1056,"title":{},"name":{},"text":{"7":{},"9":{},"14":{}},"component":{}}],["beforeeach",{"_index":915,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["begin",{"_index":1715,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["behalf",{"_index":770,"title":{},"name":{},"text":{"6":{}},"component":{}}],["behavior",{"_index":585,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"15":{}},"component":{}}],["below",{"_index":40,"title":{},"name":{},"text":{"1":{},"7":{},"12":{}},"component":{}}],["bench",{"_index":1548,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["best",{"_index":104,"title":{"3-16":{},"9-9":{},"14-9":{}},"name":{},"text":{"3":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["better",{"_index":962,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["between",{"_index":556,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["bewar",{"_index":1488,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["bifunct",{"_index":1149,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["big",{"_index":1530,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["bigger",{"_index":1501,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["binaryoper",{"_index":1282,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["bind",{"_index":555,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["bit",{"_index":1478,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["block",{"_index":436,"title":{},"name":{},"text":{"3":{},"8":{},"10":{},"11":{},"13":{},"15":{}},"component":{}}],["blue_squar",{"_index":306,"title":{},"name":{},"text":{"3":{}},"component":{}}],["bodi",{"_index":314,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"15":{}},"component":{}}],["book",{"_index":15,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["boolean",{"_index":882,"title":{},"name":{},"text":{"6":{},"8":{},"13":{}},"component":{}}],["boot",{"_index":72,"title":{"3-2":{},"3-17":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{}},"component":{}}],["boot/how",{"_index":116,"title":{"3-26":{}},"name":{},"text":{},"component":{}}],["both",{"_index":1561,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["bottleneck",{"_index":1554,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["boundari",{"_index":1650,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["box",{"_index":1489,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["break",{"_index":384,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"15":{}},"component":{}}],["breaker",{"_index":1713,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["bring",{"_index":601,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["broken",{"_index":1716,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["broker",{"_index":588,"title":{},"name":{},"text":{"3":{}},"component":{}}],["brown",{"_index":1364,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["browser",{"_index":425,"title":{},"name":{},"text":{"3":{}},"component":{}}],["bu",{"_index":1632,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["bucket",{"_index":1608,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["build",{"_index":127,"title":{"9-4":{},"14-4":{}},"name":{},"text":{"3":{},"4":{},"6":{},"10":{},"11":{},"15":{}},"component":{}}],["built",{"_index":1656,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["burden",{"_index":1634,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["busi",{"_index":448,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["busiest",{"_index":1703,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["button",{"_index":651,"title":{},"name":{},"text":{"4":{}},"component":{}}],["byte",{"_index":862,"title":{},"name":{},"text":{"6":{},"9":{},"14":{}},"component":{}}],["bytecod",{"_index":1140,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["c",{"_index":1405,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["c.equals(abstractcollection.class",{"_index":1417,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["c.getsuperclass",{"_index":1406,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["c1",{"_index":1175,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["c1.andthen(c2",{"_index":1180,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["c2",{"_index":1177,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["c3",{"_index":1179,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["c3.accept(\"hello",{"_index":1181,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["c3c8kxfzlrrdoet3razkxx1vrs9npdarnqgr5wynesl",{"_index":665,"title":{},"name":{},"text":{"4":{}},"component":{}}],["c4zm8o7j_jmkudshllwxfvmb06ypa9hz",{"_index":661,"title":{},"name":{},"text":{"4":{}},"component":{}}],["cach",{"_index":279,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"14":{}},"component":{}}],["cacheabl",{"_index":348,"title":{},"name":{},"text":{"3":{}},"component":{}}],["call",{"_index":239,"title":{"6-3":{},"6-11":{}},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["callabl",{"_index":1578,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["cancel",{"_index":1845,"title":{},"name":{},"text":{"11":{}},"component":{}}],["capabl",{"_index":963,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["captur",{"_index":1813,"title":{},"name":{},"text":{"11":{}},"component":{}}],["care",{"_index":406,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["carri",{"_index":1250,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["cascad",{"_index":502,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["case",{"_index":944,"title":{},"name":{},"text":{"7":{},"9":{},"14":{}},"component":{}}],["cassandra",{"_index":1757,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["catastroph",{"_index":1669,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["catch",{"_index":1357,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["categori",{"_index":1107,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["caus",{"_index":344,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["center",{"_index":1594,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["central",{"_index":1630,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["certain",{"_index":1485,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["chain",{"_index":1085,"title":{"8-4":{},"13-4":{}},"name":{},"text":{"8":{},"13":{}},"component":{}}],["chang",{"_index":63,"title":{"2-1":{}},"name":{},"text":{"2":{},"3":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["char",{"_index":1379,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["character.tostring(codepoint",{"_index":1382,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["characterist",{"_index":1804,"title":{},"name":{},"text":{"11":{}},"component":{}}],["charsequ",{"_index":1330,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["chase",{"_index":1510,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["cheat",{"_index":4,"title":{"1":{},"12":{},"3-4":{}},"name":{},"text":{"1":{},"12":{}},"component":{}}],["check",{"_index":693,"title":{},"name":{},"text":{"4":{},"6":{},"9":{},"14":{}},"component":{}}],["child",{"_index":506,"title":{},"name":{},"text":{"3":{}},"component":{}}],["children",{"_index":520,"title":{},"name":{},"text":{"3":{}},"component":{}}],["choos",{"_index":1241,"title":{"9-11":{},"14-11":{}},"name":{},"text":{},"component":{}}],["circuit",{"_index":1712,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["circular",{"_index":1710,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["citi",{"_index":1275,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["cities.stream",{"_index":1272,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["city.getpeople().stream",{"_index":1274,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["claims.put(\"scop",{"_index":697,"title":{},"name":{},"text":{"4":{}},"component":{}}],["class",{"_index":44,"title":{},"name":{},"text":{"1":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"12":{},"13":{},"14":{}},"component":{}}],["classic",{"_index":1547,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["classif",{"_index":1336,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["classifi",{"_index":1334,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["classpath",{"_index":416,"title":{},"name":{},"text":{"3":{}},"component":{}}],["client",{"_index":194,"title":{},"name":{"7":{}},"text":{"3":{},"4":{},"6":{},"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["client\").notbefore(instant.now().minusseconds(5l",{"_index":701,"title":{},"name":{},"text":{"4":{}},"component":{}}],["client_credenti",{"_index":839,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clientauthenticationmethod(clientauthenticationmethod.client_secret_bas",{"_index":623,"title":{},"name":{},"text":{"4":{}},"component":{}}],["clientcredenti",{"_index":830,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clientcredentialsoauth2authorizedclientprovid",{"_index":838,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clienthttprequestexecut",{"_index":863,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clienthttprequestinterceptor",{"_index":845,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clienthttprespons",{"_index":860,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clientid(\"oidc",{"_index":621,"title":{},"name":{},"text":{"4":{}},"component":{}}],["clientid(\"test",{"_index":911,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clientinterceptor",{"_index":897,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clientinterceptor(oauth2authorizedclientmanag",{"_index":913,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clientregistr",{"_index":852,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clientregistration.getclientid",{"_index":888,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clientregistration.getregistrationid()).principal(principal).build",{"_index":868,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clientregistrationrepositori",{"_index":826,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clientregistrationrepository.findbyregistrationid(\"springauth",{"_index":857,"title":{},"name":{},"text":{"6":{}},"component":{}}],["clientsecret(\"{noop}secret",{"_index":622,"title":{},"name":{},"text":{"4":{}},"component":{}}],["clientsettings(clientsettings.builder().requireauthorizationconsent(true).build",{"_index":633,"title":{},"name":{},"text":{"4":{}},"component":{}}],["client’",{"_index":1687,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["close",{"_index":177,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["cloud",{"_index":1616,"title":{"10-7":{},"15-7":{}},"name":{},"text":{"10":{},"15":{}},"component":{}}],["cluster",{"_index":1744,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["cmp1",{"_index":1165,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["cmp2",{"_index":1172,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["cmpage",{"_index":1212,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["cmpname",{"_index":1209,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["cmpname.thencomparing(cmpag",{"_index":1215,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["code",{"_index":94,"title":{"3-12":{},"7-20":{}},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["collect",{"_index":9,"title":{"9-7":{},"14-7":{}},"name":{},"text":{"1":{},"3":{},"6":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["collect(collector",{"_index":1283,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["collect(collectors.join",{"_index":1448,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["collect(collectors.tolist",{"_index":1472,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["collection#parallelstream",{"_index":1476,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["collection#stream",{"_index":1477,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["collectionfactori",{"_index":1321,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["collector",{"_index":1232,"title":{"9-3":{},"14-3":{}},"name":{},"text":{"9":{},"14":{}},"component":{}}],["collectors#groupingby(funct",{"_index":1462,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["column",{"_index":557,"title":{},"name":{},"text":{"3":{}},"component":{}}],["com.opencsv.bean.@csvbindbynam",{"_index":554,"title":{},"name":{},"text":{"3":{}},"component":{}}],["come",{"_index":957,"title":{},"name":{},"text":{"7":{},"10":{},"15":{}},"component":{}}],["commod",{"_index":1796,"title":{},"name":{},"text":{"11":{}},"component":{}}],["common",{"_index":441,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["commun",{"_index":293,"title":{"10-10":{},"15-10":{}},"name":{},"text":{"3":{},"10":{},"11":{},"15":{}},"component":{}}],["compact",{"_index":1639,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["compar",{"_index":1129,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["comparator.comparing(us",{"_index":1210,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["comparator.comparingint(tolength",{"_index":1173,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["comparator.comparingint(us",{"_index":1213,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["comparator.revers",{"_index":1217,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["compare(t",{"_index":1133,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["comparison",{"_index":1130,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["compat",{"_index":1098,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["compil",{"_index":1139,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["complet",{"_index":1260,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["complex",{"_index":1461,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["compliant",{"_index":1753,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["compliment",{"_index":1764,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["compon",{"_index":565,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"15":{}},"component":{}}],["composefooter(totalamount",{"_index":1443,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["composehead",{"_index":1438,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["compromis",{"_index":797,"title":{},"name":{},"text":{"6":{},"11":{}},"component":{}}],["comput",{"_index":1235,"title":{"9-6":{},"14-6":{}},"name":{},"text":{"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["computerentalamount(rent",{"_index":1440,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["computestatementline(rent",{"_index":1442,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["concaten",{"_index":1325,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["concept",{"_index":36,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"10":{},"12":{},"15":{}},"component":{}}],["concret",{"_index":224,"title":{},"name":{},"text":{"3":{},"8":{},"13":{}},"component":{}}],["concurr",{"_index":1125,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["concurrenthashmap",{"_index":1577,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["concurrenthashmap.newkeyset",{"_index":1571,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["condit",{"_index":1592,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["conduct",{"_index":1253,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["confid",{"_index":1782,"title":{},"name":{},"text":{"11":{}},"component":{}}],["configur",{"_index":156,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{}},"component":{}}],["configurer.configure(new",{"_index":900,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["conform",{"_index":1755,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["congest",{"_index":1668,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["conjunct",{"_index":544,"title":{},"name":{},"text":{"3":{}},"component":{}}],["connect",{"_index":284,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["consequ",{"_index":1522,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["consist",{"_index":487,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["constraint",{"_index":571,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["construct",{"_index":1625,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["constructor",{"_index":221,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["consum",{"_index":393,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["contain",{"_index":270,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"11":{},"14":{}},"component":{}}],["content",{"_index":477,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"14":{}},"component":{}}],["context",{"_index":513,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["continu",{"_index":1654,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["control",{"_index":81,"title":{"3-7":{}},"name":{},"text":{"3":{},"10":{},"11":{},"15":{}},"component":{}}],["conveni",{"_index":20,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["convers",{"_index":1054,"title":{},"name":{},"text":{"7":{},"10":{},"15":{}},"component":{}}],["convert",{"_index":369,"title":{"9-5":{},"14-5":{}},"name":{},"text":{"3":{},"7":{},"9":{},"14":{}},"component":{}}],["cooki",{"_index":784,"title":{},"name":{},"text":{"6":{}},"component":{}}],["copi",{"_index":509,"title":{},"name":{},"text":{"3":{},"8":{},"13":{}},"component":{}}],["core",{"_index":1497,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["cornerston",{"_index":1775,"title":{},"name":{},"text":{"11":{}},"component":{}}],["correct",{"_index":187,"title":{},"name":{},"text":{"3":{}},"component":{}}],["correctli",{"_index":1728,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["cost",{"_index":1512,"title":{"10-3":{},"15-3":{}},"name":{},"text":{"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["costli",{"_index":1599,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["count",{"_index":1086,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["count1",{"_index":1371,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["count2",{"_index":1373,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["coupl",{"_index":1636,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["cours",{"_index":14,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["coverag",{"_index":581,"title":{},"name":{},"text":{"3":{}},"component":{}}],["cpu",{"_index":1249,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["creat",{"_index":316,"title":{"8-2":{},"8-3":{},"8-4":{},"9-7":{},"13-2":{},"13-3":{},"13-4":{},"14-7":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["created/upd",{"_index":1027,"title":{},"name":{},"text":{"7":{}},"component":{}}],["createprincip",{"_index":858,"title":{},"name":{},"text":{"6":{}},"component":{}}],["creation",{"_index":1161,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["credenti",{"_index":642,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["criteria",{"_index":1311,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["critic",{"_index":1671,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["cross",{"_index":1681,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["crud",{"_index":1806,"title":{},"name":{},"text":{"11":{}},"component":{}}],["csrf",{"_index":759,"title":{},"name":{},"text":{"6":{}},"component":{}}],["csrf(csrf",{"_index":764,"title":{},"name":{},"text":{"6":{}},"component":{}}],["csrf.ignoringrequestmatchers(\"/api",{"_index":765,"title":{},"name":{},"text":{"6":{}},"component":{}}],["csv",{"_index":553,"title":{},"name":{},"text":{"3":{}},"component":{}}],["cultur",{"_index":1762,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["current",{"_index":1839,"title":{},"name":{},"text":{"11":{}},"component":{}}],["custom",{"_index":260,"title":{"4-4":{},"4-5":{},"5-4":{},"6-4":{},"7-6":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"9":{},"14":{}},"component":{}}],["data",{"_index":111,"title":{"3-23":{},"3-24":{},"9-4":{},"9-6":{},"9-7":{},"9-11":{},"14-4":{},"14-6":{},"14-7":{},"14-11":{}},"name":{},"text":{"3":{},"6":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["data/jpa/reference/repositories/queri",{"_index":492,"title":{},"name":{},"text":{"3":{}},"component":{}}],["databas",{"_index":113,"title":{"3-25":{},"10-11":{},"15-11":{}},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["datastor",{"_index":1737,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["date",{"_index":1122,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["date.getmonth",{"_index":1123,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["day",{"_index":1704,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["dead",{"_index":1731,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["deal",{"_index":800,"title":{},"name":{},"text":{"6":{},"10":{},"11":{},"15":{}},"component":{}}],["dealt",{"_index":1779,"title":{},"name":{},"text":{"11":{}},"component":{}}],["debug",{"_index":59,"title":{"2":{}},"name":{"2":{}},"text":{"1":{}},"component":{}}],["decid",{"_index":1519,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["declar",{"_index":1001,"title":{},"name":{},"text":{"7":{}},"component":{}}],["decod",{"_index":668,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["decompos",{"_index":1628,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["decomposit",{"_index":1642,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["decreas",{"_index":1670,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["dedic",{"_index":1695,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["default",{"_index":427,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{},"15":{}},"component":{}}],["defaulturibuilderfactori",{"_index":1005,"title":{},"name":{},"text":{"7":{}},"component":{}}],["defaulturibuilderfactory(baseuri",{"_index":903,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["defer",{"_index":1725,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["defin",{"_index":319,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"13":{},"15":{}},"component":{}}],["definit",{"_index":1002,"title":{},"name":{},"text":{"7":{},"9":{},"14":{}},"component":{}}],["degre",{"_index":591,"title":{},"name":{},"text":{"3":{}},"component":{}}],["delay",{"_index":1708,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["deleg",{"_index":821,"title":{},"name":{},"text":{"6":{},"11":{}},"component":{}}],["delet",{"_index":283,"title":{"7-12":{},"7-19":{}},"name":{},"text":{"3":{},"7":{}},"component":{}}],["delimit",{"_index":1327,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["deliv",{"_index":1694,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["deliveri",{"_index":1655,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["demand",{"_index":1810,"title":{},"name":{},"text":{"11":{}},"component":{}}],["deni",{"_index":801,"title":{},"name":{},"text":{"6":{}},"component":{}}],["depend",{"_index":78,"title":{"3-6":{},"4-1":{},"5-1":{},"6-1":{}},"name":{},"text":{"3":{},"6":{},"10":{},"15":{}},"component":{}}],["deploy",{"_index":747,"title":{},"name":{},"text":{"6":{},"10":{},"15":{}},"component":{}}],["descend",{"_index":1192,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["describ",{"_index":370,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["descript",{"_index":1266,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["design",{"_index":442,"title":{"10-4":{},"15-4":{}},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["desir",{"_index":389,"title":{},"name":{},"text":{"3":{}},"component":{}}],["destroy",{"_index":273,"title":{},"name":{},"text":{"3":{}},"component":{}}],["destroymethod",{"_index":275,"title":{},"name":{},"text":{"3":{}},"component":{}}],["detach",{"_index":512,"title":{},"name":{},"text":{"3":{}},"component":{}}],["detail",{"_index":199,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["details.html",{"_index":493,"title":{},"name":{},"text":{"3":{}},"component":{}}],["details.html#repositories.speci",{"_index":500,"title":{},"name":{},"text":{"3":{}},"component":{}}],["detect",{"_index":1778,"title":{},"name":{},"text":{"11":{}},"component":{}}],["determin",{"_index":476,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["dev",{"_index":3,"title":{"1":{},"12":{},"3-17":{}},"name":{},"text":{"1":{},"3":{},"12":{}},"component":{}}],["develop",{"_index":297,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["development/test",{"_index":653,"title":{},"name":{},"text":{"4":{}},"component":{}}],["devop",{"_index":1624,"title":{"10-13":{},"15-13":{}},"name":{},"text":{"10":{},"15":{}},"component":{}}],["devtools.properti",{"_index":432,"title":{},"name":{},"text":{"3":{}},"component":{}}],["differ",{"_index":529,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["difficult",{"_index":218,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"15":{}},"component":{}}],["directli",{"_index":1691,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["disabl",{"_index":426,"title":{},"name":{},"text":{"3":{}},"component":{}}],["discourag",{"_index":734,"title":{},"name":{},"text":{"6":{}},"component":{}}],["discover",{"_index":396,"title":{},"name":{},"text":{"3":{}},"component":{}}],["discret",{"_index":1641,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["disk",{"_index":1817,"title":{},"name":{},"text":{"11":{}},"component":{}}],["dispatch",{"_index":455,"title":{},"name":{},"text":{"3":{}},"component":{}}],["display",{"_index":1569,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["distinct",{"_index":386,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["distinct().sorted().foreach(system.out::print",{"_index":1385,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["distribut",{"_index":1622,"title":{"10-12":{},"15-12":{}},"name":{},"text":{"10":{},"15":{}},"component":{}}],["do",{"_index":948,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["document",{"_index":398,"title":{},"name":{},"text":{"3":{},"4":{},"8":{},"10":{},"13":{},"15":{}},"component":{}}],["documentation](https://docs.spring.io/spr",{"_index":115,"title":{"3-26":{}},"name":{},"text":{},"component":{}}],["documentation](https://opencsv.sourceforge.net",{"_index":122,"title":{"3-27":{}},"name":{},"text":{},"component":{}}],["doesn’t",{"_index":1595,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["dog",{"_index":1368,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["domain",{"_index":470,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["done",{"_index":223,"title":{},"name":{},"text":{"3":{}},"component":{}}],["don’t",{"_index":904,"title":{},"name":{},"text":{"6":{},"9":{},"14":{}},"component":{}}],["doubl",{"_index":1309,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["doublestream",{"_index":1308,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["downstream",{"_index":1337,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["dramat",{"_index":1658,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["draw",{"_index":1101,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["driven",{"_index":467,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"15":{}},"component":{}}],["drop",{"_index":1841,"title":{},"name":{},"text":{"11":{}},"component":{}}],["dropwhil",{"_index":1413,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["dropwhile(c",{"_index":1416,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["due",{"_index":757,"title":{},"name":{},"text":{"6":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["duplic",{"_index":1246,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["durabl",{"_index":1741,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["dure",{"_index":652,"title":{},"name":{},"text":{"4":{},"7":{},"9":{},"14":{}},"component":{}}],["dxnlcjphm2jhnmyyos0xmgu0ltq5otctotg4mi0ymjm0odg4m2q5ntq",{"_index":739,"title":{},"name":{},"text":{"6":{}},"component":{}}],["e",{"_index":1358,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["e.g",{"_index":308,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["e.printstacktrac",{"_index":1359,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["e810",{"_index":683,"title":{},"name":{},"text":{"4":{}},"component":{}}],["each",{"_index":687,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["earli",{"_index":1657,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["eas",{"_index":486,"title":{},"name":{},"text":{"3":{}},"component":{}}],["easi",{"_index":466,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["easier",{"_index":1644,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["easili",{"_index":733,"title":{},"name":{},"text":{"6":{}},"component":{}}],["ebytucpmnusd",{"_index":660,"title":{},"name":{},"text":{"4":{}},"component":{}}],["echo",{"_index":339,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["edg",{"_index":1615,"title":{"10-6":{},"15-6":{}},"name":{},"text":{"10":{},"15":{}},"component":{}}],["effect",{"_index":61,"title":{},"name":{},"text":{"1":{},"3":{},"10":{},"11":{},"12":{},"15":{}},"component":{}}],["effici",{"_index":1243,"title":{"9-11":{},"14-11":{}},"name":{},"text":{"9":{},"11":{},"14":{}},"component":{}}],["efgh",{"_index":1347,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["elast",{"_index":1791,"title":{},"name":{},"text":{"11":{}},"component":{}}],["elasticsearch",{"_index":1835,"title":{},"name":{},"text":{"11":{}},"component":{}}],["element",{"_index":968,"title":{},"name":{},"text":{"7":{},"9":{},"14":{}},"component":{}}],["embed",{"_index":422,"title":{},"name":{},"text":{"3":{}},"component":{}}],["embrac",{"_index":1623,"title":{"10-13":{},"15-13":{}},"name":{},"text":{"10":{},"15":{}},"component":{}}],["emit",{"_index":1814,"title":{},"name":{},"text":{"11":{}},"component":{}}],["empti",{"_index":1188,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["enabl",{"_index":1529,"title":{},"name":{},"text":{"9":{},"11":{},"14":{}},"component":{}}],["enclos",{"_index":320,"title":{},"name":{},"text":{"3":{}},"component":{}}],["encod",{"_index":654,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["encount",{"_index":1315,"title":{},"name":{},"text":{"9":{},"11":{},"14":{}},"component":{}}],["encourag",{"_index":1783,"title":{},"name":{},"text":{"11":{}},"component":{}}],["encrypt",{"_index":789,"title":{},"name":{},"text":{"6":{}},"component":{}}],["end",{"_index":1059,"title":{},"name":{},"text":{"7":{},"9":{},"11":{},"14":{}},"component":{}}],["endpoint",{"_index":464,"title":{"4-5":{},"6-3":{},"6-11":{}},"name":{},"text":{"3":{},"4":{},"6":{}},"component":{}}],["enforc",{"_index":1738,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["engin",{"_index":400,"title":{},"name":{},"text":{"3":{}},"component":{}}],["enough",{"_index":754,"title":{},"name":{},"text":{"6":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["enrich",{"_index":837,"title":{},"name":{},"text":{"6":{}},"component":{}}],["enrion",{"_index":607,"title":{},"name":{},"text":{"3":{}},"component":{}}],["ensur",{"_index":1789,"title":{},"name":{},"text":{"11":{}},"component":{}}],["enterpris",{"_index":131,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"15":{}},"component":{}}],["entir",{"_index":981,"title":{},"name":{},"text":{"7":{},"10":{},"15":{}},"component":{}}],["entiti",{"_index":474,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["envelop",{"_index":1637,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["environ",{"_index":595,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["equal",{"_index":1805,"title":{},"name":{},"text":{"11":{}},"component":{}}],["error",{"_index":361,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"15":{}},"component":{}}],["especi",{"_index":1679,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["establish",{"_index":326,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["etag",{"_index":473,"title":{},"name":{},"text":{"3":{}},"component":{}}],["etc",{"_index":1312,"title":{},"name":{},"text":{"9":{},"11":{},"14":{}},"component":{}}],["ev4haxs_hhqp_73b",{"_index":656,"title":{},"name":{},"text":{"4":{}},"component":{}}],["evalu",{"_index":1672,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["even",{"_index":1144,"title":{},"name":{},"text":{"8":{},"10":{},"13":{},"15":{}},"component":{}}],["event",{"_index":1761,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["eventu",{"_index":1746,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["evil",{"_index":214,"title":{},"name":{},"text":{"3":{}},"component":{}}],["exact",{"_index":1684,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["exampl",{"_index":381,"title":{"4-3":{},"5-3":{}},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["except",{"_index":570,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["exchang",{"_index":941,"title":{},"name":{},"text":{"7":{},"9":{},"14":{}},"component":{}}],["execut",{"_index":597,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["execution.execute(request",{"_index":875,"title":{},"name":{},"text":{"6":{}},"component":{}}],["exist",{"_index":1475,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["exp\":1728332666",{"_index":680,"title":{},"name":{},"text":{"4":{}},"component":{}}],["expect",{"_index":1077,"title":{},"name":{},"text":{"7":{}},"component":{}}],["experi",{"_index":410,"title":{},"name":{},"text":{"3":{}},"component":{}}],["explor",{"_index":394,"title":{},"name":{},"text":{"3":{}},"component":{}}],["expos",{"_index":471,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"15":{}},"component":{}}],["express",{"_index":49,"title":{"8":{},"13":{},"8-1":{},"13-1":{}},"name":{"8":{},"13":{}},"text":{"1":{},"7":{},"8":{},"12":{},"13":{}},"component":{}}],["extend",{"_index":977,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["extens",{"_index":178,"title":{},"name":{},"text":{"3":{}},"component":{}}],["extern",{"_index":2,"title":{"1-3":{},"7-7":{},"12-3":{}},"name":{},"text":{"7":{},"11":{}},"component":{}}],["extrem",{"_index":1454,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["eyjrawqioijkndkzyjc0ni03nzhhltq5owqtowu1os00zdvmzwe4zwflywiilcjhbgcioijsuzi1nij9.eyjzdwiioijvawrjlwnsawvudcisimf1zci6im9pzgmty2xpzw50iiwibmjmijoxnzi4mzmymzy2lcjzy29wzsi6wyjtzxnzywdllnjlywqilcjtzxnzywdllndyaxrlil0simlzcyi6imh0dha6ly9sb2nhbghvc3q6ota5mcisimv4cci6mtcyodmzmjy2niwiawf0ijoxnzi4mzmymzy2lcjqdgkioii4n2yxzmvmyy1lodewltq4mgityjuymc03zmfmnti1mddizmiifq.ir34fpfd",{"_index":655,"title":{},"name":{},"text":{"4":{}},"component":{}}],["face",{"_index":1787,"title":{},"name":{},"text":{"11":{}},"component":{}}],["fact",{"_index":1606,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["factor",{"_index":1699,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["factori",{"_index":1464,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["fail",{"_index":842,"title":{},"name":{},"text":{"6":{},"7":{},"10":{},"11":{},"15":{}},"component":{}}],["failur",{"_index":568,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"15":{}},"component":{}}],["fairli",{"_index":531,"title":{},"name":{},"text":{"3":{}},"component":{}}],["fals",{"_index":1191,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["fast",{"_index":1499,"title":{},"name":{},"text":{"9":{},"11":{},"14":{}},"component":{}}],["faster",{"_index":1145,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["featur",{"_index":154,"title":{},"name":{},"text":{"3":{},"9":{},"11":{},"14":{}},"component":{}}],["feedback",{"_index":1724,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["few",{"_index":1660,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["field",{"_index":208,"title":{},"name":{},"text":{"3":{}},"component":{}}],["figur",{"_index":777,"title":{},"name":{},"text":{"6":{}},"component":{}}],["file",{"_index":310,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["files#lines(path",{"_index":1349,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["files.lines(path",{"_index":1355,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["filter",{"_index":1117,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["filter(ag",{"_index":1426,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["filter(lett",{"_index":1383,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["filter(p",{"_index":1467,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["filter(pred",{"_index":1276,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["final",{"_index":43,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"12":{}},"component":{}}],["find",{"_index":614,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["findbyproperti",{"_index":483,"title":{},"name":{},"text":{"3":{}},"component":{}}],["findpath(\"cont",{"_index":967,"title":{},"name":{},"text":{"7":{}},"component":{}}],["fine",{"_index":192,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["finish",{"_index":1061,"title":{},"name":{},"text":{"7":{},"9":{},"14":{}},"component":{}}],["first",{"_index":975,"title":{},"name":{},"text":{"7":{},"9":{},"11":{},"14":{}},"component":{}}],["fit",{"_index":1104,"title":{},"name":{},"text":{"8":{},"10":{},"13":{},"15":{}},"component":{}}],["five",{"_index":1164,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["fix",{"_index":1532,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["flatmap(c",{"_index":1273,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["flatmap(funct",{"_index":1271,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["flexibl",{"_index":973,"title":{},"name":{},"text":{"7":{}},"component":{}}],["flow",{"_index":776,"title":{},"name":{},"text":{"6":{},"10":{},"11":{},"15":{}},"component":{}}],["flyway",{"_index":114,"title":{"3-26":{}},"name":{},"text":{},"component":{}}],["focus",{"_index":1049,"title":{},"name":{},"text":{"7":{},"11":{}},"component":{}}],["folder",{"_index":434,"title":{},"name":{},"text":{"3":{}},"component":{}}],["follow",{"_index":67,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["forbidden",{"_index":756,"title":{},"name":{},"text":{"6":{}},"component":{}}],["foreach",{"_index":1112,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["foreach(index",{"_index":1391,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["foreach(p",{"_index":1470,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["foreach(system.out::println",{"_index":1408,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["foreachremaining(nod",{"_index":969,"title":{},"name":{},"text":{"7":{}},"component":{}}],["forget",{"_index":1449,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["fork",{"_index":1528,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["fork/join",{"_index":1240,"title":{"9-10":{},"14-10":{}},"name":{},"text":{"9":{},"14":{}},"component":{}}],["forkjoinpool",{"_index":1531,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["forkjoinpool(4",{"_index":1582,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["forkjoinpool.shutdown",{"_index":1589,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["forkjoinpool.submit(task",{"_index":1585,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["forkjointask",{"_index":1583,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["form",{"_index":315,"title":{},"name":{},"text":{"3":{}},"component":{}}],["found",{"_index":760,"title":{"7-20":{}},"name":{},"text":{"6":{}},"component":{}}],["four",{"_index":1163,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["fox",{"_index":1365,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["framework",{"_index":54,"title":{"3":{},"3-2":{},"9-10":{},"14-10":{}},"name":{},"text":{"1":{},"3":{},"6":{},"9":{},"14":{}},"component":{}}],["free",{"_index":1543,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["frequent",{"_index":943,"title":{},"name":{},"text":{"7":{}},"component":{}}],["frequentrenterpoint",{"_index":1436,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["friendli",{"_index":1525,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["full",{"_index":351,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["function",{"_index":463,"title":{"8-1":{},"13-1":{}},"name":{},"text":{"3":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["function1",{"_index":1150,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["function1.apply(10",{"_index":1155,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["function2",{"_index":1158,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["function2.applyasint(10",{"_index":1160,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["functionalinterfac",{"_index":1095,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["further",{"_index":1784,"title":{},"name":{},"text":{"11":{}},"component":{}}],["futur",{"_index":350,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["gain",{"_index":32,"title":{"9-9":{},"14-9":{}},"name":{},"text":{"1":{},"7":{},"9":{},"12":{},"14":{}},"component":{}}],["gather",{"_index":13,"title":{},"name":{},"text":{"1":{},"9":{},"12":{},"14":{}},"component":{}}],["gener",{"_index":160,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["get",{"_index":609,"title":{"4-2":{},"5-2":{},"9-9":{},"14-9":{}},"name":{},"text":{"11":{}},"component":{}}],["getauthor",{"_index":876,"title":{},"name":{},"text":{"6":{}},"component":{}}],["getcredenti",{"_index":878,"title":{},"name":{},"text":{"6":{}},"component":{}}],["getdetail",{"_index":880,"title":{},"name":{},"text":{"6":{}},"component":{}}],["getfrequentrenterpoints(rent",{"_index":1441,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["getnam",{"_index":887,"title":{},"name":{},"text":{"6":{}},"component":{}}],["getprincip",{"_index":881,"title":{},"name":{},"text":{"6":{}},"component":{}}],["give",{"_index":971,"title":{},"name":{},"text":{"7":{},"9":{},"14":{}},"component":{}}],["given",{"_index":478,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["global",{"_index":430,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["go",{"_index":1103,"title":{"9-11":{},"14-11":{}},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["goe",{"_index":1610,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["good",{"_index":1534,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["gpv7ji_jhvohg",{"_index":658,"title":{},"name":{},"text":{"4":{}},"component":{}}],["grain",{"_index":193,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["grant",{"_index":641,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["granular",{"_index":1676,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["greater",{"_index":1707,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["green_squar",{"_index":305,"title":{},"name":{},"text":{"3":{}},"component":{}}],["gridlock",{"_index":1618,"title":{"10-9":{},"15-9":{}},"name":{},"text":{"10":{},"15":{}},"component":{}}],["groot",{"_index":1128,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["group",{"_index":1335,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["groupingby(funct",{"_index":1333,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["grow",{"_index":1663,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["guarante",{"_index":1742,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["gui",{"_index":444,"title":{},"name":{},"text":{"3":{}},"component":{}}],["guid",{"_index":21,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["half",{"_index":1598,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["halv",{"_index":1600,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["handi",{"_index":551,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["handl",{"_index":446,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["handler",{"_index":1826,"title":{},"name":{},"text":{"11":{}},"component":{}}],["happen",{"_index":1479,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["har",{"_index":1483,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["hardwar",{"_index":1797,"title":{},"name":{},"text":{"11":{}},"component":{}}],["hash",{"_index":1609,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["hateoa",{"_index":399,"title":{},"name":{},"text":{"3":{}},"component":{}}],["head",{"_index":311,"title":{},"name":{},"text":{"3":{}},"component":{}}],["header",{"_index":404,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"10":{},"15":{}},"component":{}}],["heavi",{"_index":532,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hello",{"_index":1111,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["help",{"_index":27,"title":{},"name":{},"text":{"1":{},"3":{},"11":{},"12":{}},"component":{}}],["here",{"_index":751,"title":{},"name":{},"text":{"6":{},"9":{},"14":{}},"component":{}}],["heterogen",{"_index":1648,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["hibern",{"_index":514,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hidden",{"_index":1313,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["high",{"_index":590,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"15":{}},"component":{}}],["higher",{"_index":202,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["highli",{"_index":128,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hikaricp](https://github.com/brettwooldridge/hikaricp",{"_index":533,"title":{},"name":{},"text":{"3":{}},"component":{}}],["histori",{"_index":548,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hit",{"_index":650,"title":{},"name":{},"text":{"4":{},"9":{},"14":{}},"component":{}}],["hold",{"_index":547,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["home",{"_index":433,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hood",{"_index":960,"title":{},"name":{},"text":{"7":{}},"component":{}}],["html",{"_index":309,"title":{},"name":{},"text":{"3":{}},"component":{}}],["http",{"_index":85,"title":{"3-9":{},"6-2":{},"6-3":{},"6-5":{},"6-6":{},"6-7":{},"6-10":{},"7-3":{},"7-4":{},"7-5":{},"7-6":{},"7-10":{},"7-11":{},"7-12":{},"7-14":{},"7-17":{},"7-18":{},"7-19":{}},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["http/1.1",{"_index":276,"title":{},"name":{},"text":{"3":{}},"component":{}}],["http/2",{"_index":289,"title":{},"name":{},"text":{"3":{}},"component":{}}],["http/3",{"_index":298,"title":{},"name":{},"text":{"3":{}},"component":{}}],["http://localhost/api/v1/resourc",{"_index":761,"title":{},"name":{},"text":{"6":{}},"component":{}}],["http://localhost:8080",{"_index":999,"title":{},"name":{},"text":{"7":{}},"component":{}}],["http://localhost:8080/api/v1/resourc",{"_index":736,"title":{},"name":{},"text":{"6":{}},"component":{}}],["http://localhost:9000/oauth2/token",{"_index":643,"title":{},"name":{},"text":{"4":{}},"component":{}}],["httpbasic(customizer.withdefault",{"_index":763,"title":{},"name":{},"text":{"6":{}},"component":{}}],["httpcompon",{"_index":938,"title":{},"name":{},"text":{"7":{}},"component":{}}],["https://developer.mozilla.org/en",{"_index":353,"title":{},"name":{},"text":{"3":{}},"component":{}}],["httpsecur",{"_index":713,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["httpsecurity.authorizehttprequests(author",{"_index":714,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["httpsecurity.build",{"_index":718,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["httpurlconnect",{"_index":936,"title":{},"name":{},"text":{"7":{}},"component":{}}],["hybrid",{"_index":1697,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["hypermedia",{"_index":392,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hypertext",{"_index":86,"title":{"3-9":{}},"name":{},"text":{},"component":{}}],["i1",{"_index":1151,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["i1*i1",{"_index":1563,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["i2",{"_index":1152,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["i2*i2",{"_index":1564,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["iat\":1728332366",{"_index":681,"title":{},"name":{},"text":{"4":{}},"component":{}}],["id",{"_index":644,"title":{},"name":{},"text":{"4":{},"7":{}},"component":{}}],["id=oidc",{"_index":804,"title":{},"name":{},"text":{"6":{}},"component":{}}],["idea",{"_index":418,"title":{},"name":{},"text":{"3":{}},"component":{}}],["ideal",{"_index":580,"title":{},"name":{},"text":{"3":{}},"component":{}}],["idempot",{"_index":345,"title":{},"name":{},"text":{"3":{}},"component":{}}],["ident",{"_index":347,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"14":{}},"component":{}}],["identifi",{"_index":330,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"15":{}},"component":{}}],["id’",{"_index":783,"title":{},"name":{},"text":{"6":{}},"component":{}}],["ignor",{"_index":762,"title":{},"name":{},"text":{"6":{},"7":{},"10":{},"15":{}},"component":{}}],["illegalargumentexcept",{"_index":886,"title":{},"name":{},"text":{"6":{}},"component":{}}],["illegalstateexception(\"miss",{"_index":872,"title":{},"name":{},"text":{"6":{}},"component":{}}],["immedi",{"_index":429,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["immut",{"_index":1807,"title":{},"name":{},"text":{"11":{}},"component":{}}],["impact",{"_index":1490,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["impati",{"_index":1722,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["implement",{"_index":391,"title":{"8-1":{},"9-1":{},"9-10":{},"13-1":{},"14-1":{},"14-10":{}},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["impli",{"_index":1514,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["implicit",{"_index":521,"title":{},"name":{},"text":{"3":{}},"component":{}}],["import",{"_index":201,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{}},"component":{}}],["import(resttemplatebuilderconfig.class",{"_index":1029,"title":{},"name":{},"text":{"7":{}},"component":{}}],["import(securityconfig.class",{"_index":710,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["impos",{"_index":1131,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["improv",{"_index":290,"title":{},"name":{},"text":{"3":{},"8":{},"11":{},"13":{}},"component":{}}],["inbound/transl",{"_index":1690,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["includ",{"_index":510,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"14":{}},"component":{}}],["incom",{"_index":849,"title":{},"name":{},"text":{"6":{}},"component":{}}],["increas",{"_index":1602,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["independ",{"_index":1701,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["index",{"_index":6,"title":{},"name":{"1":{},"3":{},"12":{}},"text":{},"component":{}}],["indic",{"_index":1000,"title":{},"name":{},"text":{"7":{}},"component":{}}],["individu",{"_index":1662,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["inform",{"_index":313,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"14":{}},"component":{}}],["infrastructur",{"_index":1693,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["init",{"_index":261,"title":{},"name":{},"text":{"3":{}},"component":{}}],["initi",{"_index":250,"title":{},"name":{},"text":{"3":{}},"component":{}}],["initialization.html#howto.data",{"_index":118,"title":{"3-26":{}},"name":{},"text":{},"component":{}}],["initialization.migr",{"_index":119,"title":{"3-26":{}},"name":{},"text":{},"component":{}}],["initializr",{"_index":73,"title":{"3-3":{}},"name":{},"text":{},"component":{}}],["initmethod",{"_index":262,"title":{},"name":{},"text":{"3":{}},"component":{}}],["inject",{"_index":79,"title":{"3-6":{}},"name":{},"text":{"3":{},"7":{}},"component":{}}],["inlin",{"_index":1263,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["inmemoryclientregistrationrepository(clientregistration.withregistrationid(\"springauth",{"_index":910,"title":{},"name":{},"text":{"6":{}},"component":{}}],["inmemoryregisteredclientrepositori",{"_index":616,"title":{},"name":{},"text":{"4":{}},"component":{}}],["inmemoryregisteredclientrepository(oidccli",{"_index":634,"title":{},"name":{},"text":{"4":{}},"component":{}}],["input",{"_index":558,"title":{},"name":{},"text":{"3":{},"9":{},"11":{},"14":{}},"component":{}}],["insight",{"_index":33,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["instanc",{"_index":183,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["instant.max",{"_index":920,"title":{},"name":{},"text":{"6":{}},"component":{}}],["instant.min",{"_index":919,"title":{},"name":{},"text":{"6":{}},"component":{}}],["instanti",{"_index":234,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["instead",{"_index":302,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["instruct",{"_index":1141,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["int",{"_index":987,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["intbinaryoper",{"_index":1157,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["integ",{"_index":1340,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["integer.compare(s1.length",{"_index":1166,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["integr",{"_index":584,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["intellij",{"_index":417,"title":{},"name":{},"text":{"3":{}},"component":{}}],["intend",{"_index":26,"title":{},"name":{},"text":{"1":{},"11":{},"12":{}},"component":{}}],["interact",{"_index":205,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"15":{}},"component":{}}],["intercept(httprequest",{"_index":861,"title":{},"name":{},"text":{"6":{}},"component":{}}],["interfac",{"_index":46,"title":{"8-1":{},"8-3":{},"13-1":{},"13-3":{}},"name":{},"text":{"1":{},"3":{},"8":{},"9":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["intermedi",{"_index":342,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["intermitt",{"_index":1261,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["intern",{"_index":1629,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["internet",{"_index":408,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"15":{}},"component":{}}],["interoper",{"_index":1649,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["interrupt",{"_index":1812,"title":{},"name":{},"text":{"11":{}},"component":{}}],["introduc",{"_index":137,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["introduct",{"_index":925,"title":{"7-2":{}},"name":{},"text":{"8":{},"13":{}},"component":{}}],["intstream",{"_index":1269,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["intstream#averag",{"_index":1459,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["intstream#max",{"_index":1458,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["intstream#min",{"_index":1457,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["intstream.range(0",{"_index":1387,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["intsummarystatist",{"_index":1304,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["invalid",{"_index":758,"title":{},"name":{},"text":{"6":{}},"component":{}}],["invalid_gr",{"_index":843,"title":{},"name":{},"text":{"6":{}},"component":{}}],["invers",{"_index":80,"title":{"3-7":{}},"name":{},"text":{"3":{}},"component":{}}],["invert",{"_index":229,"title":{},"name":{},"text":{"3":{}},"component":{}}],["invoc",{"_index":484,"title":{},"name":{},"text":{"3":{}},"component":{}}],["invok",{"_index":447,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"11":{},"14":{}},"component":{}}],["invokedynam",{"_index":1142,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["ioc",{"_index":82,"title":{"3-7":{}},"name":{},"text":{},"component":{}}],["ioexcept",{"_index":864,"title":{},"name":{},"text":{"6":{},"9":{},"14":{}},"component":{}}],["is(3",{"_index":706,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["isauthent",{"_index":883,"title":{},"name":{},"text":{"6":{}},"component":{}}],["isempti",{"_index":1183,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["isnul",{"_index":1182,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["isnull(authorizedcli",{"_index":871,"title":{},"name":{},"text":{"6":{}},"component":{}}],["isnull.negate().and(isempty.neg",{"_index":1185,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["isn’t",{"_index":1680,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["isol",{"_index":1739,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["iss\":\"http://localhost:9000",{"_index":679,"title":{},"name":{},"text":{"4":{}},"component":{}}],["issu",{"_index":775,"title":{},"name":{},"text":{"6":{},"10":{},"11":{},"15":{}},"component":{}}],["item",{"_index":1838,"title":{},"name":{},"text":{"11":{}},"component":{}}],["iter",{"_index":498,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["itself",{"_index":1087,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["it’",{"_index":1096,"title":{},"name":{},"text":{"8":{},"10":{},"13":{},"15":{}},"component":{}}],["j",{"_index":1491,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["j2ee",{"_index":143,"title":{},"name":{},"text":{"3":{}},"component":{}}],["ja",{"_index":667,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jackson",{"_index":961,"title":{},"name":{},"text":{"7":{}},"component":{}}],["jakarta",{"_index":123,"title":{"3-28":{}},"name":{},"text":{"3":{}},"component":{}}],["jame",{"_index":1197,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["jar",{"_index":158,"title":{},"name":{},"text":{"3":{}},"component":{}}],["java",{"_index":38,"title":{"7-6":{}},"name":{},"text":{"1":{},"3":{},"7":{},"8":{},"9":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["java.io.fil",{"_index":561,"title":{},"name":{},"text":{"3":{}},"component":{}}],["java.lang.class.getsuperclass",{"_index":1421,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["java.lang.nullpointerexcept",{"_index":1420,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["java.lang.object",{"_index":1412,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["java.util.abstractcollect",{"_index":1411,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["java.util.abstractlist",{"_index":1410,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["java.util.arraylist",{"_index":1409,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["java.util.concurrent.forkjoinpool.common.parallel",{"_index":1535,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["java.util.funct",{"_index":1105,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["jdk",{"_index":935,"title":{"8-2":{},"9-1":{},"13-2":{},"14-1":{}},"name":{},"text":{"7":{}},"component":{}}],["jit",{"_index":1455,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["jmh",{"_index":1481,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["john1",{"_index":1203,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["john2",{"_index":1206,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["johnson",{"_index":139,"title":{},"name":{},"text":{"3":{}},"component":{}}],["join",{"_index":1324,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["joining(charsequ",{"_index":1328,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["journey",{"_index":25,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["jpa",{"_index":112,"title":{"3-24":{}},"name":{},"text":{"3":{}},"component":{}}],["jr7rilhmc",{"_index":659,"title":{},"name":{},"text":{"4":{}},"component":{}}],["json",{"_index":365,"title":{"7-3":{}},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["jsoncreator(mod",{"_index":983,"title":{},"name":{},"text":{"7":{}},"component":{}}],["jsoncreator.mode.properti",{"_index":984,"title":{},"name":{},"text":{"7":{}},"component":{}}],["jsonignoreproperties(ignoreunknown",{"_index":982,"title":{},"name":{},"text":{"7":{}},"component":{}}],["jsonnod",{"_index":927,"title":{"7-5":{}},"name":{},"text":{"7":{}},"component":{}}],["jsonnode.class",{"_index":965,"title":{},"name":{},"text":{"7":{}},"component":{}}],["jsonpath](json",{"_index":172,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jsonprocessingexcept",{"_index":916,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["jsonproperty(\"numb",{"_index":986,"title":{},"name":{},"text":{"7":{}},"component":{}}],["jsonproperty(\"s",{"_index":988,"title":{},"name":{},"text":{"7":{}},"component":{}}],["jsonproperty(\"totalel",{"_index":990,"title":{},"name":{},"text":{"7":{}},"component":{}}],["jsonrespons",{"_index":964,"title":{},"name":{},"text":{"7":{}},"component":{}}],["jsonresponse.getbodi",{"_index":966,"title":{},"name":{},"text":{"7":{}},"component":{}}],["jti\":\"87f1fefc",{"_index":682,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jump",{"_index":1366,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["junit",{"_index":592,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jvm",{"_index":497,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["jwt",{"_index":635,"title":{"6-8":{}},"name":{},"text":{"4":{},"5":{},"6":{}},"component":{}}],["jwt.claims(claim",{"_index":696,"title":{},"name":{},"text":{"4":{}},"component":{}}],["k",{"_index":1493,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["kafka",{"_index":1836,"title":{},"name":{},"text":{"11":{}},"component":{}}],["keep",{"_index":287,"title":{},"name":{},"text":{"3":{}},"component":{}}],["key",{"_index":34,"title":{},"name":{},"text":{"1":{},"6":{},"9":{},"10":{},"11":{},"12":{},"14":{},"15":{}},"component":{}}],["kid\":\"d493b746",{"_index":669,"title":{},"name":{},"text":{"4":{}},"component":{}}],["kind",{"_index":379,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["know",{"_index":1596,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["known",{"_index":792,"title":{},"name":{},"text":{"6":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["l",{"_index":1492,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["l1",{"_index":1498,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["l2",{"_index":1500,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["l3",{"_index":1503,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["lambda",{"_index":48,"title":{"8":{},"13":{},"8-1":{},"8-2":{},"8-3":{},"8-4":{},"13-1":{},"13-2":{},"13-3":{},"13-4":{}},"name":{"8":{},"13":{}},"text":{"1":{},"8":{},"12":{},"13":{}},"component":{}}],["languag",{"_index":1094,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["larg",{"_index":385,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["latenc",{"_index":294,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["layer",{"_index":1614,"title":{"10-5":{},"15-5":{}},"name":{},"text":{"10":{},"15":{}},"component":{}}],["lazi",{"_index":1367,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["lead",{"_index":1801,"title":{},"name":{},"text":{"11":{}},"component":{}}],["leak",{"_index":407,"title":{},"name":{},"text":{"3":{}},"component":{}}],["learn",{"_index":17,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["legend",{"_index":0,"title":{"1-1":{},"12-1":{}},"name":{},"text":{"3":{}},"component":{}}],["less",{"_index":942,"title":{},"name":{},"text":{"7":{},"10":{},"11":{},"15":{}},"component":{}}],["letter",{"_index":1732,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["letter.equ",{"_index":1384,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["level",{"_index":65,"title":{"2-1":{}},"name":{},"text":{"2":{},"3":{},"9":{},"14":{}},"component":{}}],["leverag",{"_index":819,"title":{},"name":{},"text":{"6":{},"10":{},"15":{}},"component":{}}],["librari",{"_index":148,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["lifecycl",{"_index":84,"title":{"3-8":{}},"name":{},"text":{},"component":{}}],["limit",{"_index":494,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["limit(10",{"_index":1390,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["limiting](https://docs.spring.io/spr",{"_index":499,"title":{},"name":{},"text":{"3":{}},"component":{}}],["line",{"_index":1351,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["lines.count",{"_index":1356,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["link",{"_index":401,"title":{},"name":{},"text":{"3":{},"9":{},"11":{},"14":{}},"component":{}}],["linkedlist",{"_index":1513,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["liskov",{"_index":180,"title":{},"name":{},"text":{"3":{}},"component":{}}],["list",{"_index":352,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["list.of",{"_index":877,"title":{},"name":{},"text":{"6":{}},"component":{}}],["listresourc",{"_index":945,"title":{},"name":{},"text":{"7":{}},"component":{}}],["lists/sets/map",{"_index":1237,"title":{"9-7":{},"14-7":{}},"name":{},"text":{"9":{},"14":{}},"component":{}}],["littl",{"_index":411,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["live",{"_index":1504,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["livereload",{"_index":423,"title":{},"name":{},"text":{"3":{}},"component":{}}],["load",{"_index":538,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["locat",{"_index":403,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["lock",{"_index":518,"title":{},"name":{},"text":{"3":{}},"component":{}}],["log",{"_index":64,"title":{"2-1":{},"10-12":{},"15-12":{}},"name":{},"text":{"2":{},"10":{},"15":{}},"component":{}}],["logging.level.org.springframework.security=trac",{"_index":69,"title":{},"name":{},"text":{"2":{}},"component":{}}],["logic",{"_index":449,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["lombok.md",{"_index":167,"title":{},"name":{},"text":{"3":{}},"component":{}}],["lombok](project",{"_index":166,"title":{},"name":{},"text":{"3":{}},"component":{}}],["long",{"_index":991,"title":{},"name":{},"text":{"7":{},"9":{},"14":{}},"component":{}}],["long::sum",{"_index":1581,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["longstream",{"_index":1306,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["look",{"_index":29,"title":{},"name":{},"text":{"1":{},"4":{},"12":{}},"component":{}}],["loop",{"_index":1233,"title":{"9-5":{},"14-5":{}},"name":{},"text":{"9":{},"14":{}},"component":{}}],["loos",{"_index":1635,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["lot",{"_index":972,"title":{},"name":{},"text":{"7":{},"9":{},"14":{}},"component":{}}],["lower",{"_index":203,"title":{},"name":{},"text":{"3":{}},"component":{}}],["machin",{"_index":435,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["main",{"_index":1419,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["maintain",{"_index":1007,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mainten",{"_index":457,"title":{},"name":{},"text":{"3":{}},"component":{}}],["make",{"_index":191,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["manag",{"_index":231,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["mandatori",{"_index":222,"title":{},"name":{},"text":{"3":{},"8":{},"13":{}},"component":{}}],["mani",{"_index":1088,"title":{},"name":{},"text":{"8":{},"10":{},"13":{},"15":{}},"component":{}}],["manifesto",{"_index":1770,"title":{"11-1":{}},"name":{},"text":{"11":{}},"component":{}}],["manner",{"_index":1726,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["manual",{"_index":1734,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["map",{"_index":955,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["map(funct",{"_index":1267,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["map(this::computestatementlin",{"_index":1447,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["map.class",{"_index":959,"title":{},"name":{},"text":{"7":{}},"component":{}}],["map/filt",{"_index":1257,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["map/filter/reduc",{"_index":1230,"title":{"9-1":{},"14-1":{}},"name":{},"text":{"9":{},"14":{}},"component":{}}],["map<k,v",{"_index":926,"title":{"7-4":{}},"name":{},"text":{},"component":{}}],["mapper",{"_index":1268,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["maprespons",{"_index":958,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mapstruct](mapstruct.md",{"_index":168,"title":{},"name":{},"text":{"3":{}},"component":{}}],["maptodouble(this::computerentalamount",{"_index":1445,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["maptoint(person::getag",{"_index":1425,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["maptoint(this::getfrequentrenterpoint",{"_index":1446,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["maptoint(tointfunct",{"_index":1270,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["maptoobj(codepoint",{"_index":1381,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["march",{"_index":144,"title":{},"name":{},"text":{"3":{}},"component":{}}],["mari",{"_index":1200,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["mark",{"_index":37,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["marshal",{"_index":98,"title":{"3-14":{}},"name":{},"text":{"3":{}},"component":{}}],["match",{"_index":574,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["math.max(i1",{"_index":1153,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["matur",{"_index":102,"title":{"3-15":{}},"name":{},"text":{},"component":{}}],["maven",{"_index":608,"title":{"4-1":{},"5-1":{},"6-1":{}},"name":{},"text":{"6":{}},"component":{}}],["max",{"_index":1300,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["max(compar",{"_index":1289,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["max1",{"_index":1154,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["max2",{"_index":1159,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["maximum",{"_index":1290,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["maxsiz",{"_index":1558,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["mean",{"_index":451,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["measur",{"_index":1433,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["mediatype.application_json",{"_index":1046,"title":{},"name":{},"text":{"7":{}},"component":{}}],["meet",{"_index":1591,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["memori",{"_index":31,"title":{"9-4":{},"14-4":{}},"name":{},"text":{"1":{},"3":{},"9":{},"12":{},"14":{}},"component":{}}],["menu",{"_index":421,"title":{},"name":{},"text":{"3":{}},"component":{}}],["merg",{"_index":508,"title":{},"name":{},"text":{"3":{}},"component":{}}],["messag",{"_index":587,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"11":{},"15":{}},"component":{}}],["message.read",{"_index":648,"title":{},"name":{},"text":{"4":{}},"component":{}}],["message.writ",{"_index":649,"title":{},"name":{},"text":{"4":{}},"component":{}}],["meta",{"_index":312,"title":{},"name":{},"text":{"3":{}},"component":{}}],["method",{"_index":91,"title":{"3-11":{}},"name":{},"text":{"3":{},"7":{},"8":{},"9":{},"11":{},"13":{},"14":{}},"component":{}}],["methods](https://docs.spring.io/spr",{"_index":491,"title":{},"name":{},"text":{"3":{}},"component":{}}],["microbenchmark",{"_index":1482,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["microservic",{"_index":51,"title":{"10":{},"15":{},"10-1":{},"10-2":{},"10-3":{},"15-1":{},"15-2":{},"15-3":{}},"name":{"10":{},"15":{}},"text":{"1":{},"3":{},"10":{},"12":{},"15":{}},"component":{}}],["migrat",{"_index":540,"title":{},"name":{},"text":{"3":{}},"component":{}}],["million",{"_index":1551,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["min",{"_index":1299,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["min(compar",{"_index":1287,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["minimum",{"_index":1288,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["miss",{"_index":1516,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["mitig",{"_index":1767,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["mobil",{"_index":1689,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["mock",{"_index":594,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["mockbean",{"_index":906,"title":{},"name":{},"text":{"6":{}},"component":{}}],["mockito](mock",{"_index":170,"title":{},"name":{},"text":{"3":{}},"component":{}}],["mockmvc",{"_index":606,"title":{},"name":{},"text":{"3":{},"4":{},"6":{}},"component":{}}],["mockmvc.perform(get(\"/api/v1/resourc",{"_index":694,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["mockmvcbuilders.webappcontextsetup(wac",{"_index":708,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["mockrestserviceserv",{"_index":1032,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mockrestserviceserver#verifi",{"_index":1078,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mockrestserviceserver.bindto(resttemplate).build",{"_index":1038,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mockresttemplatebuild",{"_index":1034,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mockserv",{"_index":1033,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mockserver.expect(method(httpmethod.delet",{"_index":1075,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mockserver.expect(method(httpmethod.get",{"_index":1043,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mockserver.expect(method(httpmethod.post",{"_index":1071,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mockserver.expect(method(httpmethod.put",{"_index":1073,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mockserver.verifi",{"_index":1083,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mockserverresttemplatecustom",{"_index":1036,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mode",{"_index":458,"title":{},"name":{},"text":{"3":{}},"component":{}}],["model",{"_index":103,"title":{"3-15":{},"10-10":{},"10-11":{},"15-10":{},"15-11":{}},"name":{},"text":{"3":{},"7":{},"8":{},"10":{},"13":{},"15":{}},"component":{}}],["modif",{"_index":179,"title":{},"name":{},"text":{"3":{}},"component":{}}],["modifi",{"_index":846,"title":{},"name":{},"text":{"6":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["money",{"_index":1659,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["mongodb",{"_index":1756,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["monitor",{"_index":1733,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["monolith",{"_index":135,"title":{"10-1":{},"15-1":{}},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["more",{"_index":278,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["mostli",{"_index":1809,"title":{},"name":{},"text":{"11":{}},"component":{}}],["move",{"_index":541,"title":{"10-3":{},"15-3":{}},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["much",{"_index":1495,"title":{},"name":{},"text":{"9":{},"11":{},"14":{}},"component":{}}],["multipl",{"_index":346,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["mutabl",{"_index":1284,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["mvc",{"_index":107,"title":{"3-18":{}},"name":{},"text":{"3":{}},"component":{}}],["mvc.md",{"_index":171,"title":{},"name":{},"text":{"3":{}},"component":{}}],["mycollect",{"_index":1323,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["myself",{"_index":22,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["n",{"_index":746,"title":{},"name":{},"text":{"6":{},"9":{},"14":{}},"component":{}}],["name",{"_index":431,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"13":{}},"component":{}}],["name\").build().touri",{"_index":1065,"title":{},"name":{},"text":{"7":{}},"component":{}}],["names.txt",{"_index":1353,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["nanosecond",{"_index":1434,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["nativ",{"_index":1617,"title":{"10-7":{},"15-7":{}},"name":{},"text":{"10":{},"15":{}},"component":{}}],["natur",{"_index":1286,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["nbf\":1728332366",{"_index":678,"title":{},"name":{},"text":{"4":{}},"component":{}}],["necessari",{"_index":1790,"title":{},"name":{},"text":{"11":{}},"component":{}}],["necessarili",{"_index":1090,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["need",{"_index":206,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["netti",{"_index":465,"title":{},"name":{},"text":{"3":{}},"component":{}}],["network",{"_index":535,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"15":{}},"component":{}}],["never",{"_index":1430,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["new",{"_index":317,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["newresourcedto",{"_index":1018,"title":{},"name":{},"text":{"7":{}},"component":{}}],["next",{"_index":815,"title":{},"name":{},"text":{"6":{},"7":{},"9":{},"14":{}},"component":{}}],["nightmar",{"_index":1653,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["nleeptadhlcpkhzl0nvumcfiqo7lpxu7zhzm0qav",{"_index":664,"title":{},"name":{},"text":{"4":{}},"component":{}}],["node",{"_index":1515,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["non",{"_index":438,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["none",{"_index":1254,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["nosql",{"_index":1754,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["note",{"_index":10,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["notic",{"_index":196,"title":{},"name":{},"text":{"3":{}},"component":{}}],["notifi",{"_index":1819,"title":{},"name":{},"text":{"11":{}},"component":{}}],["notnullandnotempti",{"_index":1184,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["notnullandnotempty.test",{"_index":1189,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["notnullandnotempty.test(\"hello",{"_index":1190,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["notnullandnotempty.test(nul",{"_index":1187,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["np0aah26echct",{"_index":662,"title":{},"name":{},"text":{"4":{}},"component":{}}],["null",{"_index":879,"title":{},"name":{},"text":{"6":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["number",{"_index":787,"title":{},"name":{},"text":{"6":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["numer",{"_index":550,"title":{},"name":{},"text":{"3":{}},"component":{}}],["o1",{"_index":1134,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["o2",{"_index":1135,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["oauth",{"_index":639,"title":{"6-8":{},"6-10":{},"6-11":{},"6-12":{}},"name":{},"text":{"4":{},"5":{},"6":{}},"component":{}}],["oauth2",{"_index":612,"title":{},"name":{},"text":{"4":{},"5":{},"6":{}},"component":{}}],["oauth2.jwt(customizer.withdefault",{"_index":717,"title":{},"name":{},"text":{"5":{}},"component":{}}],["oauth2accesstoken",{"_index":917,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth2accesstoken(oauth2accesstoken.tokentype.bear",{"_index":918,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth2authorizedcli",{"_index":817,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth2authorizedclient(clientregistr",{"_index":922,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth2authorizedclientmanag",{"_index":816,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth2authorizedclientmanager#authorize(oauth2authorizerequest",{"_index":924,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth2authorizedclientprovid",{"_index":820,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth2authorizedclientproviderbuilder.build",{"_index":829,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth2authorizedclientrepositori",{"_index":823,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth2authorizedclientservic",{"_index":822,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth2authorizerequest",{"_index":865,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth2authorizerequest.withclientregistrationid",{"_index":867,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth2resourceserver(oauth2",{"_index":716,"title":{},"name":{},"text":{"5":{}},"component":{}}],["oauthclientinterceptor",{"_index":850,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauthclientinterceptor(authorizedclientmanag",{"_index":914,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauthclientinterceptor(oauth2authorizedclientmanag",{"_index":854,"title":{},"name":{},"text":{"6":{}},"component":{}}],["object",{"_index":76,"title":{"3-5":{},"7-6":{}},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["object#equals(object",{"_index":1285,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["objectmapp",{"_index":1031,"title":{},"name":{},"text":{"7":{}},"component":{}}],["objectmapper.writevalueasstring(getpag",{"_index":1042,"title":{},"name":{},"text":{"7":{}},"component":{}}],["obtain",{"_index":798,"title":{},"name":{},"text":{"6":{}},"component":{}}],["occur",{"_index":542,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["offer",{"_index":939,"title":{},"name":{},"text":{"7":{}},"component":{}}],["offici",{"_index":613,"title":{},"name":{},"text":{"4":{}},"component":{}}],["oidc",{"_index":645,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["oidcclient",{"_index":619,"title":{},"name":{},"text":{"4":{}},"component":{}}],["old",{"_index":377,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["on",{"_index":153,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["onc",{"_index":795,"title":{},"name":{},"text":{"6":{},"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["oncomplet",{"_index":1843,"title":{},"name":{},"text":{"11":{}},"component":{}}],["onerror",{"_index":1842,"title":{},"name":{},"text":{"11":{}},"component":{}}],["onnext",{"_index":1840,"title":{},"name":{},"text":{"11":{}},"component":{}}],["open",{"_index":176,"title":{},"name":{},"text":{"3":{}},"component":{}}],["opencsv",{"_index":121,"title":{"3-27":{}},"name":{},"text":{"3":{}},"component":{}}],["oper",{"_index":504,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["optim",{"_index":1452,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["option",{"_index":220,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["optionaldoubl",{"_index":1301,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["optionalint",{"_index":1298,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["orange_squar",{"_index":307,"title":{},"name":{},"text":{"3":{}},"component":{}}],["order",{"_index":1132,"title":{},"name":{},"text":{"8":{},"9":{},"11":{},"13":{},"14":{}},"component":{}}],["org.springframework.beans.factory.beanfactoryawar",{"_index":244,"title":{},"name":{},"text":{"3":{}},"component":{}}],["org.springframework.beans.factory.beannameawar",{"_index":241,"title":{},"name":{},"text":{"3":{}},"component":{}}],["org.springframework.beans.factory.config.beanpostprocessor",{"_index":252,"title":{},"name":{},"text":{"3":{}},"component":{}}],["org.springframework.beans.factory.disposablebean",{"_index":274,"title":{},"name":{},"text":{"3":{}},"component":{}}],["org.springframework.beans.factory.initializingbean",{"_index":258,"title":{},"name":{},"text":{"3":{}},"component":{}}],["org.springframework.boot",{"_index":611,"title":{},"name":{},"text":{"4":{},"5":{},"6":{}},"component":{}}],["org.springframework.boot:spr",{"_index":576,"title":{},"name":{},"text":{"3":{}},"component":{}}],["org.springframework.context.annotation.bean",{"_index":263,"title":{},"name":{},"text":{"3":{}},"component":{}}],["org.springframework.context.applicationcontextawar",{"_index":247,"title":{},"name":{},"text":{"3":{}},"component":{}}],["org.springframework.secur",{"_index":728,"title":{},"name":{},"text":{"6":{}},"component":{}}],["org.springframework.util.resourceutils.getfile(\"classpath:csvdata/data.csv",{"_index":559,"title":{},"name":{},"text":{"3":{}},"component":{}}],["organ",{"_index":1106,"title":{},"name":{},"text":{"8":{},"10":{},"13":{},"15":{}},"component":{}}],["orient",{"_index":77,"title":{"3-5":{}},"name":{},"text":{"8":{},"10":{},"13":{},"15":{}},"component":{}}],["origin",{"_index":329,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["other",{"_index":23,"title":{},"name":{},"text":{"1":{},"7":{},"12":{}},"component":{}}],["otherwis",{"_index":1480,"title":{},"name":{},"text":{"9":{},"11":{},"14":{}},"component":{}}],["other’",{"_index":1765,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["out",{"_index":1518,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["outbound",{"_index":1686,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["outgo",{"_index":847,"title":{},"name":{},"text":{"6":{}},"component":{}}],["outsid",{"_index":527,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["over",{"_index":230,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["overal",{"_index":586,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"15":{}},"component":{}}],["overhead",{"_index":1802,"title":{},"name":{},"text":{"11":{}},"component":{}}],["overrid",{"_index":859,"title":{},"name":{},"text":{"6":{}},"component":{}}],["overview",{"_index":70,"title":{"3-1":{},"6-9":{}},"name":{},"text":{},"component":{}}],["owner",{"_index":772,"title":{},"name":{},"text":{"6":{}},"component":{}}],["p.getcity().equals(\"new",{"_index":1468,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["pace",{"_index":1808,"title":{},"name":{},"text":{"11":{}},"component":{}}],["packag",{"_index":66,"title":{},"name":{},"text":{"2":{},"8":{},"13":{}},"component":{}}],["page",{"_index":454,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["pageabl",{"_index":928,"title":{"7-6":{}},"name":{},"text":{"7":{}},"component":{}}],["pageablerespons",{"_index":997,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pageimpl",{"_index":978,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pagerequest.of(pag",{"_index":994,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pair",{"_index":793,"title":{},"name":{},"text":{"6":{}},"component":{}}],["paradigm",{"_index":1803,"title":{},"name":{},"text":{"11":{}},"component":{}}],["parallel",{"_index":1238,"title":{"9-8":{},"9-9":{},"9-10":{},"9-11":{},"14-8":{},"14-9":{},"14-10":{},"14-11":{}},"name":{},"text":{"9":{},"14":{}},"component":{}}],["paramet",{"_index":501,"title":{"7-8":{},"7-9":{},"7-15":{},"7-16":{}},"name":{},"text":{"3":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["parent",{"_index":1541,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["pars",{"_index":552,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["part",{"_index":545,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["parti",{"_index":768,"title":{},"name":{},"text":{"6":{},"10":{},"15":{}},"component":{}}],["partial",{"_index":323,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["partit",{"_index":1295,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["pass",{"_index":456,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["passiv",{"_index":1685,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["password",{"_index":727,"title":{"6-4":{}},"name":{},"text":{"6":{}},"component":{}}],["past",{"_index":1100,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["patch",{"_index":282,"title":{},"name":{},"text":{"3":{}},"component":{}}],["path",{"_index":1350,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["path.md",{"_index":173,"title":{},"name":{},"text":{"3":{}},"component":{}}],["path.of(\"src/main/resources/first",{"_index":1352,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["pattern",{"_index":443,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["pattern#splitasstream(charsequ",{"_index":1362,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["pattern.compil",{"_index":1374,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["pay",{"_index":1613,"title":{"10-3":{},"15-3":{}},"name":{},"text":{},"component":{}}],["payload",{"_index":675,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"10":{},"15":{}},"component":{}}],["pc",{"_index":1688,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["peek(i",{"_index":1573,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["peopl",{"_index":1093,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["people.stream",{"_index":1424,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["peoplefromnewyork",{"_index":1466,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["peoplefromnewyork.add(p",{"_index":1471,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["perfect",{"_index":1763,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["perform",{"_index":563,"title":{"9-9":{},"14-9":{}},"name":{},"text":{"3":{},"7":{},"8":{},"9":{},"11":{},"13":{},"14":{}},"component":{}}],["persist",{"_index":485,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["person",{"_index":8,"title":{},"name":{},"text":{"1":{},"9":{},"12":{},"14":{}},"component":{}}],["person.getag",{"_index":1422,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["physic",{"_index":1496,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["piec",{"_index":1553,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["pipelin",{"_index":1256,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["place",{"_index":1511,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["plain",{"_index":376,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["plan",{"_index":459,"title":{},"name":{},"text":{"3":{}},"component":{}}],["platform",{"_index":1798,"title":{},"name":{},"text":{"11":{}},"component":{}}],["play",{"_index":1837,"title":{},"name":{},"text":{"11":{}},"component":{}}],["pleasant",{"_index":412,"title":{},"name":{},"text":{"3":{}},"component":{}}],["point",{"_index":1747,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["pointer",{"_index":1509,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["pojo",{"_index":450,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["pool",{"_index":534,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["popul",{"_index":236,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["popular",{"_index":126,"title":{},"name":{},"text":{"3":{}},"component":{}}],["port",{"_index":610,"title":{"4-4":{}},"name":{},"text":{"4":{}},"component":{}}],["posit",{"_index":980,"title":{},"name":{},"text":{"7":{}},"component":{}}],["possibl",{"_index":1552,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["post",{"_index":265,"title":{"6-7":{},"7-10":{},"7-17":{}},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["postconstruct",{"_index":254,"title":{},"name":{},"text":{"3":{}},"component":{}}],["postman",{"_index":637,"title":{},"name":{},"text":{"4":{}},"component":{}}],["postprocessafteriniti",{"_index":266,"title":{},"name":{},"text":{"3":{}},"component":{}}],["postprocessbeforeiniti",{"_index":251,"title":{},"name":{},"text":{"3":{}},"component":{}}],["pox",{"_index":375,"title":{},"name":{},"text":{"3":{}},"component":{}}],["practic",{"_index":105,"title":{"3-16":{}},"name":{},"text":{"3":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["pre",{"_index":249,"title":{},"name":{},"text":{"3":{}},"component":{}}],["preciou",{"_index":1611,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["predestroy",{"_index":272,"title":{},"name":{},"text":{"3":{}},"component":{}}],["predic",{"_index":1116,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["prefer",{"_index":211,"title":{},"name":{},"text":{"3":{}},"component":{}}],["prefix",{"_index":1331,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["present",{"_index":835,"title":{},"name":{},"text":{"6":{},"10":{},"15":{}},"component":{}}],["pressur",{"_index":1820,"title":{},"name":{},"text":{"11":{}},"component":{}}],["prevent",{"_index":786,"title":{},"name":{},"text":{"6":{},"9":{},"14":{}},"component":{}}],["previou",{"_index":889,"title":{},"name":{},"text":{"6":{}},"component":{}}],["previous",{"_index":844,"title":{},"name":{},"text":{"6":{}},"component":{}}],["primari",{"_index":564,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["primit",{"_index":1148,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["princip",{"_index":853,"title":{},"name":{},"text":{"6":{}},"component":{}}],["principl",{"_index":75,"title":{"3-5":{}},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["print",{"_index":950,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["prior",{"_index":543,"title":{},"name":{},"text":{"3":{}},"component":{}}],["privat",{"_index":213,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["problem",{"_index":1603,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["process",{"_index":368,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["processor",{"_index":1848,"title":{},"name":{},"text":{"11":{}},"component":{}}],["produc",{"_index":1245,"title":{},"name":{},"text":{"9":{},"11":{},"14":{}},"component":{}}],["product",{"_index":546,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["product/1234",{"_index":387,"title":{},"name":{},"text":{"3":{}},"component":{}}],["product/5678",{"_index":388,"title":{},"name":{},"text":{"3":{}},"component":{}}],["profile/resourc",{"_index":480,"title":{},"name":{},"text":{"3":{}},"component":{}}],["program",{"_index":35,"title":{"11":{},"3-5":{},"11-2":{}},"name":{"11":{}},"text":{"1":{},"3":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["project",{"_index":161,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"11":{},"14":{}},"component":{}}],["propag",{"_index":503,"title":{},"name":{},"text":{"3":{}},"component":{}}],["proper",{"_index":1484,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["properti",{"_index":68,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"14":{}},"component":{}}],["properties/depend",{"_index":237,"title":{},"name":{},"text":{"3":{}},"component":{}}],["properties](properties.md",{"_index":165,"title":{},"name":{},"text":{"3":{}},"component":{}}],["protocol",{"_index":88,"title":{"3-9":{}},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["provid",{"_index":395,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["proxi",{"_index":334,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["public",{"_index":212,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{},"15":{}},"component":{}}],["publish",{"_index":1771,"title":{},"name":{},"text":{"11":{}},"component":{}}],["pure",{"_index":1651,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["purpos",{"_index":1051,"title":{},"name":{},"text":{"7":{}},"component":{}}],["put",{"_index":281,"title":{"7-11":{},"7-18":{}},"name":{},"text":{"3":{},"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["qualiti",{"_index":371,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["queri",{"_index":490,"title":{"7-8":{},"7-15":{}},"name":{},"text":{"3":{},"7":{}},"component":{}}],["queue",{"_index":1538,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["quic",{"_index":299,"title":{},"name":{},"text":{"3":{}},"component":{}}],["quick",{"_index":11,"title":{},"name":{},"text":{"1":{},"9":{},"12":{},"14":{}},"component":{}}],["quickli",{"_index":159,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["quit",{"_index":1546,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["r",{"_index":1120,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["rabbit",{"_index":1830,"title":{},"name":{},"text":{"11":{}},"component":{}}],["random",{"_index":1506,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["rapid",{"_index":1780,"title":{},"name":{},"text":{"11":{}},"component":{}}],["rate",{"_index":1795,"title":{},"name":{},"text":{"11":{}},"component":{}}],["ratpack",{"_index":1829,"title":{},"name":{},"text":{"11":{}},"component":{}}],["re",{"_index":818,"title":{},"name":{},"text":{"6":{}},"component":{}}],["reach",{"_index":1593,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["react",{"_index":1794,"title":{},"name":{},"text":{"11":{}},"component":{}}],["reactiv",{"_index":52,"title":{"11":{},"11-1":{},"11-2":{},"11-3":{}},"name":{"11":{}},"text":{"1":{},"3":{},"11":{}},"component":{}}],["reactivemanifesto.org",{"_index":1773,"title":{},"name":{},"text":{"11":{}},"component":{}}],["reactor",{"_index":461,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["read",{"_index":698,"title":{},"name":{},"text":{"4":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["readabl",{"_index":1432,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["readi",{"_index":268,"title":{},"name":{},"text":{"3":{}},"component":{}}],["real",{"_index":1727,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["realiti",{"_index":1749,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["reason",{"_index":1730,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["reattach",{"_index":519,"title":{},"name":{},"text":{"3":{}},"component":{}}],["receiv",{"_index":340,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["recipi",{"_index":1800,"title":{},"name":{},"text":{"11":{}},"component":{}}],["recommend",{"_index":460,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["recompil",{"_index":419,"title":{},"name":{},"text":{"3":{}},"component":{}}],["record",{"_index":495,"title":{},"name":{},"text":{"3":{}},"component":{}}],["recov",{"_index":1729,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["recoveri",{"_index":1788,"title":{},"name":{},"text":{"11":{}},"component":{}}],["rectangl",{"_index":189,"title":{},"name":{},"text":{"3":{}},"component":{}}],["redi",{"_index":1758,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["redirect",{"_index":359,"title":{},"name":{},"text":{"3":{}},"component":{}}],["redirecturi(\"http://127.0.0.1:8080/author",{"_index":628,"title":{},"name":{},"text":{"4":{}},"component":{}}],["redirecturi(\"http://127.0.0.1:8080/login/oauth2/code/oidc",{"_index":627,"title":{},"name":{},"text":{"4":{}},"component":{}}],["reduc",{"_index":1234,"title":{"9-6":{},"14-6":{}},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["reduce(binaryoper",{"_index":1277,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["reduce(t",{"_index":1281,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["reduct",{"_index":1279,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["refer",{"_index":12,"title":{},"name":{},"text":{"1":{},"9":{},"12":{},"14":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}}}],["reflect",{"_index":24,"title":{},"name":{},"text":{"1":{},"3":{},"10":{},"12":{},"15":{}},"component":{}}],["refresh",{"_index":30,"title":{},"name":{},"text":{"1":{},"3":{},"12":{}},"component":{}}],["regex",{"_index":1361,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["registeredcli",{"_index":618,"title":{},"name":{},"text":{"4":{}},"component":{}}],["registeredclient.withid(uuid.randomuuid().tostr",{"_index":620,"title":{},"name":{},"text":{"4":{}},"component":{}}],["registeredclientrepositori",{"_index":617,"title":{},"name":{},"text":{"4":{}},"component":{}}],["registr",{"_index":836,"title":{},"name":{},"text":{"6":{}},"component":{}}],["registrationid",{"_index":834,"title":{},"name":{},"text":{"6":{}},"component":{}}],["regular",{"_index":1473,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["relat",{"_index":1053,"title":{},"name":{},"text":{"7":{},"10":{},"11":{},"15":{}},"component":{}}],["relationship",{"_index":197,"title":{},"name":{},"text":{"3":{}},"component":{}}],["releas",{"_index":147,"title":{},"name":{},"text":{"3":{}},"component":{}}],["reli",{"_index":1721,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["reliabl",{"_index":130,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["remain",{"_index":1414,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["remov",{"_index":511,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["render",{"_index":453,"title":{},"name":{},"text":{"3":{}},"component":{}}],["rental",{"_index":1439,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["rentals.stream",{"_index":1444,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["replac",{"_index":182,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["replic",{"_index":516,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"15":{}},"component":{}}],["repositori",{"_index":18,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"12":{}},"component":{}}],["repres",{"_index":892,"title":{},"name":{},"text":{"6":{}},"component":{}}],["represent",{"_index":96,"title":{"3-13":{}},"name":{},"text":{"3":{}},"component":{}}],["reproduc",{"_index":549,"title":{},"name":{},"text":{"3":{}},"component":{}}],["request",{"_index":90,"title":{"3-11":{},"6-12":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"11":{},"14":{}},"component":{}}],["request.getheaders().add(httpheaders.author",{"_index":873,"title":{},"name":{},"text":{"6":{}},"component":{}}],["requir",{"_index":719,"title":{},"name":{},"text":{"5":{},"6":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["resili",{"_index":1785,"title":{},"name":{},"text":{"11":{}},"component":{}}],["resiz",{"_index":1296,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["resolv",{"_index":560,"title":{},"name":{},"text":{"3":{}},"component":{}}],["resourc",{"_index":1,"title":{"5":{},"1-2":{},"1-3":{},"12-2":{},"12-3":{}},"name":{"5":{}},"text":{"1":{},"3":{},"5":{},"6":{},"7":{},"9":{},"11":{},"12":{},"14":{}},"component":{}}],["resourcecli",{"_index":1037,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resourceclient.deleteresource(resourcedto.getid",{"_index":1082,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resourceclient.listresourc",{"_index":1047,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resourceclientimpl",{"_index":1060,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resourceclientimpl(mockresttemplatebuild",{"_index":1040,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resourceclientmocktest",{"_index":1030,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resourcedto",{"_index":1014,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resourcedto.class",{"_index":1016,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resourcedto.getid",{"_index":1022,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resourcedtopageimpl",{"_index":976,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resourcedtopageimpl(@jsonproperty(\"cont",{"_index":985,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resourcedtopageimpl(list",{"_index":995,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resourcedtopageimpl.class",{"_index":998,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resources/search/findbyproperty?property=test",{"_index":481,"title":{},"name":{},"text":{"3":{}},"component":{}}],["respect",{"_index":1244,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["respond",{"_index":1063,"title":{},"name":{},"text":{"7":{},"11":{}},"component":{}}],["respons",{"_index":92,"title":{"3-12":{},"7-3":{},"7-4":{},"7-5":{},"7-6":{},"7-20":{}},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["responseent",{"_index":949,"title":{},"name":{},"text":{"7":{}},"component":{}}],["rest",{"_index":95,"title":{"3-13":{},"3-16":{},"3-23":{},"6-3":{},"6-11":{}},"name":{},"text":{"3":{},"6":{},"10":{},"15":{}},"component":{}}],["rest.template.baseuri=http://localhost:8080",{"_index":1008,"title":{},"name":{},"text":{"7":{}},"component":{}}],["restart",{"_index":414,"title":{},"name":{},"text":{"3":{}},"component":{}}],["restclient.build",{"_index":1050,"title":{},"name":{},"text":{"7":{}},"component":{}}],["restclienttest",{"_index":905,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["resttempl",{"_index":108,"title":{"3-19":{},"6-5":{},"7-1":{},"7-13":{}},"name":{},"text":{"3":{},"7":{}},"component":{}}],["resttemplate#put(str",{"_index":1024,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplate.delete(\"/api/v1/resource/{resourceid",{"_index":1028,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplate.getforentity(\"/api/v1/resourc",{"_index":1009,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplate.getforentity(\"http://localhost:8080/api/v1/resourc",{"_index":952,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplate.getforentity(uricomponentsbuilder.touristr",{"_index":1013,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplate.getforobject(\"/api/v1/resource/{resourceid",{"_index":1015,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplate.getforobject(uri.getpath",{"_index":1019,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplate.postforentity(\"/api/v1/resourc",{"_index":1020,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplate.postforlocation(\"/api/v1/resourc",{"_index":1017,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplate.put(\"/api/v1/resource/{resourceid",{"_index":1021,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplatebuild",{"_index":893,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["resttemplatebuilder#basicauthentication(str",{"_index":750,"title":{},"name":{},"text":{"6":{}},"component":{}}],["resttemplatebuilder#build",{"_index":1058,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplatebuilder(new",{"_index":1035,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplatebuilder(resttemplatebuilderconfigur",{"_index":896,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["resttemplatebuilder.build",{"_index":946,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resttemplatebuilderconfig",{"_index":824,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["resttemplatebuilderconfigur",{"_index":1004,"title":{},"name":{},"text":{"7":{}},"component":{}}],["result",{"_index":482,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["retriev",{"_index":947,"title":{},"name":{},"text":{"7":{}},"component":{}}],["return",{"_index":336,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["reus",{"_index":286,"title":{},"name":{},"text":{"3":{}},"component":{}}],["revers",{"_index":1216,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["richardson",{"_index":101,"title":{"3-15":{}},"name":{},"text":{},"component":{}}],["rid",{"_index":1453,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["right",{"_index":1242,"title":{"9-11":{},"14-11":{}},"name":{},"text":{},"component":{}}],["risk",{"_index":1667,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["rmm",{"_index":100,"title":{"3-15":{}},"name":{},"text":{"3":{}},"component":{}}],["rod",{"_index":138,"title":{},"name":{},"text":{"3":{}},"component":{}}],["role",{"_index":771,"title":{},"name":{},"text":{"6":{}},"component":{}}],["roll",{"_index":525,"title":{},"name":{},"text":{"3":{}},"component":{}}],["rpc",{"_index":382,"title":{},"name":{},"text":{"3":{}},"component":{}}],["rule",{"_index":1740,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["run",{"_index":530,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["runnabl",{"_index":1099,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["runtim",{"_index":227,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["rxjava",{"_index":1831,"title":{},"name":{},"text":{"11":{}},"component":{}}],["s",{"_index":1114,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["s.isempti",{"_index":1119,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["s.length",{"_index":1171,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["s1",{"_index":1136,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["s1.compareto(s2",{"_index":1138,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["s2",{"_index":1137,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["s2.length",{"_index":1167,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["sacrific",{"_index":1431,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["safe",{"_index":343,"title":{},"name":{},"text":{"3":{}},"component":{}}],["same",{"_index":204,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["sarah",{"_index":1194,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["save",{"_index":505,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"15":{}},"component":{}}],["save_upd",{"_index":515,"title":{},"name":{},"text":{"3":{}},"component":{}}],["scalabl",{"_index":129,"title":{"10-8":{},"15-8":{}},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["scale",{"_index":1702,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["scenario",{"_index":940,"title":{},"name":{},"text":{"7":{}},"component":{}}],["scope",{"_index":647,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["scope(\"message.read",{"_index":631,"title":{},"name":{},"text":{"4":{}},"component":{}}],["scope(\"message.writ",{"_index":632,"title":{},"name":{},"text":{"4":{}},"component":{}}],["scope(oidcscopes.openid",{"_index":629,"title":{},"name":{},"text":{"4":{}},"component":{}}],["scope(oidcscopes.profil",{"_index":630,"title":{},"name":{},"text":{"4":{}},"component":{}}],["search",{"_index":1718,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["second",{"_index":517,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["secret",{"_index":646,"title":{},"name":{},"text":{"4":{}},"component":{}}],["secret=secret",{"_index":805,"title":{},"name":{},"text":{"6":{}},"component":{}}],["section",{"_index":579,"title":{},"name":{},"text":{"3":{}},"component":{}}],["secur",{"_index":56,"title":{"6":{}},"name":{"6":{}},"text":{"1":{},"3":{},"4":{},"6":{}},"component":{}}],["securityconfig",{"_index":615,"title":{},"name":{},"text":{"4":{},"5":{},"6":{}},"component":{}}],["securityfilterchain",{"_index":711,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["securityfilterchain(httpsecur",{"_index":712,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["see",{"_index":341,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["seem",{"_index":1723,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["seen",{"_index":428,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["segment",{"_index":603,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["segreg",{"_index":190,"title":{},"name":{},"text":{"3":{}},"component":{}}],["select",{"_index":1386,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["self",{"_index":397,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["send",{"_index":735,"title":{},"name":{},"text":{"6":{}},"component":{}}],["sens",{"_index":1825,"title":{},"name":{},"text":{"11":{}},"component":{}}],["sensibl",{"_index":729,"title":{},"name":{},"text":{"6":{}},"component":{}}],["sent",{"_index":731,"title":{},"name":{},"text":{"6":{},"7":{},"9":{},"14":{}},"component":{}}],["sentenc",{"_index":1363,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["sentence.char",{"_index":1380,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["sentence.split",{"_index":1370,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["separ",{"_index":1329,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["sequenc",{"_index":1264,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["sequenti",{"_index":1265,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["serv",{"_index":19,"title":{},"name":{},"text":{"1":{},"9":{},"12":{},"14":{}},"component":{}}],["server",{"_index":58,"title":{"4":{},"5":{},"4-4":{},"4-5":{},"5-4":{}},"name":{"4":{},"5":{}},"text":{"1":{},"3":{},"4":{},"5":{},"6":{}},"component":{}}],["server.port=9000",{"_index":690,"title":{},"name":{},"text":{"4":{}},"component":{}}],["servic",{"_index":372,"title":{"10-4":{},"10-6":{},"15-4":{},"15-6":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"15":{}},"component":{}}],["servlet",{"_index":437,"title":{},"name":{},"text":{"3":{}},"component":{}}],["session",{"_index":782,"title":{},"name":{},"text":{"6":{}},"component":{}}],["set",{"_index":215,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["setapplicationcontext",{"_index":246,"title":{},"name":{},"text":{"3":{}},"component":{}}],["setauthenticated(boolean",{"_index":885,"title":{},"name":{},"text":{"6":{}},"component":{}}],["setbeanfactori",{"_index":243,"title":{},"name":{},"text":{"3":{}},"component":{}}],["setbeannam",{"_index":240,"title":{},"name":{},"text":{"3":{}},"component":{}}],["setter",{"_index":219,"title":{},"name":{},"text":{"3":{}},"component":{}}],["setup",{"_index":721,"title":{},"name":{},"text":{"5":{},"6":{},"7":{}},"component":{}}],["sever",{"_index":1508,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["share",{"_index":790,"title":{},"name":{},"text":{"6":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["sheet",{"_index":5,"title":{"1":{},"12":{},"3-4":{}},"name":{},"text":{"1":{},"12":{}},"component":{}}],["shield",{"_index":1683,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["shold",{"_index":200,"title":{},"name":{},"text":{"3":{}},"component":{}}],["shutdown",{"_index":271,"title":{},"name":{},"text":{"3":{}},"component":{}}],["side",{"_index":363,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sign",{"_index":785,"title":{},"name":{},"text":{"6":{}},"component":{}}],["signatur",{"_index":779,"title":{},"name":{},"text":{"6":{}},"component":{}}],["signific",{"_index":296,"title":{},"name":{},"text":{"3":{}},"component":{}}],["significantli",{"_index":537,"title":{},"name":{},"text":{"3":{}},"component":{}}],["similar",{"_index":1307,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["similarli",{"_index":1494,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["simpl",{"_index":931,"title":{},"name":{},"text":{"7":{}},"component":{}}],["simpler",{"_index":141,"title":{},"name":{},"text":{"3":{}},"component":{}}],["simpli",{"_index":753,"title":{},"name":{},"text":{"6":{},"10":{},"15":{}},"component":{}}],["simplifi",{"_index":1781,"title":{},"name":{},"text":{"11":{}},"component":{}}],["simul",{"_index":596,"title":{},"name":{},"text":{"3":{}},"component":{}}],["singl",{"_index":174,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"15":{}},"component":{}}],["situat",{"_index":1619,"title":{"10-9":{},"15-9":{}},"name":{},"text":{},"component":{}}],["size",{"_index":989,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["sizeabl",{"_index":1604,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["skip",{"_index":1393,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["skip(10",{"_index":1389,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["slick",{"_index":1832,"title":{},"name":{},"text":{"11":{}},"component":{}}],["slightli",{"_index":304,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["slow",{"_index":217,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["slower",{"_index":1502,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["small",{"_index":175,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["smaller",{"_index":1643,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["soa",{"_index":1612,"title":{"10-1":{},"15-1":{}},"name":{},"text":{"10":{},"15":{}},"component":{}}],["soap",{"_index":383,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["soft",{"_index":1745,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["softwar",{"_index":1631,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["sole",{"_index":1696,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["solid",{"_index":74,"title":{"3-5":{}},"name":{},"text":{},"component":{}}],["solv",{"_index":1646,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["sometim",{"_index":1092,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["sort",{"_index":496,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["sourc",{"_index":489,"title":{"9-11":{},"14-11":{}},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["special",{"_index":1084,"title":{"8-3":{},"13-3":{}},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["specif",{"_index":195,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"13":{},"15":{}},"component":{}}],["specifi",{"_index":325,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"14":{}},"component":{}}],["speed",{"_index":292,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sphere",{"_index":1769,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["splice",{"_index":600,"title":{},"name":{},"text":{"3":{}},"component":{}}],["split",{"_index":1526,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["splitasstream(sentence).count",{"_index":1375,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["spot",{"_index":1550,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["spread",{"_index":1607,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["spring",{"_index":53,"title":{"3":{},"4":{},"5":{},"6":{},"7":{},"3-2":{},"3-3":{},"3-8":{},"3-17":{},"3-18":{},"3-19":{},"3-20":{},"3-21":{},"3-22":{},"3-23":{},"3-24":{}},"name":{"4":{},"5":{},"6":{},"7":{}},"text":{"1":{},"3":{},"4":{},"5":{},"6":{},"7":{},"11":{}},"component":{}}],["spring.security.oauth2.client.provider.springauth.author",{"_index":811,"title":{},"name":{},"text":{"6":{}},"component":{}}],["spring.security.oauth2.client.provider.springauth.token",{"_index":813,"title":{},"name":{},"text":{"6":{}},"component":{}}],["spring.security.oauth2.client.registration.springauth.author",{"_index":808,"title":{},"name":{},"text":{"6":{}},"component":{}}],["spring.security.oauth2.client.registration.springauth.cli",{"_index":803,"title":{},"name":{},"text":{"6":{}},"component":{}}],["spring.security.oauth2.client.registration.springauth.provider=springauth",{"_index":810,"title":{},"name":{},"text":{"6":{}},"component":{}}],["spring.security.oauth2.client.registration.springauth.scope[0]=message.read",{"_index":806,"title":{},"name":{},"text":{"6":{}},"component":{}}],["spring.security.oauth2.client.registration.springauth.scope[1]=message.writ",{"_index":807,"title":{},"name":{},"text":{"6":{}},"component":{}}],["spring.security.oauth2.resourceserver.jwt.issu",{"_index":722,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["spring.security.user.name=mi",{"_index":748,"title":{},"name":{},"text":{"6":{}},"component":{}}],["spring.security.user.password=mi",{"_index":749,"title":{},"name":{},"text":{"6":{}},"component":{}}],["springauth",{"_index":891,"title":{},"name":{},"text":{"6":{}},"component":{}}],["springboottest",{"_index":707,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["sql",{"_index":1451,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["squar",{"_index":188,"title":{},"name":{},"text":{"3":{}},"component":{}}],["ssl/tl",{"_index":335,"title":{},"name":{},"text":{"3":{}},"component":{}}],["stack",{"_index":405,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["stand",{"_index":439,"title":{},"name":{},"text":{"3":{}},"component":{}}],["standalon",{"_index":1627,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["standard",{"_index":562,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["start",{"_index":232,"title":{"4-2":{},"5-2":{}},"name":{},"text":{"3":{},"11":{}},"component":{}}],["start.spring.io](https://start.spring.io",{"_index":162,"title":{},"name":{},"text":{"3":{}},"component":{}}],["starter",{"_index":577,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{}},"component":{}}],["state",{"_index":97,"title":{"3-13":{}},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["stateless",{"_index":780,"title":{},"name":{},"text":{"6":{}},"component":{}}],["statement",{"_index":1437,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["static",{"_index":908,"title":{},"name":{},"text":{"6":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["statist",{"_index":1236,"title":{"9-6":{},"14-6":{}},"name":{},"text":{"9":{},"14":{}},"component":{}}],["statu",{"_index":93,"title":{"3-12":{},"7-20":{}},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["stay",{"_index":1786,"title":{},"name":{},"text":{"11":{}},"component":{}}],["steal",{"_index":1544,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["step",{"_index":890,"title":{},"name":{},"text":{"6":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["still",{"_index":1521,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["stop",{"_index":1816,"title":{},"name":{},"text":{"11":{}},"component":{}}],["store",{"_index":349,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"14":{}},"component":{}}],["strategi",{"_index":280,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"15":{}},"component":{}}],["stream",{"_index":50,"title":{"9":{},"14":{},"9-2":{},"9-4":{},"9-5":{},"9-7":{},"9-8":{},"11-3":{},"14-2":{},"14-4":{},"14-5":{},"14-7":{},"14-8":{}},"name":{"9":{},"14":{}},"text":{"1":{},"8":{},"9":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["stream#collect(collector",{"_index":1463,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["stream#findani",{"_index":1556,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["stream#findfirst",{"_index":1555,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["stream#limit(long",{"_index":1557,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["stream#of(t",{"_index":1343,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["stream#reduc",{"_index":1559,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["stream#reduce(binaryoper",{"_index":1460,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["stream#reduce(t",{"_index":1456,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["stream.>iterate(arraylist.class",{"_index":1404,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["stream.of(\"abcd",{"_index":1346,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["stream.parallel",{"_index":1572,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["stream.reduce(0",{"_index":1562,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["stream<t",{"_index":1239,"title":{"9-9":{},"9-10":{},"14-9":{},"14-10":{}},"name":{},"text":{},"component":{}}],["streamofstr",{"_index":1345,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["strength",{"_index":1766,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["string",{"_index":740,"title":{"7-3":{}},"name":{},"text":{"6":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["string#char",{"_index":1377,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["string.class",{"_index":953,"title":{},"name":{},"text":{"7":{}},"component":{}}],["stringrespons",{"_index":951,"title":{},"name":{},"text":{"7":{}},"component":{}}],["strings.sort(cmp1",{"_index":1168,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["strings.sort(cmp2",{"_index":1174,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["stringutils.hastext(baseuri",{"_index":899,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["strong",{"_index":1719,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["structur",{"_index":1248,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["stub",{"_index":1057,"title":{},"name":{},"text":{"7":{}},"component":{}}],["sub\":\"oidc",{"_index":676,"title":{},"name":{},"text":{"4":{}},"component":{}}],["subject(\"oidc",{"_index":700,"title":{},"name":{},"text":{"4":{}},"component":{}}],["sublist",{"_index":979,"title":{},"name":{},"text":{"7":{}},"component":{}}],["submit",{"_index":1584,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["submit.get",{"_index":1586,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["subscrib",{"_index":1822,"title":{},"name":{},"text":{"11":{}},"component":{}}],["subscript",{"_index":1844,"title":{},"name":{},"text":{"11":{}},"component":{}}],["subsequ",{"_index":1711,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["subsiz",{"_index":1605,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["substitut",{"_index":181,"title":{},"name":{},"text":{"3":{}},"component":{}}],["subtask",{"_index":1527,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["subtyp",{"_index":184,"title":{},"name":{},"text":{"3":{}},"component":{}}],["succe",{"_index":841,"title":{},"name":{},"text":{"6":{},"10":{},"15":{}},"component":{}}],["success",{"_index":357,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"15":{}},"component":{}}],["successfulli",{"_index":1062,"title":{},"name":{},"text":{"7":{}},"component":{}}],["such",{"_index":934,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["suffer",{"_index":1717,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["suffici",{"_index":593,"title":{},"name":{},"text":{"3":{}},"component":{}}],["suffix",{"_index":1332,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["suit",{"_index":134,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sum",{"_index":1303,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["summar",{"_index":1310,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["summari",{"_index":62,"title":{},"name":{},"text":{"1":{},"9":{},"12":{},"14":{}},"component":{}}],["summarystatist",{"_index":1305,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["summingint(city::getpopul",{"_index":1341,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["summingint(tointfunct",{"_index":1339,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["super(cont",{"_index":993,"title":{},"name":{},"text":{"7":{}},"component":{}}],["supplier",{"_index":1108,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["support",{"_index":337,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"7":{},"9":{},"14":{}},"component":{}}],["suppos",{"_index":1536,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["sure",{"_index":1076,"title":{},"name":{},"text":{"7":{},"9":{},"14":{}},"component":{}}],["suspend",{"_index":1520,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["swamp",{"_index":374,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sweet",{"_index":1549,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["symbol",{"_index":41,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["symmetr",{"_index":788,"title":{},"name":{},"text":{"6":{}},"component":{}}],["synchron",{"_index":930,"title":{"10-10":{},"15-10":{}},"name":{},"text":{"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["system",{"_index":539,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["system.out.print(index",{"_index":1392,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["system.out.println(",{"_index":1115,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["system.out.println(\"c1",{"_index":1176,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["system.out.println(\"c2",{"_index":1178,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["system.out.println(\"for",{"_index":1186,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["system.out.println(\"i",{"_index":1127,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["system.out.println(nam",{"_index":1588,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["system.out.println(node.get(\"name\").astext",{"_index":970,"title":{},"name":{},"text":{"7":{}},"component":{}}],["system.out.println(stringresponse.getbodi",{"_index":954,"title":{},"name":{},"text":{"7":{}},"component":{}}],["system.out.println(us",{"_index":1220,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["t",{"_index":1110,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["tab",{"_index":638,"title":{},"name":{},"text":{"4":{}},"component":{}}],["tag",{"_index":475,"title":{},"name":{},"text":{"3":{}},"component":{}}],["take",{"_index":536,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["taken",{"_index":1255,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["takewhil",{"_index":1402,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["takewhile(c",{"_index":1407,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["talk",{"_index":1774,"title":{},"name":{},"text":{"11":{}},"component":{}}],["target",{"_index":318,"title":{},"name":{},"text":{"3":{}},"component":{}}],["task",{"_index":1124,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["tax",{"_index":1661,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["tcp",{"_index":303,"title":{},"name":{},"text":{"3":{}},"component":{}}],["tcp/ip",{"_index":327,"title":{},"name":{},"text":{"3":{}},"component":{}}],["techniqu",{"_index":60,"title":{"2":{}},"name":{},"text":{"1":{},"3":{},"6":{}},"component":{}}],["tell",{"_index":996,"title":{},"name":{},"text":{"7":{},"9":{},"14":{}},"component":{}}],["templat",{"_index":932,"title":{},"name":{},"text":{"7":{},"9":{},"14":{}},"component":{}}],["tend",{"_index":1666,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["termin",{"_index":269,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["test",{"_index":125,"title":{"3-29":{},"4-6":{},"6-6":{},"6-7":{},"6-12":{},"7-13":{}},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"8":{},"13":{}},"component":{}}],["test(t",{"_index":1118,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["testconfig",{"_index":909,"title":{},"name":{},"text":{"6":{}},"component":{}}],["testconfigur",{"_index":907,"title":{},"name":{},"text":{"6":{}},"component":{}}],["testdeletenotfound",{"_index":1079,"title":{},"name":{},"text":{"7":{}},"component":{}}],["testlistresourc",{"_index":1041,"title":{},"name":{},"text":{"7":{}},"component":{}}],["text",{"_index":1348,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["thank",{"_index":1055,"title":{},"name":{},"text":{"7":{},"8":{},"13":{}},"component":{}}],["thing",{"_index":1429,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["think",{"_index":150,"title":{},"name":{},"text":{"3":{}},"component":{}}],["third",{"_index":767,"title":{},"name":{},"text":{"6":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["this.authorizedclientmanag",{"_index":855,"title":{},"name":{},"text":{"6":{}},"component":{}}],["this.clientregistr",{"_index":856,"title":{},"name":{},"text":{"6":{}},"component":{}}],["those",{"_index":1003,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["though",{"_index":1748,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["thread",{"_index":1418,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["threadmap",{"_index":1576,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["threadmap.foreach((nam",{"_index":1587,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["threadmap.merge(thread.currentthread().getnam",{"_index":1579,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["threadnam",{"_index":1570,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["threadnames.add(thread.currentthread().getnam",{"_index":1574,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["threadnames.foreach(system.out::println",{"_index":1575,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["three",{"_index":778,"title":{},"name":{},"text":{"6":{},"8":{},"13":{}},"component":{}}],["throttl",{"_index":1823,"title":{},"name":{},"text":{"11":{}},"component":{}}],["through",{"_index":333,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["throughout",{"_index":1720,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["throughput",{"_index":295,"title":{},"name":{},"text":{"3":{}},"component":{}}],["throw",{"_index":569,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{}},"component":{}}],["thrown",{"_index":1824,"title":{},"name":{},"text":{"11":{}},"component":{}}],["thu",{"_index":1542,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["thymeleaf](thymeleaf.md",{"_index":169,"title":{},"name":{},"text":{"3":{}},"component":{}}],["ti",{"_index":452,"title":{},"name":{},"text":{"3":{}},"component":{}}],["time",{"_index":1251,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["timeout",{"_index":1714,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["to/data",{"_index":117,"title":{"3-26":{}},"name":{},"text":{},"component":{}}],["toarray",{"_index":1291,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["toarray(intfunct",{"_index":1293,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["toarray(string[]::new",{"_index":1297,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["tocollection(mycollection::new",{"_index":1322,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["tocollection(suppli",{"_index":1320,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["togeth",{"_index":923,"title":{},"name":{},"text":{"6":{}},"component":{}}],["tointfunct",{"_index":1169,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["token",{"_index":636,"title":{},"name":{},"text":{"4":{},"6":{},"10":{},"15":{}},"component":{}}],["tokenuri(\"test",{"_index":912,"title":{},"name":{},"text":{"6":{}},"component":{}}],["tolength",{"_index":1170,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["tolist",{"_index":1314,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["tomcat",{"_index":598,"title":{},"name":{},"text":{"3":{}},"component":{}}],["tool",{"_index":106,"title":{"3-17":{}},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["tool.flyway",{"_index":120,"title":{"3-26":{}},"name":{},"text":{},"component":{}}],["top",{"_index":420,"title":{},"name":{},"text":{"3":{}},"component":{}}],["toset",{"_index":1318,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["total",{"_index":992,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"13":{},"15":{}},"component":{}}],["totalamount",{"_index":1435,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["tounmodifiablelist",{"_index":1316,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["tounmodifiableset",{"_index":1319,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["trace",{"_index":285,"title":{"10-12":{},"15-12":{}},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["tradit",{"_index":1633,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["traffic",{"_index":1706,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["transact",{"_index":522,"title":{"10-11":{},"15-11":{}},"name":{},"text":{"3":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["transfer",{"_index":87,"title":{"3-9":{},"3-13":{}},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["transform",{"_index":1682,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["transient",{"_index":507,"title":{},"name":{},"text":{"3":{}},"component":{}}],["transpar",{"_index":1799,"title":{},"name":{},"text":{"11":{}},"component":{}}],["transport",{"_index":301,"title":{},"name":{},"text":{"3":{}},"component":{}}],["tree",{"_index":1052,"title":{},"name":{},"text":{"7":{}},"component":{}}],["tri",{"_index":1354,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["trick",{"_index":1545,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["tricki",{"_index":589,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["trigger",{"_index":424,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["true",{"_index":599,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["truli",{"_index":1750,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["tunnel",{"_index":328,"title":{},"name":{},"text":{"3":{}},"component":{}}],["turn",{"_index":1517,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["twelv",{"_index":1698,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["twice",{"_index":1259,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["two",{"_index":331,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["type",{"_index":39,"title":{},"name":{},"text":{"1":{},"3":{},"4":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["type=client_credenti",{"_index":809,"title":{},"name":{},"text":{"6":{}},"component":{}}],["typic",{"_index":364,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"11":{},"14":{}},"component":{}}],["udp",{"_index":300,"title":{},"name":{},"text":{"3":{}},"component":{}}],["unauthor",{"_index":738,"title":{},"name":{},"text":{"6":{}},"component":{}}],["unbear",{"_index":1709,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["unbox",{"_index":1147,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["undefin",{"_index":1847,"title":{},"name":{},"text":{"11":{}},"component":{}}],["under",{"_index":528,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"11":{},"15":{}},"component":{}}],["underli",{"_index":933,"title":{},"name":{},"text":{"7":{},"10":{},"15":{}},"component":{}}],["understand",{"_index":1645,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["unencrypt",{"_index":796,"title":{},"name":{},"text":{"6":{}},"component":{}}],["unfriendli",{"_index":1523,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["unifi",{"_index":1626,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["uniformli",{"_index":1752,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["uniqu",{"_index":1760,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["unit",{"_index":578,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["unless",{"_index":1450,"title":{},"name":{},"text":{"9":{},"11":{},"14":{}},"component":{}}],["unlik",{"_index":781,"title":{},"name":{},"text":{"6":{}},"component":{}}],["unmarshal",{"_index":99,"title":{"3-14":{}},"name":{},"text":{"3":{}},"component":{}}],["unmodifi",{"_index":1317,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["unreli",{"_index":1674,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["until",{"_index":1403,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["up",{"_index":602,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"9":{},"14":{}},"component":{}}],["updat",{"_index":324,"title":{},"name":{},"text":{"3":{}},"component":{}}],["updatedresourcedto",{"_index":1023,"title":{},"name":{},"text":{"7":{}},"component":{}}],["upon",{"_index":198,"title":{},"name":{},"text":{"3":{}},"component":{}}],["uptim",{"_index":1692,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["uri",{"_index":378,"title":{"7-7":{},"7-9":{},"7-16":{}},"name":{},"text":{"3":{},"7":{}},"component":{}}],["uri=http://localhost:9000",{"_index":723,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["uri=http://localhost:9000/oauth2/author",{"_index":812,"title":{},"name":{},"text":{"6":{}},"component":{}}],["uri=http://localhost:9000/oauth2/token",{"_index":814,"title":{},"name":{},"text":{"6":{}},"component":{}}],["uricomponentsbuild",{"_index":1010,"title":{},"name":{},"text":{"7":{}},"component":{}}],["uricomponentsbuilder.fromhttpurl(\"http://localhost:8080/api/v1/resource\").queryparam(\"nam",{"_index":1064,"title":{},"name":{},"text":{"7":{}},"component":{}}],["uricomponentsbuilder.frompath(\"/api/v1/resourc",{"_index":1011,"title":{},"name":{},"text":{"7":{}},"component":{}}],["uricomponentsbuilder.frompath(\"/api/v1/resource/{resourceid}\").build(resourcedto.getid",{"_index":1070,"title":{},"name":{},"text":{"7":{}},"component":{}}],["uricomponentsbuilder.queryparam(\"nam",{"_index":1012,"title":{},"name":{},"text":{"7":{}},"component":{}}],["uritemplatehandler(new",{"_index":902,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["urivari",{"_index":1025,"title":{},"name":{},"text":{"7":{}},"component":{}}],["url",{"_index":338,"title":{"5-4":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{}},"component":{}}],["us",{"_index":209,"title":{"6-5":{}},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["us/docs/web/http/statu",{"_index":354,"title":{},"name":{},"text":{"3":{}},"component":{}}],["usabl",{"_index":1776,"title":{},"name":{},"text":{"11":{}},"component":{}}],["usag",{"_index":1846,"title":{},"name":{},"text":{"11":{}},"component":{}}],["useless",{"_index":1258,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["user",{"_index":604,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"11":{},"13":{}},"component":{}}],["user(\"jam",{"_index":1198,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["user(\"john",{"_index":1204,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["user(\"mari",{"_index":1201,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["user(\"sarah",{"_index":1195,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["user.getag",{"_index":1214,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["user.getnam",{"_index":1211,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["user:a3ba6f29",{"_index":741,"title":{},"name":{},"text":{"6":{}},"component":{}}],["usernam",{"_index":726,"title":{"6-4":{}},"name":{},"text":{"6":{}},"component":{}}],["users.foreach(us",{"_index":1219,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["users.sort(revers",{"_index":1218,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["user{name='jam",{"_index":1228,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["user{name='john",{"_index":1225,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["user{name='mari",{"_index":1223,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["user{name='sarah",{"_index":1221,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["usual",{"_index":1638,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["util",{"_index":1777,"title":{},"name":{},"text":{"11":{}},"component":{}}],["valid",{"_index":124,"title":{"3-28":{}},"name":{},"text":{"3":{},"6":{}},"component":{}}],["valu",{"_index":688,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"9":{},"14":{}},"component":{}}],["value(\"${rest.template.baseuri",{"_index":894,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["vari",{"_index":1792,"title":{},"name":{},"text":{"11":{}},"component":{}}],["variabl",{"_index":1262,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["variou",{"_index":16,"title":{},"name":{},"text":{"1":{},"9":{},"12":{},"14":{}},"component":{}}],["verb",{"_index":380,"title":{},"name":{},"text":{"3":{}},"component":{}}],["veri",{"_index":462,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["verif",{"_index":794,"title":{},"name":{},"text":{"6":{}},"component":{}}],["verifi",{"_index":774,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["version",{"_index":89,"title":{"3-10":{}},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["vert.x",{"_index":1834,"title":{},"name":{},"text":{"11":{}},"component":{}}],["via",{"_index":367,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"11":{},"15":{}},"component":{}}],["view",{"_index":440,"title":{},"name":{},"text":{"3":{}},"component":{}}],["violat",{"_index":572,"title":{},"name":{},"text":{"3":{}},"component":{}}],["virtual",{"_index":1533,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["void",{"_index":884,"title":{},"name":{},"text":{"6":{},"7":{},"8":{},"13":{}},"component":{}}],["volum",{"_index":1665,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["vs",{"_index":71,"title":{"3-2":{},"3-14":{},"6-10":{},"10-1":{},"10-10":{},"10-11":{},"15-1":{},"15-10":{},"15-11":{}},"name":{},"text":{"10":{},"15":{}},"component":{}}],["wait",{"_index":1537,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["want",{"_index":692,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["warmup",{"_index":1486,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["way",{"_index":332,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["weak",{"_index":1768,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["web",{"_index":445,"title":{},"name":{"7":{}},"text":{"3":{},"6":{},"9":{},"14":{}},"component":{}}],["webclient",{"_index":55,"title":{"7":{},"3-22":{}},"name":{},"text":{"1":{},"3":{}},"component":{}}],["webflux",{"_index":109,"title":{"3-20":{}},"name":{},"text":{"3":{}},"component":{}}],["webflux.fn",{"_index":110,"title":{"3-21":{}},"name":{},"text":{"3":{}},"component":{}}],["webmvctest",{"_index":605,"title":{},"name":{},"text":{"3":{},"4":{},"6":{}},"component":{}}],["welcom",{"_index":7,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["well",{"_index":133,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["we’r",{"_index":799,"title":{},"name":{},"text":{"6":{}},"component":{}}],["when(authorizedclientmanager.authorize(any())).thenreturn(new",{"_index":921,"title":{},"name":{},"text":{"6":{}},"component":{}}],["when(mockresttemplatebuilder.build()).thenreturn(resttempl",{"_index":1039,"title":{},"name":{},"text":{"7":{}},"component":{}}],["whenev",{"_index":415,"title":{},"name":{},"text":{"3":{},"9":{},"14":{}},"component":{}}],["wherea",{"_index":1524,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["whether",{"_index":1091,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"14":{}},"component":{}}],["whole",{"_index":1664,"title":{},"name":{},"text":{"10":{},"11":{},"15":{}},"component":{}}],["whose",{"_index":1344,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["wise",{"_index":1247,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["wish",{"_index":773,"title":{},"name":{},"text":{"6":{}},"component":{}}],["with(httpbasic(\"mi",{"_index":752,"title":{},"name":{},"text":{"6":{}},"component":{}}],["with(jwt().jwt(jwt",{"_index":695,"title":{},"name":{},"text":{"4":{}},"component":{}}],["within",{"_index":1487,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["without",{"_index":185,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"11":{},"14":{}},"component":{}}],["withstand",{"_index":1673,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["won’t",{"_index":1326,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["word",{"_index":1369,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["work",{"_index":216,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["workload",{"_index":1793,"title":{},"name":{},"text":{"11":{}},"component":{}}],["world",{"_index":1678,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["wrap",{"_index":1751,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["wrapper",{"_index":151,"title":{},"name":{},"text":{"3":{}},"component":{}}],["write",{"_index":699,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"13":{}},"component":{}}],["wrong",{"_index":1560,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"15":{}},"component":{}}],["wsdl",{"_index":1677,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["xml",{"_index":366,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["ydffof0xri7hefwocs0n_ba1ylwdpk2e2i1hdygqf3hrlvylgsobokykejfuimtq3wjvxeboqv0rm9r6ull3yhsrghubqblhrdmoqmpvdnczytc29s16dfmomy_ob7fmdzoo",{"_index":663,"title":{},"name":{},"text":{"4":{}},"component":{}}],["york",{"_index":1469,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["you’ll",{"_index":479,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"14":{}},"component":{}}],["you’r",{"_index":974,"title":{},"name":{},"text":{"7":{},"10":{},"15":{}},"component":{}}],["zero",{"_index":1378,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"Welcome to DEV Cheat Sheets, a personal collection of notes and quick references gathered from courses, books, and other various learning resources. This repository serves as a convenient reference guide for myself and others. These notes reflect my own learning journey and are intended to be a helpful resource for anyone looking to refresh their memory or gain insights into key programming concepts. I mark Java types with the below symbols: 🔴 final class 🟢 class 🟠 abstract class ⚪ interface ☕ Java API Lambda Expression The Stream API Concepts Microservices Reactive Programming ☘️ Spring Framework Spring WebClient Spring Security Spring Authorization Server Spring Resource Server Debugging techniques Effective Java Summary","title":"DEV Cheat Sheets","component":"reference","version":"feature-spring","name":"index","url":"/reference/feature-spring/index.html","titles":[{"text":"Legend","hash":"_legend","id":1},{"text":"Resources","hash":"_resources","id":2},{"text":"External Resources","hash":"_external_resources","id":3}]},"2":{"id":2,"text":"You can change logging level of the package with the following property: logging.level.org.springframework.security=trace","title":"Debugging techniques","component":"reference","version":"feature-spring","name":"debug","url":"/reference/feature-spring/spring-framework/debug.html","titles":[{"text":"Changing logging level","hash":"_changing_logging_level","id":1}]},"3":{"id":3,"text":"Spring Framework is the most popular Java framework for building highly scalable and reliable Enterprise Applications. It is well suited for Monolithic and Microservice Architecture. Spring Framework was introduced by Rod Johnson in 2003 as a simpler alternative to J2EE. In March 2004 version 1.0 has been released. Spring Framework is a collection of framework libraries. Spring Boot is automated tooling for Spring Framework applications. Think of it as a wrapper around Spring. One of the best feature of Spring Boot is auto-configuration of application based on the jar dependencies. Quickly generate Spring Boot project: [start.spring.io](https://start.spring.io) [Annotations](annotations.md) [API](api.md) [Properties](properties.md) [Project Lombok](project-lombok.md) [MapStruct](mapstruct.md) [Thymeleaf](thymeleaf.md) [Mockito](mock-mvc.md) [JsonPath](json-path.md) Single Responsibility - every class should have a single responsibility. Classes should be small Open Closed - classes should be open for extension, but closed for modification Liskov Substitution - objects in a program would be replaceable with instances of their subtypes without altering the correctness of the program. A square is a rectangle, a rectangle is not a square. Interface Segregation - make fine-grained interfaces that are client specific. Notice relationship to the Single Responsibility principle Dependency Inversion - abstractions should not depend upon details and details shold depend upon abstractions. Important that higher level and lower level objects depend on the same abstract interaction Dependency Injection is where a needed dependency is injected by another object. Types of Dependency Injection: * By class fields (using @Autowired on a field) - least preferred * Can be public or private properties. Using private properties is evil as spring can use reflection to set them. It \"works\", but is slow and makes testing difficult. * By setters (using @Autowired on a setter) - for optional dependencies * By constructor - for mandatory dependencies, most preferred Dependency Injection can be done with concrete Classes (should be avoided) or with Interfaces (preferred). Inversion of Control is a technique to allow dependencies to be injected at runtime. Control of the dependencies is being inverted over to managing framework. Start: 1. Instantiation of Bean 2. Population of properties/dependencies 3. Call setBeanName of org.springframework.beans.factory.BeanNameAware 4. Call setBeanFactory of org.springframework.beans.factory.BeanFactoryAware 5. Call setApplicationContext of org.springframework.context.ApplicationContextAware 6. Pre Initialization (call postProcessBeforeInitialization of org.springframework.beans.factory.config.BeanPostProcessor) 7. Call @PostConstruct annotated method 8. Call afterPropertiesSet of org.springframework.beans.factory.InitializingBean 9. Call custom init method (can be set with initMethod of org.springframework.context.annotation.Bean) 10. Post Initialization (call postProcessAfterInitialization of org.springframework.beans.factory.config.BeanPostProcessor) 11. Bean ready to use Termination: 1. Container shutdown 2. Call @PreDestroy annotated method 3. Call destroy of org.springframework.beans.factory.DisposableBean 4. Call custom destroy method (can be set with destroyMethod of org.springframework.context.annotation.Bean) 5. Bean terminated HTTP/1.1 - added more caching strategies and request methods (PUT, PATCH, DELETE, CONNECT, TRACE and OPTIONS). Since this version HTTP connection can be reused (Keep-Alive). HTTP/2 - improves the average speed of communications by lowering latency and higher throughput. No significant changes for Developers HTTP/3 - most important change is use of the QUIC + UDP transport protocols instead of TCP. This slightly improves the average speed of communications. No significant changes for Developers :green_square: :blue_square: :orange_square: GET - requests for a resource (e.g. HTML file) :green_square: :blue_square: :orange_square: HEAD - is like GET, but only requests for meta information without the body :orange_square: POST - requests to post data to the server (e.g. form data). It is create request :blue_square: PUT - requests to create a new resource or replace a representation of the target resource with the state defined by the representation enclosed in the request. It is create or replace request :orange_square: PATCH - requests to apply a modification to a target resource according to the partial update defined in the representation enclosed in the request. It is update request :blue_square: DELETE - requests to delete the specified resource CONNECT - requests to establish a TCP/IP tunnel to the origin server identified by the request target. It is used to secure two-way communication through one or more HTTP proxies with SSL/TLS :green_square: :blue_square: OPTIONS - returns the HTTP methods supported by the server for the specified URL :green_square: :blue_square: TRACE - echo the received request. Can be used to see if request was altered by intermediate servers Legend: * :green_square: - Safe Methods: do not cause any changes on the server * :blue_square: - Idempotent Methods: multiple identical requests will have the same effect on the server * :orange_square: - Cacheable Methods: response is allowed to be stored for future use (cached) Full list: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status * 1xx - informational * 2xx - successful * 3xx - redirection * 4xx - client error * 5xx - server side error Representation - typically JSON or XML State Transfer - typically via HTTP Marshalling - process of converting Java Objects to JSON or XML Unmarshalling - process of converting JSON or XML to Java Objects RMM is used to describe the quality of the RESTful service: * Level 0: Swamp of POX (Plain Old XML) - uses one URI and one kind of HTTP Verb (Request Method) * Example: RPC, SOAP, XML-RPC * Level 1: Resources - uses multiple URIs to identify specific resources and one kind of HTTP Verb. It breaks large service into distinct URIs. * Example: You can GET /product/1234 and /product/5678 * Level 2: HTTP Verbs - uses multiple URIs and multiple kind of HTTP Verb for desired actions. It introduces HTTP Verbs to implement actions. * Example: You can GET and DELETE /product/1234 and /product/5678 * Level 3: Hypermedia - representation contains URIs which may be useful to consumers. It helps developers explore the resource. It provides discoverability, making the API more self documenting * Spring Framework provides an implementation of HATEOAS (Hypermedia as the Engine of Application State) - in response objects you get links and information about the actions After 201 (Created) status response return Location HTTP Header with URI to the new resource Do not return stack trace to client - be careful to not \"leak\" information to Internet Spring Boot DEV Tools are additional set of tools that can make the application development experience a little more pleasant: * application automatically restart whenever files on the classpath change (in IntelliJ IDEA you can just Recompile java file or Build Project in Build top menu) * starts embedded LiveReload server that can be used to trigger a browser refresh when a resource is changed * disable caching options by default, so changes can be seen immediately * you can configure global DEV Tools settings by adding a file named .spring-boot-devtools.properties to your ${HOME} folder. Any properties added to this file will apply to all Spring Boot applications on your machine that use DEV Tools Spring MVC is blocking (because uses Java Servlet API) and non-reactive. MVC stands for Model View Controller and it is a common design pattern for GUI and Web Applications. Controller handles requests. It is responsible for invoking business logic and populating Model. Model is a POJO (Plain Old Java Object) class which means that it is not tied to any Java framework. View handles rendering of the response which contains Model to HTML page. In Spring MVC there is Dispatcher Servlet which: * receives request from Client * passes the request to Controller and receives Model from Controller * passes the Model to View and receives rendered HTML page * passes rendered HTML page to Client RestTemplate is in maintenance mode (no new features are planned). It is recommended to use Spring WebClient for new development. Spring WebFlux is non-blocking (because does not use Java Servlet API) and reactive. WebFlux uses project Reactor to provide reactive web services. It follows very closely to the configuration model of Spring MVC. Spring WebFlux.fn is a functional programming model used to define endpoints. It is alternative to annotation based configuration. Spring WebClient is reactive web client. By default, uses Reactor Netty - a non-blocking HTTP Client library. Spring Data REST makes it easy to build hypermedia-driven REST web services on top of Spring Data repositories. Spring Data REST builds on top of Spring Data repositories, analyzes your application’s domain model and exposes hypermedia-driven HTTP resources for aggregates contained in the model. The @Version property is returned as ETag (Entity Tag) header in response. It is used to determine a change in content at a given URL. When you make a GET request to: * /resources - you’ll get list of resources * /profile/resources - you’ll get information about resources REST API * /resources/search/findByProperty?property=test - you’ll get the result of Repository findByProperty method invocation Spring Data JPA provides repository support for the Jakarta Persistence API (JPA). It eases development of applications with a consistent programming model that need to access JPA data sources: * [Defining Query Methods](https://docs.spring.io/spring-data/jpa/reference/repositories/query-methods-details.html) Spring Data JPA does not have a default limit on records returned and does not set a default sort. The only limit is memory of the JVM: * [Paging, Iterating Large Results, Sorting & Limiting](https://docs.spring.io/spring-data/jpa/reference/repositories/query-methods-details.html#repositories.special-parameters) JPA specific cascade types: * ALL - propagates all operations * PERSIST - also saves child objects (transient instances) * MERGE - copies the state of a given object to the persistent object. MERGE includes child entities * REMOVE - cascades delete operations to child objects * REFRESH - cascades refresh operations to child objects * DETACH - detaches child objects from persistence context Hibernate specific cascade types: * DELETE - same as JPA REMOVE * SAVE_UPDATE - cascades Hibernate save and update operations to child objects * REPLICATE - replicates child objects to second data source * LOCK - reattaches entity and children to persistence context - without refresh Spring Data JPA by default supports implicit transactions: repository methods will create transaction by default, if there is no active transaction: * they aren’t used in the test context where Spring Boot will create a transaction for the tests and roll it back * implicit transactions are only used outside a transactional context: * if you have a method under test with one or more repository method call, you may see different results when run outside the test context Creating a connection to the database is a fairly heavy operation. [HikariCP](https://github.com/brettwooldridge/HikariCP) creates a pool of connections to the database, establishes that network connection to the database, so you have multiple connections established which take resources (memory). Connection pool helps significantly when you have a load on the system. Migrations are the process of moving programming code from one system to another. Database Migrations typically need to occur prior to, or in conjunction with application code. Database migrations are a very important part of the process of moving you application code to production. Database Migration tools can: Create a new database Hold history of migrations Have a reproducible state of the database Help manage changes being applied to numerous database instances OpenCSV is a handy tool for parsing CSV files. com.opencsv.bean.@CsvBindByName - specifies a binding between a column name of the CSV input and a field in a bean org.springframework.util.ResourceUtils.getFile(\"classpath:csvdata/data.csv\") - resolves the given resource location to a java.io.File Jakarta Bean Validation - a Java API standard which provides a standard way of performing validation and handling errors. The primary implementation of this API is Hibernate implementation called Hibernate Validator Validation support can be used in Controllers, Services and other Spring managed Components Spring MVC will return a 400 Bad Request Error for validation failures Spring Data JPA will throw an exception for JPA constraint violations Best practice is to add validation constraints that match your database constraints. In Spring Boot if API is only on classpath (with no implementation), you can use the annotations, but validation will not occur. After Spring 2.3, you must include org.springframework.boot:spring-boot-starter-validation Unit Tests - designed to test specific sections of code. Ideal coverage is 70-80%. Integration Tests - designed to test behaviors between objects and parts of the overall system. They can include the Spring Context, database and message brokers. Functional Tests - testing the running application. Spring MVC Controllers are tricky to test property. They have a high degree of integration with Spring MVC framework. JUnit tests are not sufficient to test the framework interaction. Spring Mock MVC is a testing environment for the testing of Spring MVC Controllers: * Provides mocks of the Servlet runtime environment (simulates the execution of controller as if it was running under Spring with Tomcat) * Can be run with (Integration Test) or without (true Unit Test) Spring Context Spring Boot supports a concept of Test Splices which bring up a targeted segment of the auto-configured Spring Boot environment: * e.g. just the Database components or just the Web components * user defined Spring beans typically are not initialized @WebMvcTest is a Spring Boot test splice which creates a MockMVC enrionment for the controller under a test. Dependencies of it are not included and need to be added to the Spring Context in the test environment.","title":"☘️ Spring Framework","component":"reference","version":"feature-spring","name":"index","url":"/reference/feature-spring/spring-framework/index.html","titles":[{"text":"📌 Overview","hash":"_overview","id":1},{"text":"📌 Spring Framework vs Spring Boot","hash":"_spring_framework_vs_spring_boot","id":2},{"text":"📌 Spring Initializr","hash":"_spring_initializr","id":3},{"text":"📌 Cheat Sheets","hash":"_cheat_sheets","id":4},{"text":"📌 SOLID principles of Object-Oriented Programming","hash":"_solid_principles_of_object_oriented_programming","id":5},{"text":"📌 Dependency Injection","hash":"_dependency_injection","id":6},{"text":"📌 Inversion of Control (IoC)","hash":"_inversion_of_control_ioc","id":7},{"text":"📌 Spring Bean Lifecycle","hash":"_spring_bean_lifecycle","id":8},{"text":"📌 HTTP (Hypertext Transfer Protocol)","hash":"_http_hypertext_transfer_protocol","id":9},{"text":"Versions","hash":"_versions","id":10},{"text":"Request Methods","hash":"_request_methods","id":11},{"text":"Response Status Codes","hash":"_response_status_codes","id":12},{"text":"📌 REST (Representational State Transfer)","hash":"_rest_representational_state_transfer","id":13},{"text":"📌 Marshalling vs Unmarshalling","hash":"_marshalling_vs_unmarshalling","id":14},{"text":"📌 RMM (Richardson Maturity Model)","hash":"_rmm_richardson_maturity_model","id":15},{"text":"📌 RESTful Best Practices","hash":"_restful_best_practices","id":16},{"text":"📌 Spring Boot DEV Tools","hash":"_spring_boot_dev_tools","id":17},{"text":"📌 Spring MVC","hash":"_spring_mvc","id":18},{"text":"Spring RestTemplate","hash":"_spring_resttemplate","id":19},{"text":"📌 Spring WebFlux","hash":"_spring_webflux","id":20},{"text":"Spring WebFlux.fn","hash":"_spring_webflux_fn","id":21},{"text":"Spring WebClient","hash":"_spring_webclient","id":22},{"text":"📌 Spring Data REST","hash":"_spring_data_rest","id":23},{"text":"📌 Spring Data JPA","hash":"_spring_data_jpa","id":24},{"text":"📌 Database","hash":"_database","id":25},{"text":"📌 Flyway ([Documentation](https://docs.spring.io/spring-boot/how-to/data-initialization.html#howto.data-initialization.migration-tool.flyway))","hash":"_flyway_documentationhttpsdocs_spring_iospring_boothow_todata_initialization_htmlhowto_data_initialization_migration_tool_flyway","id":26},{"text":"📌 OpenCSV ([Documentation](https://opencsv.sourceforge.net/))","hash":"_opencsv_documentationhttpsopencsv_sourceforge_net","id":27},{"text":"📌 Jakarta Bean Validation","hash":"_jakarta_bean_validation","id":28},{"text":"📌 Testing","hash":"_testing","id":29}]},"4":{"id":4,"text":"org.springframework.boot spring-boot-starter-oauth2-authorization-server In the official documentation you can find example implementation of 🟢 SecurityConfig. With the following 🔴 InMemoryRegisteredClientRepository: @Bean public RegisteredClientRepository registeredClientRepository() { RegisteredClient oidcClient = RegisteredClient.withId(UUID.randomUUID().toString()) .clientId(\"oidc-client\") .clientSecret(\"{noop}secret\") .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC) .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE) .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN) .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS) .redirectUri(\"http://127.0.0.1:8080/login/oauth2/code/oidc-client\") .redirectUri(\"http://127.0.0.1:8080/authorized\") .scope(OidcScopes.OPENID) .scope(OidcScopes.PROFILE) .scope(\"message.read\") .scope(\"message.write\") .clientSettings(ClientSettings.builder().requireAuthorizationConsent(true).build()) .build(); return new InMemoryRegisteredClientRepository(oidcClient); } you can request JWT token in Postman in Authorization tab with OAuth 2.0 type by configuring new token: Grant Type: Client Credentials Access Token URL: http://localhost:9000/oauth2/token Client ID: oidc-client Client Secret: secret Scope: message.read message.write and hitting Get New Access Token button. 🔴 InMemoryRegisteredClientRepository is recommended ONLY to be used during development/testing. The encoded JWT Access Token looks like: eyJraWQiOiJkNDkzYjc0Ni03NzhhLTQ5OWQtOWU1OS00ZDVmZWE4ZWFlYWIiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJvaWRjLWNsaWVudCIsImF1ZCI6Im9pZGMtY2xpZW50IiwibmJmIjoxNzI4MzMyMzY2LCJzY29wZSI6WyJtZXNzYWdlLnJlYWQiLCJtZXNzYWdlLndyaXRlIl0sImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6OTA5MCIsImV4cCI6MTcyODMzMjY2NiwiaWF0IjoxNzI4MzMyMzY2LCJqdGkiOiI4N2YxZmVmYy1lODEwLTQ4MGItYjUyMC03ZmFmNTI1MDdiZmIifQ.iR34FpFD-Ev4Haxs_hhqp_73b-AN5O0x-GpV7ji_jHVohg-jR7RiLHMC-EbYtUcpMnUSd-c4Zm8O7j_JMKUdShLlWxfVMb06YPa9Hz-Np0aaH26EcHCt-ydFFof0xri7HEfWOcs0N_Ba1YLwDpK2E2I1hDYgqF3HRlVyLgSobokYKEJFUIMtq3WJVxEbOqv0rm9R6ULL3YHsRghubQBLHrdmoQMpVDNczytC29s16DfMOmy_Ob7fMDzOo-NLEEPtADHlcPkhzl0nVumcfIQo7LPXU7ZHZm0Qav-c3c8kXfZLrRdOET3raZkxx1VRS9nPDARNqGr5wyNeSL-4MDp-jA The decoded JWT Access Token looks like: { \"header\":{ \"kid\":\"d493b746-778a-499d-9e59-4d5fea8eaeab\", \"alg\":\"RS256\" }, \"payload\":{ \"sub\":\"oidc-client\", \"aud\":\"oidc-client\", \"nbf\":1728332366, \"scope\":[ \"message.read\", \"message.write\" ], \"iss\":\"http://localhost:9000\", \"exp\":1728332666, \"iat\":1728332366, \"jti\":\"87f1fefc-e810-480b-b520-7faf52507bfb\" } } In Postman the Authorization header will be added to each request with value: Bearer eyJraWQiOiJkNDkzYjc0Ni03NzhhLTQ5OWQtOWU1OS00ZDVmZWE4ZWFlYWIiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJvaWRjLWNsaWVudCIsImF1ZCI6Im9pZGMtY2xpZW50IiwibmJmIjoxNzI4MzMyMzY2LCJzY29wZSI6WyJtZXNzYWdlLnJlYWQiLCJtZXNzYWdlLndyaXRlIl0sImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6OTA5MCIsImV4cCI6MTcyODMzMjY2NiwiaWF0IjoxNzI4MzMyMzY2LCJqdGkiOiI4N2YxZmVmYy1lODEwLTQ4MGItYjUyMC03ZmFmNTI1MDdiZmIifQ.iR34FpFD-Ev4Haxs_hhqp_73b-AN5O0x-GpV7ji_jHVohg-jR7RiLHMC-EbYtUcpMnUSd-c4Zm8O7j_JMKUdShLlWxfVMb06YPa9Hz-Np0aaH26EcHCt-ydFFof0xri7HEfWOcs0N_Ba1YLwDpK2E2I1hDYgqF3HRlVyLgSobokYKEJFUIMtq3WJVxEbOqv0rm9R6ULL3YHsRghubQBLHrdmoQMpVDNczytC29s16DfMOmy_Ob7fMDzOo-NLEEPtADHlcPkhzl0nVumcfIQo7LPXU7ZHZm0Qav-c3c8kXfZLrRdOET3raZkxx1VRS9nPDARNqGr5wyNeSL-4MDp-jA where after Bearer there is encoded JWT. You can customize Authorization Server port with this property server.port=9000 You can find Authorization Server endpoints in 🔴 AuthorizationServerSettings.html#builder(). If you want to customize them, check official documentation. An example how OAuth 2.0 with JWT support can be added to the test: mockMvc.perform(get(\"/api/v1/resource\") with(jwt().jwt(jwt -> jwt.claims(claims -> { claims.put(\"scope\", \"message-read\"); claims.put(\"scope\", \"message-write\"); }).subject(\"oidc-client\").notBefore(Instant.now().minusSeconds(5L)))) (1) .accept(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()) .andExpect(content().contentType(MediaType.APPLICATION_JSON)) .andExpect(jsonPath(\"$.content.length()\", is(3))); 1 This way we can add Authorization header to the request If your test is annotated with @SpringBootTest, then you need to create 🔴 MockMvc like this: MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(wac) .apply(springSecurity()) (1) .build(); 1 Configure 🔴 MockMvc to use Spring Security If your test is annotated with @WebMvcTest, then you need to import 🟢 SecurityConfig by annotating the test class with: @Import(SecurityConfig.class)","title":"Spring Authorization Server","component":"reference","version":"feature-spring","name":"spring-authorization-server","url":"/reference/feature-spring/spring-framework/spring-authorization-server.html","titles":[{"text":"Maven Dependency","hash":"_maven_dependency","id":1},{"text":"Getting Started","hash":"_getting_started","id":2},{"text":"Example","hash":"_example","id":3},{"text":"Customizing Authorization Server port","hash":"_customizing_authorization_server_port","id":4},{"text":"Customizing Authorization Server endpoints","hash":"_customizing_authorization_server_endpoints","id":5},{"text":"Testing","hash":"_testing","id":6}]},"5":{"id":5,"text":"org.springframework.boot spring-boot-starter-oauth2-resource-server To set up OAuth 2.0 Resource Server, you need to create 🟢 SecurityConfig: @Configuration public class SecurityConfig { @Bean public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception { httpSecurity.authorizeHttpRequests(authorize -> authorize.anyRequest().authenticated()) (1) .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults())); (2) return httpSecurity.build(); } } 1 Require any request to be authenticated 2 Setup OAuth 2.0 Resource Server with JWT support with the defaults You can customize Authorization Server url with this property spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9000","title":"Spring Resource Server","component":"reference","version":"feature-spring","name":"spring-resource-server","url":"/reference/feature-spring/spring-framework/spring-resource-server.html","titles":[{"text":"Maven Dependency","hash":"_maven_dependency","id":1},{"text":"Getting Started","hash":"_getting_started","id":2},{"text":"Example","hash":"_example","id":3},{"text":"Customizing Authorization Server url","hash":"_customizing_authorization_server_url","id":4}]},"6":{"id":6,"text":"org.springframework.boot spring-boot-starter-security org.springframework.security spring-security-test test Just by adding the dependency, Spring Boot will provide us sensible defaults. For example, it will autoconfigure Basic HTTP Authentication and secure all REST API endpoints. Basic HTTP Auth should be used with HTTPS, because username and password are sent over the internet as base64 encoded and without HTTPS they can be easily decoded. It is discouraged to use Basic HTTP Auth in an Enterprise project. If you’ll just send a GET request to http://localhost:8080/api/v1/resource, you’ll get Response Status Code: 401 Unauthorized. Basic HTTP Auth requires a header in the request called Authorization with value: Basic dXNlcjphM2JhNmYyOS0xMGU0LTQ5OTctOTg4Mi0yMjM0ODg4M2Q5NTQ= where after Basic there is base64 encoded username and password. Decoding base64 string $ echo \"dXNlcjphM2JhNmYyOS0xMGU0LTQ5OTctOTg4Mi0yMjM0ODg4M2Q5NTQ=\" | base64 --decode user:a3ba6f29-10e4-4997-9882-22348883d954 Encoding base64 string $ echo -n \"user:a3ba6f29-10e4-4997-9882-22348883d954\" | base64 dXNlcjphM2JhNmYyOS0xMGU0LTQ5OTctOTg4Mi0yMjM0ODg4M2Q5NTQ= By default, Spring will create a new password on each deployment. You can customize Spring Security username and password with these properties: spring.security.user.name=my-user spring.security.user.password=my-password You’ll have to invoke 🟢 RestTemplateBuilder#basicAuthentication(String username, String password) when configuring Bean here. An example how Basic HTTP Auth can be added to the test: mockMvc.perform(get(\"/api/v1/resource\") .with(httpBasic(\"my-user\", \"my-password\")) (1) .accept(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()) .andExpect(content().contentType(MediaType.APPLICATION_JSON)) .andExpect(jsonPath(\"$.content.length()\", is(3))); 1 This way we can add Authorization header to the request For HTTP POST simply adding to the test: .with(httpBasic(\"my-user\", \"my-password\")) is not enough. You’ll get Response Status Code: 403 Forbidden due to: Invalid CSRF token found for http://localhost/api/v1/resource. You can ignore CSRF token only for REST API by creating a 🟢 SecurityConfig: @Configuration public class SecurityConfig { @Bean public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception { httpSecurity.authorizeHttpRequests(authorize -> authorize.anyRequest().authenticated()) (1) .httpBasic(Customizer.withDefaults()) (2) .csrf(csrf -> csrf.ignoringRequestMatchers(\"/api/**\")); (3) return httpSecurity.build(); } } 1 Require any request to be authenticated 2 Setup HTTP Basic Auth with the defaults 3 Do not require CSRF Token on /api/** urls If your test is annotated with @SpringBootTest, then you need to create 🔴 MockMvc like this: MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(wac) .apply(springSecurity()) (1) .build(); 1 Configure 🔴 MockMvc to use Spring Security If your test is annotated with @WebMvcTest, then you need to import 🟢 SecurityConfig by annotating the test class with: @Import(SecurityConfig.class) OAuth 2.0 Authorization Framework used to grant limited access to resources without full access to the account. It allows you to grant access to a third party application to act on your behalf. OAuth Roles Client - the application requesting access Resource Owner - the user who wishes to grant an application (Client) access Authorization Server - verifies the identity of the user then issues access tokens to the application Resource Server - the resource to access Client Credentials Flow Most common OAuth Authorization Flow for RESTful APIs. It is used by services, where the user is a service role. Figure 1. Client Credentials Flow with JWT JWT JSON Web Token. It contains user information and authorized roles (scopes). It has three parts: Header, Payload (data) and Signature. All 3 parts are tokenized using base64 encoding. HTTP / REST are stateless - each request is self-contained. Unlike Web Applications which often use session id’s stored in cookies. JWT is signed which prevents clients from altering the contents of the JWT. It can be signed using a number of techniques: Symmetric encryption - uses single key to sign, requires key to be shared Asymmetric encryption - uses Public and Private Keys (known as Key Pair) Private Key is used to generate signature and is not shared Public Key is shared and is used to verify signature JWT Verification The Authorization Server signs JWT using the Private Key The Resource Server requests the Public Key from the Authorization Server Using the Public Key the Resource Server verifies the signature of the JWT The Resource Server can cache the Public Key for verification of future requests Once the Resource Server has the Public Key, JWT can be validated without additional requests from the Authorization Server. Basic HTTP Auth requires user credentials to be shared with every resource Basic HTTP Auth sends user credentials unencrypted in HTTP header and can be compromised With OAuth user credentials are only shared with Authorization Server User credentials cannot be obtained from Authorization Token Basic HTTP Auth has no concept of security roles With OAuth 2.0 security roles are defined in scopes and passed in Authorization Token When we’re dealing with security roles, we can grant access to resources as needed or deny access when appropriate. You’ll need Maven Dependency: org.springframework.boot spring-boot-starter-oauth2-client and these properties: spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9000 spring.security.oauth2.client.registration.springauth.client-id=oidc-client spring.security.oauth2.client.registration.springauth.client-secret=secret spring.security.oauth2.client.registration.springauth.scope[0]=message.read spring.security.oauth2.client.registration.springauth.scope[1]=message.write spring.security.oauth2.client.registration.springauth.authorization-grant-type=client_credentials spring.security.oauth2.client.registration.springauth.provider=springauth spring.security.oauth2.client.provider.springauth.authorization-uri=http://localhost:9000/oauth2/authorize spring.security.oauth2.client.provider.springauth.token-uri=http://localhost:9000/oauth2/token Next, you need to add @Bean for ⚪ OAuth2AuthorizedClientManager which will be responsible for the overall management of 🟢 OAuth2AuthorizedClient. The primary responsibilities include: Authorizing (or re-authorizing) an OAuth 2.0 Client by leveraging an ⚪ OAuth2AuthorizedClientProvider Delegating the persistence of an 🟢 OAuth2AuthorizedClient, typically using an ⚪ OAuth2AuthorizedClientService or ⚪ OAuth2AuthorizedClientRepository @Configuration public class RestTemplateBuilderConfig { ... @Bean OAuth2AuthorizedClientManager authorizedClientManager(ClientRegistrationRepository clientRegistrationRepository, (1) OAuth2AuthorizedClientService authorizedClientService) { OAuth2AuthorizedClientProvider authorizedClientProvider = OAuth2AuthorizedClientProviderBuilder.builder() .clientCredentials() .build(); (2) AuthorizedClientServiceOAuth2AuthorizedClientManager authorizedClientServiceAuthorizedClientManager = new AuthorizedClientServiceOAuth2AuthorizedClientManager( clientRegistrationRepository, authorizedClientService); (3) authorizedClientServiceAuthorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider); return authorizedClientServiceAuthorizedClientManager; } ... } 1 ⚪ ClientRegistrationRepository checks if client registrationId provided in authorization request is present in registration repository (enriched from registration properties) 2 ⚪ OAuth2AuthorizedClientProvider is a strategy for authorizing (or re-authorizing) an OAuth 2.0 Client. Implementations will typically implement a specific authorization grant type. Here we build 🟢 ClientCredentialsOAuth2AuthorizedClientProvider which is an implementation for client_credentials grant. 3 🔴 AuthorizedClientServiceOAuth2AuthorizedClientManager is an implementation of ⚪ OAuth2AuthorizedClientManager which persist 🟢 OAuth2AuthorizedClient: By default, when an authorization attempt succeeds, the 🟢 OAuth2AuthorizedClient will be saved in the ⚪ OAuth2AuthorizedClientService. By default, when an authorization attempt fails due to an invalid_grant error, the previously saved 🟢 OAuth2AuthorizedClient will be removed from the ⚪ OAuth2AuthorizedClientService. You’ll also need to implement @Component for ⚪ ClientHttpRequestInterceptor which allows to modify the outgoing request and/or the incoming response: @Component public class OAuthClientInterceptor implements ClientHttpRequestInterceptor { private final OAuth2AuthorizedClientManager authorizedClientManager; private final ClientRegistration clientRegistration; private final Authentication principal; public OAuthClientInterceptor(OAuth2AuthorizedClientManager authorizedClientManager, ClientRegistrationRepository clientRegistrationRepository) { this.authorizedClientManager = authorizedClientManager; (1) this.clientRegistration = clientRegistrationRepository.findByRegistrationId(\"springauth\"); (2) principal = createPrincipal(); } @Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException { OAuth2AuthorizeRequest authorizeRequest = OAuth2AuthorizeRequest.withClientRegistrationId( clientRegistration.getRegistrationId()).principal(principal).build(); (3) OAuth2AuthorizedClient authorizedClient = authorizedClientManager.authorize(authorizeRequest); (4) if (isNull(authorizedClient)) { throw new IllegalStateException(\"Missing credentials\"); } request.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + authorizedClient.getAccessToken().getTokenValue()); (5) return execution.execute(request, body); (6) } private Authentication createPrincipal() { return new Authentication() { @Override public Collection getAuthorities() { return List.of(); } @Override public Object getCredentials() { return null; } @Override public Object getDetails() { return null; } @Override public Object getPrincipal() { return this; } @Override public boolean isAuthenticated() { return true; } @Override public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException { } @Override public String getName() { return clientRegistration.getClientId(); } }; } } 1 ⚪ OAuth2AuthorizedClientManager from previous step. 2 ⚪ ClientRegistrationRepository returns 🔴 ClientRegistration enriched with our springauth registration properties. 3 🔴 OAuth2AuthorizeRequest represents a request the ⚪ OAuth2AuthorizedClientManager uses to authorize (or re-authorize) the client identified by the provided client registrationId (springauth) and principal (oidc-client). 4 ⚪ OAuth2AuthorizedClientManager returns 🟢 OAuth2AuthorizedClient after successful authorization. 5 🟢 OAuth2AuthorizedClient contains JWT which we can include in the Authorization header of the original request. 6 Original request is executed. 🟢 OAuthClientInterceptor can be added to 🟢 RestTemplateBuilder: @Configuration public class RestTemplateBuilderConfig { @Value(\"${rest.template.baseUri}\") String baseUri; ... @Bean RestTemplateBuilder restTemplateBuilder(RestTemplateBuilderConfigurer configurer, OAuthClientInterceptor clientInterceptor) { assert StringUtils.hasText(baseUri); return configurer.configure(new RestTemplateBuilder()) .additionalInterceptors(clientInterceptor) (1) .uriTemplateHandler(new DefaultUriBuilderFactory(baseUri)); } } 1 🟢 OAuthClientInterceptor handles client authorization in Authorization Server and enrichment of Authorization header for each request If your test is annotated with @SpringBootTest, then you don’t need additional configuration. If your test is annotated with @RestClientTest, then you need to mock ⚪ OAuth2AuthorizedClientManager with @MockBean: @MockBean OAuth2AuthorizedClientManager authorizedClientManager; and add a @TestConfiguration @TestConfiguration public static class TestConfig { @Bean (1) ClientRegistrationRepository clientRegistrationRepository() { return new InMemoryClientRegistrationRepository(ClientRegistration.withRegistrationId(\"springauth\") .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS) .clientId(\"test\") .tokenUri(\"test\") .build()); } @Bean (2) OAuthClientInterceptor clientInterceptor(OAuth2AuthorizedClientManager authorizedClientManager, ClientRegistrationRepository clientRegistrationRepository) { return new OAuthClientInterceptor(authorizedClientManager, clientRegistrationRepository); } } 1 Overrides default ⚪ ClientRegistrationRepository and creates the one for the test. 2 Overrides default 🟢 OAuthClientInterceptor to use mocked ⚪ OAuth2AuthorizedClientManager and customized ⚪ ClientRegistrationRepository Next, in @BeforeEach you can mock ⚪ OAuth2AuthorizedClientManager behavior in following way: @BeforeEach void setUp() throws JsonProcessingException { ClientRegistration clientRegistration = clientRegistrationRepository.findByRegistrationId(\"springauth\"); OAuth2AccessToken token = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER, \"test\", Instant.MIN, Instant.MAX); (1) when(authorizedClientManager.authorize(any())).thenReturn(new OAuth2AuthorizedClient(clientRegistration, \"test\", token)); ... } 1 This 🟢 OAuth2AccessToken will be returned together with 🟢 OAuth2AuthorizedClient after invoking OAuth2AuthorizedClientManager#authorize(OAuth2AuthorizeRequest authorizeRequest)","title":"Spring Security","component":"reference","version":"feature-spring","name":"spring-security","url":"/reference/feature-spring/spring-framework/spring-security.html","titles":[{"text":"Maven Dependencies","hash":"_maven_dependencies","id":1},{"text":"Basic HTTP Auth","hash":"_basic_http_auth","id":2},{"text":"Calling REST API endpoint with Basic HTTP Auth","hash":"_calling_rest_api_endpoint_with_basic_http_auth","id":3},{"text":"Customizing username and password","hash":"_customizing_username_and_password","id":4},{"text":"Using 🟢 RestTemplate with Basic HTTP Auth","hash":"_using_resttemplate_with_basic_http_auth","id":5},{"text":"Testing HTTP GET with Basic HTTP Auth","hash":"_testing_http_get_with_basic_http_auth","id":6},{"text":"Testing HTTP POST with Basic HTTP Auth","hash":"_testing_http_post_with_basic_http_auth","id":7},{"text":"OAuth 2.0 and JWT","hash":"_oauth_2_0_and_jwt","id":8},{"text":"Overview","hash":"_overview","id":9},{"text":"OAuth vs Basic HTTP Auth","hash":"_oauth_vs_basic_http_auth","id":10},{"text":"Calling REST API endpoint with OAuth 2.0","hash":"_calling_rest_api_endpoint_with_oauth_2_0","id":11},{"text":"Testing request with OAuth 2.0","hash":"_testing_request_with_oauth_2_0","id":12}]},"7":{"id":7,"text":"🟢 RestTemplate Synchronous client to perform HTTP requests, exposing a simple, template method API over underlying HTTP client libraries such as the JDK 🟠 HttpURLConnection, Apache HttpComponents, and others. RestTemplate offers templates for common scenarios by HTTP method, in addition to the generalized exchange and execute methods that support less frequent cases. You can create 🟢 RestTemplate from 🟢 RestTemplateBuilder: private final RestTemplateBuilder restTemplateBuilder; public Page listResources() { RestTemplate restTemplate = restTemplateBuilder.build(); ... } Next, you can retrieve an entity by doing a GET on the specified URL. The response is converted and stored in a 🟢 ResponseEntity: Print JSON response ResponseEntity stringResponse = restTemplate.getForEntity(\"http://localhost:8080/api/v1/resource\", String.class); System.out.println(stringResponse.getBody()); ⚪ Map is a very handy way to get information about what actually comes back in the response: ResponseEntity mapResponse = restTemplate.getForEntity(\"http://localhost:8080/api/v1/resource\", Map.class); Under the hood, Spring invokes Jackson to parse the returned JSON into ⚪ Map. To get better capabilities than just a ⚪ Map, you can get the response as 🟠 JsonNode: ResponseEntity jsonResponse = restTemplate.getForEntity(\"http://localhost:8080/api/v1/resource\", JsonNode.class); With this, you can for example print name of all resources: jsonResponse.getBody() .findPath(\"content\") .elements() .forEachRemaining(node -> { System.out.println(node.get(\"name\").asText()); }); Jackson gives you a lot of flexibility when you’re working with JSON string mapped to Java objects. First, implement 🟢 ResourceDTOPageImpl extending 🟢 PageImpl and annotate it with Jackson annotations: A page is a sublist of a list of objects. It allows gain information about the position of it in the containing entire list. @JsonIgnoreProperties(ignoreUnknown = true, value = \"pageable\") (1) public class ResourceDTOPageImpl extends PageImpl { @JsonCreator(mode = JsonCreator.Mode.PROPERTIES) (2) public ResourceDTOPageImpl(@JsonProperty(\"content\") List content, (3) @JsonProperty(\"number\") int page, (3) @JsonProperty(\"size\") int size, (3) @JsonProperty(\"totalElements\") long total) { (3) super(content, PageRequest.of(page, size), total); } public ResourceDTOPageImpl(List content, Pageable pageable, long total) { super(content, pageable, total); } public ResourceDTOPageImpl(List content) { super(content); } } 1 Ignore pageable property 2 Tell Jackson to use this constructor where we bind properties to parameters 3 The actual bindings Next, you can use it like: ResponseEntity pageableResponse = restTemplate.getForEntity(\"http://localhost:8080/api/v1/resource\", ResourceDTOPageImpl.class); You can externalize baseUri (e.g. http://localhost:8080) by implementing 🟢 RestTemplateBuilderConfig: @Configuration (1) public class RestTemplateBuilderConfig { @Value(\"${rest.template.baseUri}\") (2) String baseUri; @Bean RestTemplateBuilder restTemplateBuilder(RestTemplateBuilderConfigurer configurer) { assert StringUtils.hasText(baseUri); (3) return configurer.configure(new RestTemplateBuilder()); (4) .uriTemplateHandler(new DefaultUriBuilderFactory(baseUri)); (5) } } 1 @Configuration indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime 2 @Value indicates a default value expression for the annotated element 3 Once baseUri is not set, the bean will fail to instantiate 4 Configures new 🟢 RestTemplateBuilder instance with Spring Boot defaults using 🔴 RestTemplateBuilderConfigurer 5 Configures baseUri in 🟢 RestTemplateBuilder using 🟢 DefaultUriBuilderFactory This way, you can set the property in application.properties and maintain it externally: rest.template.baseUri=http://localhost:8080 and use it like: ResponseEntity response = restTemplate.getForEntity(\"/api/v1/resource\", ResourceDTOPageImpl.class); You can add query parameters to the request by using 🟢 UriComponentsBuilder: UriComponentsBuilder uriComponentsBuilder = UriComponentsBuilder.fromPath(\"/api/v1/resource\"); uriComponentsBuilder.queryParam(\"name\", name); ResponseEntity response = restTemplate.getForEntity(uriComponentsBuilder.toUriString(), ResourceDTOPageImpl.class); You can pass URI parameters like this: ResourceDTO resourceDTO = restTemplate.getForObject(\"/api/v1/resource/{resourceId}\", ResourceDTO.class, id); You can make an HTTP POST request like this: URI uri = restTemplate.postForLocation(\"/api/v1/resource\", newResourceDTO); (1) ResourceDTO resourceDTO = restTemplate.getForObject(uri.getPath(), ResourceDTO.class); (2) 1 New resource is created and uri to it is returned 2 Another request returns the created resource The below will return 🟢 ResponseEntity with body = null (so with null 🟢 ResourceDTO): ResponseEntity response = restTemplate.postForEntity(\"/api/v1/resource\", newResourceDTO, ResourceDTO.class); You can make an HTTP PUT request like this: restTemplate.put(\"/api/v1/resource/{resourceId}\", resourceDTO, resourceDTO.getId()); ResourceDTO updatedResourceDTO = restTemplate.getForObject(\"/api/v1/resource/{resourceId}\", ResourceDTO.class, resourceDTO.getId()); 🟢 RestTemplate#put(String url, Object request, Object…​ uriVariables) method does not return anything. If you want to get the created/updated resource, you need to make HTTP GET request. You can make an HTTP DELETE request like this: restTemplate.delete(\"/api/v1/resource/{resourceId}\", id); Example Test: @RestClientTest (1) @Import(RestTemplateBuilderConfig.class) (2) public class ResourceClientMockTest { @Autowired ObjectMapper objectMapper; (3) @Autowired RestTemplateBuilder restTemplateBuilder; (4) MockRestServiceServer mockServer; @Mock RestTemplateBuilder mockRestTemplateBuilder = new RestTemplateBuilder(new MockServerRestTemplateCustomizer()); (5) ResourceClient resourceClient; @BeforeEach void setUp() { RestTemplate restTemplate = restTemplateBuilder.build(); (6) mockServer = MockRestServiceServer.bindTo(restTemplate).build(); (7) when(mockRestTemplateBuilder.build()).thenReturn(restTemplate); (8) resourceClient = new ResourceClientImpl(mockRestTemplateBuilder); (9) } @Test void testListResources() throws JsonProcessingException { String payload = objectMapper.writeValueAsString(getPage()); mockServer.expect(method(HttpMethod.GET)) (10) .andExpect(requestTo(\"http://localhost:8080/api/v1/resource\")) .andRespond(withSuccess(payload, MediaType.APPLICATION_JSON)); Page resourceDTOs = resourceClient.listResources(); (11) assertThat(resourceDTOs.getContent().size()).isGreaterThan(0); } ... } 1 @RestClientTest annotates test that focuses only on beans that use 🟢 RestTemplateBuilder or ⚪ RestClient.Builder. 2 @Import indicates one or more component classes to import - typically @Configuration classes. 🟢 RestTemplateBuilderConfig is imported, so 🟢 RestTemplate can use externalized Base URI 3 🟢 ObjectMapper provides functionality for reading and writing JSON, either to and from basic POJOs (Plain Old Java Objects), or to and from a general-purpose JSON Tree Model (🟠 JsonNode), as well as related functionality for performing conversions. 4 🟢 RestTemplateBuilder is injected by Spring. 5 🟢 RestTemplateBuilder is also mocked with 🔴 MockRestServiceServer support thanks to 🟢 MockServerRestTemplateCustomizer. 6 Before each test we create 🟢 RestTemplate using 🟢 RestTemplateBuilder injected by Spring. 7 Next, we create 🔴 MockRestServiceServer with 🟢 RestTemplate binding. We need this binding, so the request sent by 🟢 RestTemplate can be handled by 🔴 MockRestServiceServer. 8 Then, we stub mocked 🟢 RestTemplateBuilder#build() method to return 🟢 RestTemplate 9 At the end of the test configuration we pass mocked 🟢 RestTemplateBuilder to the 🟢 ResourceClientImpl constructor, which finishes setup of the mock. 10 During the test, we can set up 🔴 MockRestServiceServer behavior. 11 Request sent by 🟢 ResourceClientImpl via 🟢 RestTemplate returned by mocked 🟢 RestTemplateBuilder will return response from 🔴 MockRestServiceServer successfully. You can set up 🔴 MockRestServiceServer to respond on the request to url with query parameters in the following way: URI uri = UriComponentsBuilder.fromHttpUrl(\"http://localhost:8080/api/v1/resource\").queryParam(\"name\", \"Some Name\").build().toUri(); mockServer.expect(method(HttpMethod.GET)) .andExpect(requestTo(uri)) .andExpect(queryParam(\"name\", \"Some Name\")) .andRespond(withSuccess(response, MediaType.APPLICATION_JSON)); You can set up 🔴 MockRestServiceServer to respond on the request to url with URI parameters in the following way: mockServer.expect(method(HttpMethod.GET)) .andExpect(requestToUriTemplate(\"http://localhost:8080/api/v1/resource/{resourceId}\", resourceDTO.getId())) .andRespond(withSuccess(payload, MediaType.APPLICATION_JSON)); You can set up 🔴 MockRestServiceServer to respond on the HTTP POST request like this: URI uri = UriComponentsBuilder.fromPath(\"/api/v1/resource/{resourceId}\").build(resourceDTO.getId()); mockServer.expect(method(HttpMethod.POST)) .andExpect(requestTo(\"http://localhost:8080/api/v1/resource\")) .andRespond(withAccepted().location(uri)); You can set up 🔴 MockRestServiceServer to respond on the HTTP PUT request like this: mockServer.expect(method(HttpMethod.PUT)) .andExpect(requestToUriTemplate(\"http://localhost:8080/api/v1/resource/{resourceId}\", resourceDTO.getId())) .andRespond(withNoContent()); You can set up 🔴 MockRestServiceServer to respond on the HTTP DELETE request like this: mockServer.expect(method(HttpMethod.DELETE)) .andExpect(requestToUriTemplate(\"http://localhost:8080/api/v1/resource/{resourceId}\", resourceDTO.getId())) .andRespond(withNoContent()); The HTTP DELETE does not return any entity. To make sure that 🔴 MockRestServiceServer handled the expected request, you can call 🔴 MockRestServiceServer#verify(). Example test how to verify 404 Response Status Code: @Test void testDeleteNotFound() { mockServer.expect(method(HttpMethod.DELETE)) .andExpect(requestToUriTemplate(\"http://localhost:8080/api/v1/resource/{resourceId}\", resourceDTO.getId())) .andRespond(withResourceNotFound()); assertThrows(HttpClientErrorException.class, () -> { resourceClient.deleteResource(resourceDTO.getId()); }); mockServer.verify(); }","title":"Spring WebClient","component":"reference","version":"feature-spring","name":"spring-web-client","url":"/reference/feature-spring/spring-framework/spring-web-client.html","titles":[{"text":"🟢 RestTemplate","hash":"_resttemplate","id":1},{"text":"Introduction","hash":"_introduction","id":2},{"text":"HTTP GET response as JSON string","hash":"_http_get_response_as_json_string","id":3},{"text":"HTTP GET response as ⚪ Map<K,V>","hash":"_http_get_response_as_mapkv","id":4},{"text":"HTTP GET response as 🟠 JsonNode","hash":"_http_get_response_as_jsonnode","id":5},{"text":"HTTP GET pageable response with custom Java Object","hash":"_http_get_pageable_response_with_custom_java_object","id":6},{"text":"Externalize Base URI","hash":"_externalize_base_uri","id":7},{"text":"Query Parameters","hash":"_query_parameters","id":8},{"text":"URI Parameters","hash":"_uri_parameters","id":9},{"text":"HTTP POST","hash":"_http_post","id":10},{"text":"HTTP PUT","hash":"_http_put","id":11},{"text":"HTTP DELETE","hash":"_http_delete","id":12},{"text":"Testing 🟢 RestTemplate","hash":"_testing_resttemplate","id":13},{"text":"HTTP GET","hash":"_http_get","id":14},{"text":"Query Parameters","hash":"_query_parameters_2","id":15},{"text":"URI Parameters","hash":"_uri_parameters_2","id":16},{"text":"HTTP POST","hash":"_http_post_2","id":17},{"text":"HTTP PUT","hash":"_http_put_2","id":18},{"text":"HTTP DELETE","hash":"_http_delete_2","id":19},{"text":"Response Status Code: 404 Not Found","hash":"_response_status_code_404_not_found","id":20}]},"8":{"id":8,"text":"Functional Interface Interface that has only one abstract method. These do not count: Default methods Static methods 🟢 Object methods In ⚪ Collection you may find 🟢 Object methods which are changing the documentation of those methods. However, ⚪ Collection itself is not a Functional Interface as it has many abstract methods. Lambda Expression Implementation of a Functional Interface. Lambda Expression is not another way of writing instances of anonymous classes. Anonymous class may implement any kind of Interface, not necessarily Functional, and it can extend any kind of class, whether it is a concrete class or an abstract class. Sometimes people say that a Lambda Expression is an anonymous method. Java is object-oriented programming language and thanks to introduction of Lambda Expression some patterns from functional programming have been added to it. Functional Interface may be annotated with the special annotation called @FunctionalInterface, but it’s not mandatory. This is for backward compatibility (e.g. since @FunctionalInterface is optional, ⚪ Runnable can be a Functional Interface). How to implement a Functional Interface in 3 easy steps: copy and paste a block of parameters of an abstract method: () draw an arrow operator: → provide an implementation which is going to fit your needs The java.util.function package is organized in 4 categories: ⚪ Suppliers - do not take any argument and return an object of T type. Supplier is used in the generate operation of the Stream API public interface Supplier { T get(); } ... Supplier supplier = () -> \"Hello!\"; ⚪ Consumers - consume an object of T type and do not return anything. Consumer is used in the forEach operation of the Stream API public interface Consumer { void accept(T t); } ... Consumer consumer = s -> System.out.println(s); ⚪ Predicates - take an object of T type, test it and return boolean. Predicate is used in the filter operation of the Stream API public interface Predicate { boolean test(T t); } ... Predicate predicate = s -> s.isEmpty(); ⚪ Functions - take an object of T type and return an object of R type. Function is used in the map operation of the Stream API public interface Function { R apply(T t); } ... Function function = date -> date.getMonth(); Functional Interfaces which are not part of java.util.function package: ⚪ Runnable - does not take any argument and does not return anything. Defined to model task in Java concurrent programming public interface Runnable { void run(); } ... Runnable alert = () -> System.out.println(\"I am Groot\"); ⚪ Comparator - takes two objects of T type, compares them and returns int. A comparison function, which imposes a total ordering on some collection of objects public interface Comparator { int compare(T o1, T o2); } ... Comparator comparator = (s1, s2) -> s1.compareTo(s2); Lambda Expressions are compiled using specific bytecode instruction called invokedynamic introduced in Java 7. Performance is 60x better in Lambda Expressions than Anonymous Classes. It can be even faster. Just avoid autoboxing and unboxing when writing Lambda Expressions. If you want to improve the performance you need to use specialized Interfaces for primitive types: Bad Practice: autoboxing and unboxing BiFunction function1 = (i1, i2) -> Math.max(i1, i2); int max1 = function1.apply(10, 20); Best Practice: use specialized Interfaces for primitive types IntBinaryOperator function2 = (i1, i2) -> Math.max(i1, i2); int max2 = function2.applyAsInt(10, 20); Another example would be the creation of ⚪ Comparator for the following list: List strings = Arrays.asList(\"one\", \"two\", \"three\", \"four\", \"five\"); Bad Practice: autoboxing and unboxing Comparator cmp1 = (s1, s2) -> Integer.compare(s1.length(), s2.length()); strings.sort(cmp1); Best Practice: use specialized Interfaces for primitive types ToIntFunction toLength = s -> s.length(); Comparator cmp2 = Comparator.comparingInt(toLength); strings.sort(cmp2); Lambda Expressions can be chained by using default methods of the Interface. Creating a Consumer by chaining two Consumers Consumer c1 = s -> System.out.println(\"c1 consumes \" + s); Consumer c2 = s -> System.out.println(\"c2 consumes \" + s); Consumer c3 = c1.andThen(c2); c3.accept(\"Hello\"); // Prints c1 consumes Hello c2 consumes Hello Creating a Predicate by chaining two Predicates Predicate isNull = s -> s == null; Predicate isEmpty = s -> s.isEmpty(); Predicate notNullAndNotEmpty = isNull.negate().and(isEmpty.negate()); System.out.println(\"For null = \" + notNullAndNotEmpty.test(null)); System.out.println(\"For empty = \" + notNullAndNotEmpty.test(\"\")); System.out.println(\"For Hello = \" + notNullAndNotEmpty.test(\"Hello\")); // Prints For null = false For empty = false For Hello = true Creating a Comparator by chaining two Comparators (sort by name descending, then by age descending): User sarah = new User(\"Sarah\", 28); User james = new User(\"James\", 35); User mary = new User(\"Mary\", 33); User john1 = new User(\"John\", 24); User john2 = new User(\"John\", 25); List users = Arrays.asList(sarah, james, mary, john1, john2); Comparator cmpName = Comparator.comparing(user -> user.getName()); Comparator cmpAge = Comparator.comparingInt(user -> user.getAge()); Comparator comparator = cmpName.thenComparing(cmpAge); Comparator reversed = comparator.reversed(); users.sort(reversed); users.forEach(user -> System.out.println(user)); // Prints User{name='Sarah', age=28} User{name='Mary', age=33} User{name='John', age=25} User{name='John', age=24} User{name='James', age=35}","title":"Lambda Expression","component":"reference","version":"feature-spring","name":"lambda-expression","url":"/reference/feature-spring/java/api/lambda-expression.html","titles":[{"text":"Implementing Functional Interfaces with Lambda Expression","hash":"_implementing_functional_interfaces_with_lambda_expression","id":1},{"text":"Creating Lambdas with the JDK","hash":"_creating_lambdas_with_the_jdk","id":2},{"text":"Creating Lambdas with specialized Interfaces","hash":"_creating_lambdas_with_specialized_interfaces","id":3},{"text":"Creating Lambdas by chaining","hash":"_creating_lambdas_by_chaining","id":4}]},"9":{"id":9,"text":"Steps of the Map/Filter/Reduce algorithm: Map Changes the type of the data, does not change the number of elements. The mapping step respects the order of your objects Filter Does not change the type of the data, changes the number of elements. You may end up with no data Reduce Produces a result If we want to create an efficient implementation of the Map/Filter/Reduce algorithm, it should not duplicate any data. It should work in the same way, performance wise, as the iterative pattern. Map/Filter/Reduce algorithm implemented by the Collection API would cause duplication of the data (storing the data in an intermediate structure) The Stream API Implementation of the Map/Filter/Reduce algorithm that does not duplicate any data and that does not create any load on the CPU or memory Stream by definition is an empty object - it does not carry any kind of data Every time you call a method on a Stream that returns another Stream, it is going to be a new Stream object Difference between the Stream API and iterative approach is that in the Stream API we describe the computation and not how this computation should be conducted. This is none of my business, this is the business of the API Reduce method triggers the computation of the elements, and those elements are going to be taken one-by-one, first mapped, then filtered and computed if they pass the filtering step. Using Streams is about creating pipelines of operations. Intermediate operation (Map/Filter) Operation that creates a Stream (it does not do anything, it does not process any data) Terminal operation (Reduce) Operation that produces a result (it will trigger the computation of the elements) If you have a pattern using a Stream that does not end up with a Terminal operation, your pattern is not going to process any data. It will be useless code You are not allowed to process the same Stream twice. This is why it is completely useless to create intermittent variables to store the Streams. You should inline it The Stream API gives you 4 interfaces: ⚪ Stream - a sequence of elements supporting sequential and parallel aggregate operations Modifier and Type Method Description Stream map(Function mapper) Returns a stream consisting of the results of applying the given function to the elements of this stream. IntStream mapToInt(ToIntFunction mapper) Returns an ⚪ IntStream consisting of the results of applying the given function to the elements of this stream. Stream flatMap(Function> mapper) Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element long count = cities.stream() (1) .flatMap(city -> city.getPeople().stream()) (2) .count(); (3) 1 3 cities 2 With 3 people each 3 Returns 9 Stream filter(Predicate predicate) Returns a stream consisting of the elements of this stream that match the given predicate. Optional reduce(BinaryOperator accumulator) Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an 🔴 Optional describing the reduced value, if any. See Reducing Data to compute Statistics. T reduce(T identity, BinaryOperator accumulator) Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value. See Reducing Data to compute Statistics. R collect(Collector collector) Performs a mutable reduction operation on the elements of this stream using a ⚪ Collector. See The Collectors API and Collecting Data from Streams to create Lists/Sets/Maps. Stream distinct() Returns a stream consisting of the distinct elements (according to Object#equals(Object)) of this stream. Stream sorted() Returns a stream consisting of the elements of this stream, sorted according to natural order. long count() Returns the count of elements in this stream. Optional min(Comparator comparator) Returns the minimum element of this stream according to the provided ⚪ Comparator. Optional max(Comparator comparator) Returns the maximum element of this stream according to the provided ⚪ Comparator. Object[] toArray() Returns an array containing the elements of this stream. A[] toArray(IntFunction generator) Returns an array containing the elements of this stream, using the provided generator function to allocate the returned array, as well as any additional arrays that might be required for a partitioned execution or for resizing. For example toArray(String[]::new) will return String[]. ⚪ IntStream - int primitive specialization of ⚪ Stream Modifier and Type Method Description OptionalInt min() Returns an 🔴 OptionalInt describing the minimum element of this stream, or an empty optional if this stream is empty. OptionalInt max() Returns an 🔴 OptionalInt describing the maximum element of this stream, or an empty optional if this stream is empty. OptionalDouble average() Returns an 🔴 OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty. int sum() Returns the sum of elements in this stream. IntSummaryStatistics summaryStatistics() Returns an 🟢 IntSummaryStatistics describing various summary data about the elements of this stream. ⚪ LongStream - long primitive specialization of ⚪ Stream. It has similar methods to ⚪ IntStream ⚪ DoubleStream - double primitive specialization of ⚪ Stream. It has similar methods to ⚪ IntStream 🔴 Collectors - implementations of ⚪ Collector that implement various useful reduction operations, such as accumulating elements into collections, summarizing elements according to various criteria, etc. Type parameters of ⚪ Collector: T - the type of input elements to the reduction operation A - the mutable accumulation type of the reduction operation (often hidden as an implementation detail) R - the result type of the reduction operation Modifier and Type Method Description static Collector> toList() Returns a ⚪ Collector that accumulates the input elements into a new ⚪ List, in encounter order. static Collector> toUnmodifiableList() Returns a ⚪ Collector that accumulates the input elements into an unmodifiable ⚪ List, in encounter order. static Collector> toSet() Returns a ⚪ Collector that accumulates the input elements into a new ⚪ Set. static Collector> toUnmodifiableSet() Returns a ⚪ Collector that accumulates the input elements into an unmodifiable ⚪ Set. static > Collector toCollection(Supplier collectionFactory) Returns a ⚪ Collector that accumulates the input elements into a new ⚪ Collection, in encounter order. For example toCollection(MyCollection::new) will return 🟢 MyCollection. static Collector joining() Returns a ⚪ Collector that concatenates the input elements into a 🔴 String, in encounter order. The string won’t be delimited. static Collector joining(CharSequence delimiter) Returns a ⚪ Collector that concatenates the input elements, separated by the specified delimiter, in encounter order. static Collector joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix) Returns a ⚪ Collector that concatenates the input elements, separated by the specified delimiter, with the specified prefix and suffix, in encounter order. static Collector>> groupingBy(Function classifier) Returns a ⚪ Collector implementing a \"group by\" operation on input elements of type T, grouping elements according to a classification function, and returning the results in a ⚪ Map. static Collector> groupingBy(Function classifier, Collector downstream) Returns a ⚪ Collector implementing a cascaded \"group by\" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream ⚪ Collector. static Collector counting() Returns a ⚪ Collector accepting elements of type T that counts the number of input elements. static Collector summingInt(ToIntFunction mapper) Returns a ⚪ Collector that produces the sum of an integer-valued function applied to the input elements. For example summingInt(City::getPopulation) will return population of all cities. Creating a Stream from Arrays: 🔴 Arrays#stream(T[] array) - returns a sequential Stream with the specified array as its source ⚪ Stream#of(T…​ values) - returns a sequential ordered stream whose elements are the specified values Stream streamOfStrings = Stream.of(\"abcd\", \"efgh\"); Creating a Stream from a Text File: 🔴 Files#lines(Path path) - read all lines from a file as a Stream Path path = Path.of(\"src/main/resources/first-names.txt\"); (1) try (Stream lines = Files.lines(path)) { long count = lines.count(); (2) } catch (IOException e) { e.printStackTrace(); } 1 File with 200 lines 2 Returns 200 Creating a Stream from a RegEx: 🔴 Pattern#splitAsStream(CharSequence input) - creates a Stream from the given input sequence around matches of this pattern. String sentence = \"the quick brown fox jumps over the lazy dog\"; (1) String[] words = sentence.split(\" \"); long count1 = Arrays.stream(words).count(); (3) (2) long count2 = Pattern.compile(\" \").splitAsStream(sentence).count(); (3) 1 Bad Practice: we create an array and store it in memory 2 Best Practice: we do not create an array when we create a ⚪ Stream from 🔴 Pattern 3 Returns 9 Creating an ⚪ IntStream (Stream of ASCII Codes) from a String: 🔴 String#chars() - Returns an ⚪ IntStream of int zero-extending the char values from this sequence. String sentence = \"the quick brown fox jumps over the lazy dog\"; sentence.chars() .mapToObj(codePoint -> Character.toString(codePoint)) (1) .filter(letter -> !letter.equals(\" \")) .distinct().sorted().forEach(System.out::print); 1 Converts ⚪ IntStream to ⚪ Stream Selecting elements of a Stream: IntStream.range(0, 30) .skip(10) (1) .limit(10) (2) .forEach(index -> System.out.print(index + \" \")); (3) 1 Skip first 10 elements 2 Take next 10 elements after skip 3 Prints \"10 11 12 13 14 15 16 17 18 19\" Closing a ⚪ Stream with a ⚪ Predicate: takeWhile - consume elements of the ⚪ Stream until ⚪ Predicate is true Stream.>iterate(ArrayList.class, c -> c.getSuperclass()) .takeWhile(c -> c != null) .forEach(System.out::println); // Prints: class java.util.ArrayList class java.util.AbstractList class java.util.AbstractCollection class java.lang.Object dropWhile - consume remaining elements of the ⚪ Stream after ⚪ Predicate becomes false Stream.>iterate(ArrayList.class, c -> c.getSuperclass()) .dropWhile(c -> !c.equals(AbstractCollection.class)) .forEach(System.out::println); // Prints class java.util.AbstractCollection class java.lang.Object null Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"java.lang.Class.getSuperclass()\" because \"c\" is null The following: int sum = 0; int count = 0; for (Person person : people) { if (person.getAge() > 20) { count++; sum += person.getAge(); } } double average = 0d; if (count > 0) { average = sum / count; } can be converted into: double average = people.stream() .mapToInt(Person::getAge) .filter(age -> age > 20) .average().orElseThrow(); The Stream API always computes one thing. Never sacrifice the readability of your code to the performance. The performance here is measured in nanoseconds: double totalAmount = 0; int frequentRenterPoints = 0; String statement = composeHeader(); for (Rental rental : rentals) { totalAmount += computeRentalAmount(rental); frequentRenterPoints += getFrequentRenterPoints(rental); statement += computeStatementLine(rental); } statement += composeFooter(totalAmount, frequentRenterPoints); can be converted into: double totalAmount = rentals.stream() .mapToDouble(this::computeRentalAmount) .sum(); int frequentRenterPoints = rentals.stream() .mapToInt(this::getFrequentRenterPoints) .sum(); String statement = composeHeader(); statement += rentals.stream() .map(this::computeStatementLine) .collect(Collectors.joining()); statement += composeFooter(totalAmount, frequentRenterPoints); Forget about processing your data in one pass (unless you are doing an SQL request). Most of the time when you have a for loop or when you have a ⚪ Stream, the JVM will optimize that for you and get rid of your for loop, get rid of your iteration, and you will have a zero pass of your data, just inline code, extremely performant, and extremely efficient. See Fine-grained optimizations provided by JIT Compiler in Java ⚪ Stream#reduce(T identity, BinaryOperator accumulator) adds the Identity Element before the elements of the ⚪ Stream. If you have an empty ⚪ Stream, it will return Identity Element If you have only one element in the ⚪ Stream, it will return the reduction of the Identity Element and this only element: Some reduction operations do not have any Identity Element (in case for the ⚪ IntStream#min(), the ⚪ IntStream#max(), the ⚪ IntStream#average() and ⚪ Stream#reduce(BinaryOperator accumulator). 🔴 Optional are used by the Stream API, because in cases where we have an empty ⚪ Stream without any Identity Element we don’t have any result. Collector Complex object used to reduce a Stream. Can be used to gather data in collections and maps - it is called as reduction in a \"mutable container\" or mutable reduction Downstream Collector Collector that is passed to 🔴 Collectors#groupingBy(Function classifier, Collector downstream) which is applied to the streaming of the list of values The Collector API Uses the Stream#collect(Collector collector) that takes ⚪ Collector implementation as a parameter: Use 🔴 Collectors class and its factory methods You can create your own collectors, but it is complex and tricky // Bad Practice List people = new ArrayList<>(); List peopleFromNewYork = new ArrayList<>(); (1) people.stream() .filter(p -> p.getCity().equals(\"New York\")) .forEach(p -> peopleFromNewYork.add(p)); // Best Practice List people = new ArrayList<>(); List peopleFromNewYork = people.stream() .filter(p -> p.getCity().equals(\"New York\")) .collect(Collectors.toList()); (2) 1 Creating a ⚪ List to store the result 2 Using ⚪ Collector to store the result in ⚪ List You can make a regular ⚪ Stream a parallel ⚪ Stream in two ways: by calling ⚪ BaseStream>#parallel() method on existing ⚪ Stream by calling ⚪ Collection#parallelStream() method instead of calling ⚪ Collection#stream() These intermediate operations are going to set a special bit in the ⚪ Stream that will trigger the computations in parallel when you call your terminal operation. After terminal operation is called, the ⚪ Stream implementation will check this special bit: if it is set to 1, then the computation will happen in parallel and will trigger special algorithms for that otherwise it will be processed sequentially JMH (Java Microbenchmark Harness) Standard tool to measure the performances of your Java code. You can find JMH Template project here. To proper measure the performance of a Java application you first need to run it a certain number of times (warmup), because within JVM there is a special just-in-time C2 compiler that can optimize your code a lot. Beware, you’ll have two unboxing and one boxing here (which have an impact on performance!): Integer j = 3; Integer l = 4; Integer k = j + l; Similarly, iterating and doing some operation over int[] will be much faster than over 🔴 Integer[] (due to unboxing and boxing). Each physical core of the CPU access two levels of cache, which are private: L1 - the first level of cache (small, very fast) L2 - the second level of cache (bigger, little slower). L3 - the third level of cache is shared by all physical cores (bigger, little slower than L2). Main memory lives outside the CPU and is accessed much slower than L3: How does a core of CPU access data from the main memory? This data will have to be transferred first to the L3 cache, then to the L2 cache, and then to the L1 cache before being available by this core of CPU. The memory is not read in a random way. If a core of CPU wants to access just an int, it will transfer line of memory, not just an int. The memory is transferred line by line from the main memory to the different levels of cache. Each line is typically 64 bytes (8 long or 16 int). When we have an array of references to the instance of the 🔴 Integer which are going to hold the values: In one read operation we are only going to transfer the references to this object. And then to get all the values it may be several read to maximum 16 reads. This is called Pointer Chasing which you need to avoid. To get all the values, we have to follow pointers to other places in the memory which has a cost due to the way that data is transferred from the main memory to the cache of the CPU. Iterating on a 🟢 LinkedList will imply much more Pointer Chasing than iterating on an 🟢 ArrayList. 🟢 LinkedList does not store references to the 🔴 Integer in an array. It stores them in a linked list of node objects. So first, you need to get the first reference to the first node object, and then you need to follow two pointers: the first one to the next node object and the second one to the 🔴 Integer itself. Cache Miss Whenever the core of a CPU needs a value and that value turns out not to be in the cache. During the Cache Miss, if the value is not in the L2 cache or L3 cache, then the CPU may decide to suspend the thread that is executing this computation and replace it by another thread. This is a much bigger performance hit than just Pointer Chasing, but it is still a consequence of Pointer Chasing. This is why 🟢 LinkedList is called cache-unfriendly structure, whereas 🟢 ArrayList is called cache-friendly structure. Fork/Join Framework has been introduced in Java 7 and slightly modified in Java 8. Going parallel means that this task is going to be split into subtasks and each subtask is going to produce a partial result (fork step). When those partial results have been computed, they are going to be sent back to the main task that has the responsibility of joining them (join step). All those tasks are sent to a special pool of thread called Fork/Join Pool and this pool has special capabilities to enable the computations of those subtasks in parallel. Fork/Join Framework decides whether the task is too big and should be split, or small enough and should be computed. Fork/Join Pool Is a pool of threads, instance of the 🟢 ForkJoinPool created when the JVM is created there is only one common 🟢 ForkJoinPool in the JVM since Java 8 it is used for all the parallel streams the size is fixed by the number of virtual cores (not necessarily a good thing) and can be changed with java.util.concurrent.ForkJoinPool.common.parallelism system property Suppose we have a common Fork/Join Pool with 2 threads in it. Each thread is also associated with a waiting queue that can accept tasks. Suppose we have a task to compute: The first step is to split this task (A) into subtasks (A11, A12). Since parent task (A) is waiting for the partial results computed by its subtasks, it will be put at the end of the waiting queue thus freeing the first thread 1️⃣ that is going to be able to handle the task A11. Since second thread 2️⃣ is not working, it is able to steal some tasks from another waiting queue. So second thread 2️⃣ will steal a task A12 from first thread 1️⃣, that is busy with A11 task. All threads will be busy. Fork/Join Framework implements a trick that is quite classical in concurrent programming that is called work stealing. Once all subtasks will finish computation, the results will be passed to A task which will apply the reduce operator. You need to bench your own computation to be able to tell where your sweet spot is going to be in your use case. E.g. computing the sum of 10 integers in array is much faster sequentially than in parallel, however computing the sum of several millions integers in array will be much faster in parallel. You also need to check that on a machine that is as close as possible to your production machine. Synchronization A feature within the Java language which prevents two threads from executing the same piece of code. In the Stream API there are operations (intermediate and terminal) that need to exchange data or exchange information with the other threads and perform hidden synchronization which is a bottleneck, e.g. ⚪ Stream#findFirst() (⚪ Stream#findAny() will provide you much better performance in parallel) and ⚪ Stream#limit(long maxSize) methods. If your ⚪ BinaryOperator from ⚪ Stream#reduce method is not associative, then you are going to compute wrong results in both: sequential and parallel computing. In parallel, you can also get different results each time. Associative Means that first computation gives out the same result as the second computation. Example: stream.reduce(0, (i1, i2) -> i1*i1 + i2*i2); (1) (2) (3) 1 Given: [1, 1, 1, 1] 2 It should return 4 3 Since it is not associative ⚪ BinaryOperator, it will compute 2 (1+1), then 5 (4+1), and it will return 26 (25+1) You can display the thread executing your parallel stream with: Set threadNames = ConcurrentHashMap.newKeySet(); stream.parallel() .(...) .peek(i -> threadNames.add(Thread.currentThread().getName())) .(...); threadNames.forEach(System.out::println); You can execute a parallel stream in a custom 🟢 ForkJoinPool, display the threads executing your parallel stream and count the number of tasks each thread executed with: Map threadMap = new ConcurrentHashMap<>(); Callable task = () -> { int result = stream.parallel() .(...) .peek(i -> threadMap.merge(Thread.currentThread().getName(), 1L, Long::sum)) .(...); return result; }; ForkJoinPool forkJoinPool = new ForkJoinPool(4); (1) ForkJoinTask submit = forkJoinPool.submit(task); submit.get(); threadMap.forEach((name, n) -> System.out.println(name + \" -> \" + n)); forkJoinPool.shutdown(); 1 Custom 🟢 ForkJoinPool with 4 threads The Fork step in Fork/Join Framework works best based on two assumptions: The number of elements is known before processing them. These sources of data do not meet this condition: ⚪ Iterator 🔴 Pattern Lines of a text file Reaching the center of the data must be easy, reliable and efficient. This source of data does not meet this condition: 🟢 LinkedList Fork/Join Framework splits the array in two pieces and doesn’t know if there is the same amount of data in the first half and in the second half. This information is not available, unless you count all the elements, one by one, in each half. The Framework doesn’t do that, because it would be too costly. Those two halves are going to be split again, and again, and again. Some of the segments of this array are going to be empty. Become higher and higher as the number of splitting increases. This is a problem with ⚪ Set-like structures. Sizeable The number of elements of the source is known. All the collections and the arrays are sizeable, but all the patterns, lines and iterators are not sizeable. Subsizeable The number of elements in both parts of a split source is known. Sets are sizeable, but they are not subsizeable. Processing data from a ⚪ List is much faster than the processing data from a ⚪ Set because iterating over the elements of a ⚪ List is faster than iterating over the elements of a ⚪ Set. Going parallel as a ⚪ List will bring you more performance gain than going parallel in a ⚪ Set. You may have data to process that, in fact, is not well spread over all the buckets of the array that is backing your ⚪ Set (e.g. lines of strings that all return 0 hash code will be handled by only one thread). Are you sure that your threads should be used to compute your streams in parallel? In case of a web application your threads are used to serve your HTTP clients, so you don’t want those threads to be used for anything else, including parallel streams. The same goes for threads that are used for SQL transactions. Threads are precious resources.","title":"The Stream API","component":"reference","version":"feature-spring","name":"the-stream-api","url":"/reference/feature-spring/java/api/the-stream-api.html","titles":[{"text":"Map/Filter/Reduce algorithm implementation in JDK","hash":"_mapfilterreduce_algorithm_implementation_in_jdk","id":1},{"text":"The Stream API","hash":"_the_stream_api","id":2},{"text":"The Collectors API","hash":"_the_collectors_api","id":3},{"text":"Building a Stream from Data in Memory","hash":"_building_a_stream_from_data_in_memory","id":4},{"text":"Converting a For Loop to a Stream","hash":"_converting_a_for_loop_to_a_stream","id":5},{"text":"Reducing Data to compute Statistics","hash":"_reducing_data_to_compute_statistics","id":6},{"text":"Collecting Data from Streams to create Lists/Sets/Maps","hash":"_collecting_data_from_streams_to_create_listssetsmaps","id":7},{"text":"Parallelism in the Stream API","hash":"_parallelism_in_the_stream_api","id":8},{"text":"Getting the best performance gains from parallel ⚪ Stream<T>","hash":"_getting_the_best_performance_gains_from_parallel_streamt","id":9},{"text":"Fork/Join Framework implementation of parallel ⚪ Stream<T>","hash":"_forkjoin_framework_implementation_of_parallel_streamt","id":10},{"text":"Choosing the right sources of data to efficiently go parallel","hash":"_choosing_the_right_sources_of_data_to_efficiently_go_parallel","id":11}]},"10":{"id":10,"text":"Monolithic Architecture Entire application is constructed as a unified, standalone unit. It is decomposed internally into layers: Presentation Business Logic Data Access SOA (Service Oriented Architecture) also known as Centralized Architecture Application is constructed with multiple services interacting with a centralized software component (Enterprise Service Bus) to make traditional Monolithic less burden and loosely coupled. These services communicate with one another via SOAP (XML with Envelope usually consisting of Header and Body). Microservice Architecture Application is constructed with compact, autonomous, and loosely connected services. These services communicate with one another via REST. It is type of Distributed System. Microservices are about decomposing the system into more discrete units of work. Decomposition Breaking software problem into smaller pieces that are easier to understand and solve. Microservices embrace the concept of Protocol-Aware Heterogeneous Interoperability to handle all communication: Protocol-Aware means that every call within the service boundaries are solved via REST over HTTP Heterogeneous Interoperability means that we can integrate with services implemented in different programming languages In a pure Microservice Architecture each unit of work can be called from any other unit of work within the system. While smaller artifacts make development easier, deployments can become a nightmare. Continuous Delivery model should be built early in the process. Complexity It will dramatically cost you time and money as you move from a few deployed artifacts to many. In addition to the deployment complexity, determining where all the code lives and operates can increase the complexity and the costs associated with it. Distribution Tax There is a dramatic increase in network communications between the individual services as their number grows. This increases the total latency of calls across the network as a whole. The increase in call volume tends to risk congestion, causing catastrophic latency across the whole network. A single slow call in the stack can cause thread blocking that impacts other client calls. Reduction of Reliability As you put more moving parts into a system, there is a decrease in the overall reliability of the system as a whole. It becomes critical to evaluate your most core services and determine if they can withstand system unreliability. Service Design Anti-Patterns: Too fine-grained Not fine-grained enough The key to finding the sweet spot on granularity is to leverage Domain-Driven Design. There is no standard way of documenting RESTful services like there was with WSDL in the SOAP world, so developing common means of service documentation is critical especially in large organizations. In a Microservices world size isn’t as critical as operations. A Microservice handles one set of related functions with little or no cross-domain operations. The API layer is a pure proxy. If you find your API layer is doing transformations or executing logic you’re doing it wrong. The API layer is used to shield the outside world or your clients from knowing the structure, organization, or even what exact service is exposing a specific operation. A passive API is a passive API - no exceptions. This means we cannot introduce breaking API changes. Instead, versioning should be leveraged. Outbound Edge Services Expose your client’s specific needs to the outside world. Not every client that consumes your service needs the same data payload (e.g. PC vs Mobile). Inbound/Translation Edge Services Abstract you from third party dependencies. You can either call the APIs of the third party directly or build an Edge Service that you own to interact with the third party. Cloud Computing Pattern of globally distributing systems to provide increased uptime, increased scalability and increased distribution. Cloud Infrastructure can be: Public - delivered via the internet and shared across organizations Private - dedicated solely to your organization Hybrid - any environment that uses both public and private clouds The Twelve-Factor App principles are a collection of best practices for building Microservices-Based Cloud-Native applications. You can build Monolithic Cloud-Native application, and you can build Microservices that are not capable of moving to the cloud at all. In a Microservice Architecture, each application is independent of every other application in the system. As such, when an individual service comes under load it can be individually scaled. Traditional strategy of Monolith Architecture is to scale for the busiest day every day. In a well-defined Microservice Architecture, you can build your system for an average day and allow scalability to accommodate increases or decreases in traffic. Gridlock can occur: when services are under greater load and latency increases. While calls are waiting for responses, delays can become unbearable. When this occurs, there can be a catastrophic failure of the entire system due to circular calls (when a calling service is subsequently called by some downstream service) Gridlock can be controlled with: Circuit Breaker - a pattern in which a standard flow is built through application, and as latency increases and timeouts begin to occur, the circuit is broken and default behavior is executed. While you may suffer from reduced functionality of your system (e.g. search does not work, but application itself do), it’s often better to do this than to suffer a complete failure Strong Timeout Logic throughout the system One of the best strategies for dealing with reducing latency in Microservices is to not rely on a purely synchronous communication model. We are impatient by nature, and we seem to always want systems that have immediate feedback (synchronous operations). But it is not always needed. Many times we can simply defer the processing to occur in an asynchronous manner. When we do this, we reduce the latency constraints on the functions that actually are required to be executed in real time. When moving to asynchronous operations, you need to take care to handle error states correctly and recover from them. If messages cannot be processed for any reason, you cannot simply ignore them. Dead letter queues must be monitored and action must be taken to process the messages even if it’s manual processing. Traditional systems aimed for ACID model which provides a consistent system: Atomic - either succeeds completely or fails completely Consistent - constraints of underlying datastore are enforced Isolated - cannot be read by other transactions until in a specific state based on isolation rules Durable - once saved, guaranteed to be in the datastore until modified In Microservices Architecture, we embrace BASE model which provides high availability: Basically Available - availability of data is achieved by spreading and replicating it across the nodes of the database cluster Soft State - developers are responsible for consistency Eventually Consistent - at some point it will be achieved. Data reads are still possible (even though they might not reflect the reality) In a Microservices Architecture, you need to identify where you truly need ACID transactions and wrap service boundaries around those operations. Just as SQL databases are almost uniformly ACID compliant, some NoSQL databases also tend to conform to BASE principles like MongoDB, Cassandra and Redis. When an issue arises in a Microservice Architecture, it can become very difficult to see all the moving parts. Tracing Concept of creating a unique token called a trace and using that trace in all internal logging events for that call stack. Distributed Tracing across a Distributed System is achieved when each service uses the trace and then passes it downstream to all the service calls it makes. The single most effective way to be successful in a Microservice Architecture is to build it into your culture. A DevOps culture is a perfect fit, because the two compliment each other’s strengths while mitigating the weaknesses. DevOps aims to bring the conversation between development and operations into the same sphere. Most of the issues from Microservices can be seen as operational issues (e.g. Distribution Tax which needs to be monitored).","title":"Microservices","component":"reference","version":"feature-spring","name":"microservices","url":"/reference/feature-spring/java/concepts/microservices.html","titles":[{"text":"Architectures: Monolithic vs SOA vs Microservice","hash":"_architectures_monolithic_vs_soa_vs_microservice","id":1},{"text":"Microservices","hash":"_microservices","id":2},{"text":"Costs to pay for moving to Microservice Architecture","hash":"_costs_to_pay_for_moving_to_microservice_architecture","id":3},{"text":"Service Design","hash":"_service_design","id":4},{"text":"The API layer","hash":"_the_api_layer","id":5},{"text":"Edge Services","hash":"_edge_services","id":6},{"text":"Cloud-Native","hash":"_cloud_native","id":7},{"text":"Scalability","hash":"_scalability","id":8},{"text":"Gridlock situations","hash":"_gridlock_situations","id":9},{"text":"Communication Models: Synchronous vs Asynchronous","hash":"_communication_models_synchronous_vs_asynchronous","id":10},{"text":"Database Transaction Models: ACID vs BASE","hash":"_database_transaction_models_acid_vs_base","id":11},{"text":"Logging and Distributed Tracing","hash":"_logging_and_distributed_tracing","id":12},{"text":"Embracing DevOps","hash":"_embracing_devops","id":13}]},"11":{"id":11,"text":"Originally published in 2013. It is available at reactivemanifesto.org Reactive Manifesto talks about the system being Responsive The system responds in a timely manner. Responsiveness is the cornerstone of usability and utility. Responsiveness also means problems may be detected quickly and dealt with effectively. Responsive systems provide rapid and consistent response times. Consistent behavior simplifies error handling, builds end user confidence, and encourages further action. Resilient System stays responsive in the face of failure. Resilience is achieved by replication, containment, isolation, and delegation. Failures are contained within each component. Parts of the system can fail, without compromising the system as a whole. Recovery of each component is delegated to another. High-availability is ensured by replication where necessary. Elastic The system stays responsive under varying workload. Reactive Systems can react to changes in the input rate by increasing or decreasing resources allocated to service inputs. Reactive Systems achieve elasticity in a cost-effective way on commodity hardware and software platforms. Message Driven Reactive Systems rely on asynchronous message passing to establish a boundary between components. This ensures loose coupling, isolation and location transparency. Message passing enables load management, elasticity, and flow control. Location transparent messaging makes management of failures possible. Non-blocking communication allows recipients to only consume resources while active, leading to less system overhead. Reactive Programming is a useful programming paradigm focused on non-blocking, asynchronous execution - a key characteristic of Reactive Systems. Reactive does NOT equal fast! A typical CRUD type application will not see much, if any performance improvement. Reactive can improve computing efficiency, so it is best used for streaming type applications. The immutable nature of Reactive Applications can help with Application quality. Interactive programs work at their own pace and mostly deal with communication, while reactive programs only work in response to external demands and mostly deal with accurate interrupt handling. Features of Reactive Programming Asynchronous Events are captured asynchronously. A function is defined to execute when an event is emitted. Another function is defined if an error is emitted. Another function is defined when complete is emitted. This can be a difficult paradigm to adjust to when first getting started! Non-Blocking In Blocking, the code will stop and wait for more data (e.g. reading from disk, network, etc.) Non-Blocking will process available data, ask to be notified when more is available, then continue. Back Pressure The ability of the Subscriber to throttle data. Failures as Messages Exceptions are not thrown in a traditional sense. Would break processing of stream. Exceptions are processed by a handler function. Data Streams Reactive Programming focuses on processing streams of data. Reactive Streams API is adopted by: Akka Streams MongoDB Ratpack Reactive Rabbit Project Reactor (Spring 5) RxJava Slick 3.0 Vert.x 3.0 Cassandra ElasticSearch Kafka Play Reactive Streams API is part of the Java 9. Reactive Streams API is a set of 4 Interfaces which define the API: ⚪ Publisher - a producer of items (and related control messages) received by ⚪ Subscriber. Each current ⚪ Subscriber receives the same items (via method onNext) in the same order, unless drops or errors are encountered. If a ⚪ Publisher encounters an error that does not allow items to be issued to a ⚪ Subscriber, that ⚪ Subscriber receives onError, and then receives no further messages. Otherwise, when it is known that no further messages will be issued to it, a ⚪ Subscriber receives onComplete. ⚪ Subscriber - a receiver of messages. ⚪ Subscription - message control linking a ⚪ Publisher and ⚪ Subscriber. ⚪ Subscriber receive items only when requested, and may cancel at any time. The methods in this interface are intended to be invoked only by their ⚪ Subscriber. Usages in other contexts have undefined effects. ⚪ Processor - a component that acts as both a ⚪ Subscriber and ⚪ Publisher","title":"Reactive Programming","component":"reference","version":"feature-spring","name":"reactive-programming","url":"/reference/feature-spring/java/concepts/reactive-programming.html","titles":[{"text":"Reactive Manifesto","hash":"_reactive_manifesto","id":1},{"text":"Reactive Programming","hash":"_reactive_programming","id":2},{"text":"Reactive Streams API","hash":"_reactive_streams_api","id":3}]},"12":{"id":12,"text":"Welcome to DEV Cheat Sheets, a personal collection of notes and quick references gathered from courses, books, and other various learning resources. This repository serves as a convenient reference guide for myself and others. These notes reflect my own learning journey and are intended to be a helpful resource for anyone looking to refresh their memory or gain insights into key programming concepts. I mark Java types with the below symbols: 🔴 final class 🟢 class 🟠 abstract class ⚪ interface ☕ Java API Lambda Expression The Stream API Concepts Microservices Effective Java Summary","title":"DEV Cheat Sheets","component":"reference","version":"","name":"index","url":"/reference/index.html","titles":[{"text":"Legend","hash":"_legend","id":1},{"text":"Resources","hash":"_resources","id":2},{"text":"External Resources","hash":"_external_resources","id":3}]},"13":{"id":13,"text":"Functional Interface Interface that has only one abstract method. These do not count: Default methods Static methods 🟢 Object methods In ⚪ Collection you may find 🟢 Object methods which are changing the documentation of those methods. However, ⚪ Collection itself is not a Functional Interface as it has many abstract methods. Lambda Expression Implementation of a Functional Interface. Lambda Expression is not another way of writing instances of anonymous classes. Anonymous class may implement any kind of Interface, not necessarily Functional, and it can extend any kind of class, whether it is a concrete class or an abstract class. Sometimes people say that a Lambda Expression is an anonymous method. Java is object-oriented programming language and thanks to introduction of Lambda Expression some patterns from functional programming have been added to it. Functional Interface may be annotated with the special annotation called @FunctionalInterface, but it’s not mandatory. This is for backward compatibility (e.g. since @FunctionalInterface is optional, ⚪ Runnable can be a Functional Interface). How to implement a Functional Interface in 3 easy steps: copy and paste a block of parameters of an abstract method: () draw an arrow operator: → provide an implementation which is going to fit your needs The java.util.function package is organized in 4 categories: ⚪ Suppliers - do not take any argument and return an object of T type. Supplier is used in the generate operation of the Stream API public interface Supplier { T get(); } ... Supplier supplier = () -> \"Hello!\"; ⚪ Consumers - consume an object of T type and do not return anything. Consumer is used in the forEach operation of the Stream API public interface Consumer { void accept(T t); } ... Consumer consumer = s -> System.out.println(s); ⚪ Predicates - take an object of T type, test it and return boolean. Predicate is used in the filter operation of the Stream API public interface Predicate { boolean test(T t); } ... Predicate predicate = s -> s.isEmpty(); ⚪ Functions - take an object of T type and return an object of R type. Function is used in the map operation of the Stream API public interface Function { R apply(T t); } ... Function function = date -> date.getMonth(); Functional Interfaces which are not part of java.util.function package: ⚪ Runnable - does not take any argument and does not return anything. Defined to model task in Java concurrent programming public interface Runnable { void run(); } ... Runnable alert = () -> System.out.println(\"I am Groot\"); ⚪ Comparator - takes two objects of T type, compares them and returns int. A comparison function, which imposes a total ordering on some collection of objects public interface Comparator { int compare(T o1, T o2); } ... Comparator comparator = (s1, s2) -> s1.compareTo(s2); Lambda Expressions are compiled using specific bytecode instruction called invokedynamic introduced in Java 7. Performance is 60x better in Lambda Expressions than Anonymous Classes. It can be even faster. Just avoid autoboxing and unboxing when writing Lambda Expressions. If you want to improve the performance you need to use specialized Interfaces for primitive types: Bad Practice: autoboxing and unboxing BiFunction function1 = (i1, i2) -> Math.max(i1, i2); int max1 = function1.apply(10, 20); Best Practice: use specialized Interfaces for primitive types IntBinaryOperator function2 = (i1, i2) -> Math.max(i1, i2); int max2 = function2.applyAsInt(10, 20); Another example would be the creation of ⚪ Comparator for the following list: List strings = Arrays.asList(\"one\", \"two\", \"three\", \"four\", \"five\"); Bad Practice: autoboxing and unboxing Comparator cmp1 = (s1, s2) -> Integer.compare(s1.length(), s2.length()); strings.sort(cmp1); Best Practice: use specialized Interfaces for primitive types ToIntFunction toLength = s -> s.length(); Comparator cmp2 = Comparator.comparingInt(toLength); strings.sort(cmp2); Lambda Expressions can be chained by using default methods of the Interface. Creating a Consumer by chaining two Consumers Consumer c1 = s -> System.out.println(\"c1 consumes \" + s); Consumer c2 = s -> System.out.println(\"c2 consumes \" + s); Consumer c3 = c1.andThen(c2); c3.accept(\"Hello\"); // Prints c1 consumes Hello c2 consumes Hello Creating a Predicate by chaining two Predicates Predicate isNull = s -> s == null; Predicate isEmpty = s -> s.isEmpty(); Predicate notNullAndNotEmpty = isNull.negate().and(isEmpty.negate()); System.out.println(\"For null = \" + notNullAndNotEmpty.test(null)); System.out.println(\"For empty = \" + notNullAndNotEmpty.test(\"\")); System.out.println(\"For Hello = \" + notNullAndNotEmpty.test(\"Hello\")); // Prints For null = false For empty = false For Hello = true Creating a Comparator by chaining two Comparators (sort by name descending, then by age descending): User sarah = new User(\"Sarah\", 28); User james = new User(\"James\", 35); User mary = new User(\"Mary\", 33); User john1 = new User(\"John\", 24); User john2 = new User(\"John\", 25); List users = Arrays.asList(sarah, james, mary, john1, john2); Comparator cmpName = Comparator.comparing(user -> user.getName()); Comparator cmpAge = Comparator.comparingInt(user -> user.getAge()); Comparator comparator = cmpName.thenComparing(cmpAge); Comparator reversed = comparator.reversed(); users.sort(reversed); users.forEach(user -> System.out.println(user)); // Prints User{name='Sarah', age=28} User{name='Mary', age=33} User{name='John', age=25} User{name='John', age=24} User{name='James', age=35}","title":"Lambda Expression","component":"reference","version":"","name":"lambda-expression","url":"/reference/java/api/lambda-expression.html","titles":[{"text":"Implementing Functional Interfaces with Lambda Expression","hash":"_implementing_functional_interfaces_with_lambda_expression","id":1},{"text":"Creating Lambdas with the JDK","hash":"_creating_lambdas_with_the_jdk","id":2},{"text":"Creating Lambdas with specialized Interfaces","hash":"_creating_lambdas_with_specialized_interfaces","id":3},{"text":"Creating Lambdas by chaining","hash":"_creating_lambdas_by_chaining","id":4}]},"14":{"id":14,"text":"Steps of the Map/Filter/Reduce algorithm: Map Changes the type of the data, does not change the number of elements. The mapping step respects the order of your objects Filter Does not change the type of the data, changes the number of elements. You may end up with no data Reduce Produces a result If we want to create an efficient implementation of the Map/Filter/Reduce algorithm, it should not duplicate any data. It should work in the same way, performance wise, as the iterative pattern. Map/Filter/Reduce algorithm implemented by the Collection API would cause duplication of the data (storing the data in an intermediate structure) The Stream API Implementation of the Map/Filter/Reduce algorithm that does not duplicate any data and that does not create any load on the CPU or memory Stream by definition is an empty object - it does not carry any kind of data Every time you call a method on a Stream that returns another Stream, it is going to be a new Stream object Difference between the Stream API and iterative approach is that in the Stream API we describe the computation and not how this computation should be conducted. This is none of my business, this is the business of the API Reduce method triggers the computation of the elements, and those elements are going to be taken one-by-one, first mapped, then filtered and computed if they pass the filtering step. Using Streams is about creating pipelines of operations. Intermediate operation (Map/Filter) Operation that creates a Stream (it does not do anything, it does not process any data) Terminal operation (Reduce) Operation that produces a result (it will trigger the computation of the elements) If you have a pattern using a Stream that does not end up with a Terminal operation, your pattern is not going to process any data. It will be useless code You are not allowed to process the same Stream twice. This is why it is completely useless to create intermittent variables to store the Streams. You should inline it The Stream API gives you 4 interfaces: ⚪ Stream - a sequence of elements supporting sequential and parallel aggregate operations Modifier and Type Method Description Stream map(Function mapper) Returns a stream consisting of the results of applying the given function to the elements of this stream. IntStream mapToInt(ToIntFunction mapper) Returns an ⚪ IntStream consisting of the results of applying the given function to the elements of this stream. Stream flatMap(Function> mapper) Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element long count = cities.stream() (1) .flatMap(city -> city.getPeople().stream()) (2) .count(); (3) 1 3 cities 2 With 3 people each 3 Returns 9 Stream filter(Predicate predicate) Returns a stream consisting of the elements of this stream that match the given predicate. Optional reduce(BinaryOperator accumulator) Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an 🔴 Optional describing the reduced value, if any. See Reducing Data to compute Statistics. T reduce(T identity, BinaryOperator accumulator) Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value. See Reducing Data to compute Statistics. R collect(Collector collector) Performs a mutable reduction operation on the elements of this stream using a ⚪ Collector. See The Collectors API and Collecting Data from Streams to create Lists/Sets/Maps. Stream distinct() Returns a stream consisting of the distinct elements (according to Object#equals(Object)) of this stream. Stream sorted() Returns a stream consisting of the elements of this stream, sorted according to natural order. long count() Returns the count of elements in this stream. Optional min(Comparator comparator) Returns the minimum element of this stream according to the provided ⚪ Comparator. Optional max(Comparator comparator) Returns the maximum element of this stream according to the provided ⚪ Comparator. Object[] toArray() Returns an array containing the elements of this stream. A[] toArray(IntFunction generator) Returns an array containing the elements of this stream, using the provided generator function to allocate the returned array, as well as any additional arrays that might be required for a partitioned execution or for resizing. For example toArray(String[]::new) will return String[]. ⚪ IntStream - int primitive specialization of ⚪ Stream Modifier and Type Method Description OptionalInt min() Returns an 🔴 OptionalInt describing the minimum element of this stream, or an empty optional if this stream is empty. OptionalInt max() Returns an 🔴 OptionalInt describing the maximum element of this stream, or an empty optional if this stream is empty. OptionalDouble average() Returns an 🔴 OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty. int sum() Returns the sum of elements in this stream. IntSummaryStatistics summaryStatistics() Returns an 🟢 IntSummaryStatistics describing various summary data about the elements of this stream. ⚪ LongStream - long primitive specialization of ⚪ Stream. It has similar methods to ⚪ IntStream ⚪ DoubleStream - double primitive specialization of ⚪ Stream. It has similar methods to ⚪ IntStream 🔴 Collectors - implementations of ⚪ Collector that implement various useful reduction operations, such as accumulating elements into collections, summarizing elements according to various criteria, etc. Type parameters of ⚪ Collector: T - the type of input elements to the reduction operation A - the mutable accumulation type of the reduction operation (often hidden as an implementation detail) R - the result type of the reduction operation Modifier and Type Method Description static Collector> toList() Returns a ⚪ Collector that accumulates the input elements into a new ⚪ List, in encounter order. static Collector> toUnmodifiableList() Returns a ⚪ Collector that accumulates the input elements into an unmodifiable ⚪ List, in encounter order. static Collector> toSet() Returns a ⚪ Collector that accumulates the input elements into a new ⚪ Set. static Collector> toUnmodifiableSet() Returns a ⚪ Collector that accumulates the input elements into an unmodifiable ⚪ Set. static > Collector toCollection(Supplier collectionFactory) Returns a ⚪ Collector that accumulates the input elements into a new ⚪ Collection, in encounter order. For example toCollection(MyCollection::new) will return 🟢 MyCollection. static Collector joining() Returns a ⚪ Collector that concatenates the input elements into a 🔴 String, in encounter order. The string won’t be delimited. static Collector joining(CharSequence delimiter) Returns a ⚪ Collector that concatenates the input elements, separated by the specified delimiter, in encounter order. static Collector joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix) Returns a ⚪ Collector that concatenates the input elements, separated by the specified delimiter, with the specified prefix and suffix, in encounter order. static Collector>> groupingBy(Function classifier) Returns a ⚪ Collector implementing a \"group by\" operation on input elements of type T, grouping elements according to a classification function, and returning the results in a ⚪ Map. static Collector> groupingBy(Function classifier, Collector downstream) Returns a ⚪ Collector implementing a cascaded \"group by\" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream ⚪ Collector. static Collector counting() Returns a ⚪ Collector accepting elements of type T that counts the number of input elements. static Collector summingInt(ToIntFunction mapper) Returns a ⚪ Collector that produces the sum of an integer-valued function applied to the input elements. For example summingInt(City::getPopulation) will return population of all cities. Creating a Stream from Arrays: 🔴 Arrays#stream(T[] array) - returns a sequential Stream with the specified array as its source ⚪ Stream#of(T…​ values) - returns a sequential ordered stream whose elements are the specified values Stream streamOfStrings = Stream.of(\"abcd\", \"efgh\"); Creating a Stream from a Text File: 🔴 Files#lines(Path path) - read all lines from a file as a Stream Path path = Path.of(\"src/main/resources/first-names.txt\"); (1) try (Stream lines = Files.lines(path)) { long count = lines.count(); (2) } catch (IOException e) { e.printStackTrace(); } 1 File with 200 lines 2 Returns 200 Creating a Stream from a RegEx: 🔴 Pattern#splitAsStream(CharSequence input) - creates a Stream from the given input sequence around matches of this pattern. String sentence = \"the quick brown fox jumps over the lazy dog\"; (1) String[] words = sentence.split(\" \"); long count1 = Arrays.stream(words).count(); (3) (2) long count2 = Pattern.compile(\" \").splitAsStream(sentence).count(); (3) 1 Bad Practice: we create an array and store it in memory 2 Best Practice: we do not create an array when we create a ⚪ Stream from 🔴 Pattern 3 Returns 9 Creating an ⚪ IntStream (Stream of ASCII Codes) from a String: 🔴 String#chars() - Returns an ⚪ IntStream of int zero-extending the char values from this sequence. String sentence = \"the quick brown fox jumps over the lazy dog\"; sentence.chars() .mapToObj(codePoint -> Character.toString(codePoint)) (1) .filter(letter -> !letter.equals(\" \")) .distinct().sorted().forEach(System.out::print); 1 Converts ⚪ IntStream to ⚪ Stream Selecting elements of a Stream: IntStream.range(0, 30) .skip(10) (1) .limit(10) (2) .forEach(index -> System.out.print(index + \" \")); (3) 1 Skip first 10 elements 2 Take next 10 elements after skip 3 Prints \"10 11 12 13 14 15 16 17 18 19\" Closing a ⚪ Stream with a ⚪ Predicate: takeWhile - consume elements of the ⚪ Stream until ⚪ Predicate is true Stream.>iterate(ArrayList.class, c -> c.getSuperclass()) .takeWhile(c -> c != null) .forEach(System.out::println); // Prints: class java.util.ArrayList class java.util.AbstractList class java.util.AbstractCollection class java.lang.Object dropWhile - consume remaining elements of the ⚪ Stream after ⚪ Predicate becomes false Stream.>iterate(ArrayList.class, c -> c.getSuperclass()) .dropWhile(c -> !c.equals(AbstractCollection.class)) .forEach(System.out::println); // Prints class java.util.AbstractCollection class java.lang.Object null Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"java.lang.Class.getSuperclass()\" because \"c\" is null The following: int sum = 0; int count = 0; for (Person person : people) { if (person.getAge() > 20) { count++; sum += person.getAge(); } } double average = 0d; if (count > 0) { average = sum / count; } can be converted into: double average = people.stream() .mapToInt(Person::getAge) .filter(age -> age > 20) .average().orElseThrow(); The Stream API always computes one thing. Never sacrifice the readability of your code to the performance. The performance here is measured in nanoseconds: double totalAmount = 0; int frequentRenterPoints = 0; String statement = composeHeader(); for (Rental rental : rentals) { totalAmount += computeRentalAmount(rental); frequentRenterPoints += getFrequentRenterPoints(rental); statement += computeStatementLine(rental); } statement += composeFooter(totalAmount, frequentRenterPoints); can be converted into: double totalAmount = rentals.stream() .mapToDouble(this::computeRentalAmount) .sum(); int frequentRenterPoints = rentals.stream() .mapToInt(this::getFrequentRenterPoints) .sum(); String statement = composeHeader(); statement += rentals.stream() .map(this::computeStatementLine) .collect(Collectors.joining()); statement += composeFooter(totalAmount, frequentRenterPoints); Forget about processing your data in one pass (unless you are doing an SQL request). Most of the time when you have a for loop or when you have a ⚪ Stream, the JVM will optimize that for you and get rid of your for loop, get rid of your iteration, and you will have a zero pass of your data, just inline code, extremely performant, and extremely efficient. See Fine-grained optimizations provided by JIT Compiler in Java ⚪ Stream#reduce(T identity, BinaryOperator accumulator) adds the Identity Element before the elements of the ⚪ Stream. If you have an empty ⚪ Stream, it will return Identity Element If you have only one element in the ⚪ Stream, it will return the reduction of the Identity Element and this only element: Some reduction operations do not have any Identity Element (in case for the ⚪ IntStream#min(), the ⚪ IntStream#max(), the ⚪ IntStream#average() and ⚪ Stream#reduce(BinaryOperator accumulator). 🔴 Optional are used by the Stream API, because in cases where we have an empty ⚪ Stream without any Identity Element we don’t have any result. Collector Complex object used to reduce a Stream. Can be used to gather data in collections and maps - it is called as reduction in a \"mutable container\" or mutable reduction Downstream Collector Collector that is passed to 🔴 Collectors#groupingBy(Function classifier, Collector downstream) which is applied to the streaming of the list of values The Collector API Uses the Stream#collect(Collector collector) that takes ⚪ Collector implementation as a parameter: Use 🔴 Collectors class and its factory methods You can create your own collectors, but it is complex and tricky // Bad Practice List people = new ArrayList<>(); List peopleFromNewYork = new ArrayList<>(); (1) people.stream() .filter(p -> p.getCity().equals(\"New York\")) .forEach(p -> peopleFromNewYork.add(p)); // Best Practice List people = new ArrayList<>(); List peopleFromNewYork = people.stream() .filter(p -> p.getCity().equals(\"New York\")) .collect(Collectors.toList()); (2) 1 Creating a ⚪ List to store the result 2 Using ⚪ Collector to store the result in ⚪ List You can make a regular ⚪ Stream a parallel ⚪ Stream in two ways: by calling ⚪ BaseStream>#parallel() method on existing ⚪ Stream by calling ⚪ Collection#parallelStream() method instead of calling ⚪ Collection#stream() These intermediate operations are going to set a special bit in the ⚪ Stream that will trigger the computations in parallel when you call your terminal operation. After terminal operation is called, the ⚪ Stream implementation will check this special bit: if it is set to 1, then the computation will happen in parallel and will trigger special algorithms for that otherwise it will be processed sequentially JMH (Java Microbenchmark Harness) Standard tool to measure the performances of your Java code. You can find JMH Template project here. To proper measure the performance of a Java application you first need to run it a certain number of times (warmup), because within JVM there is a special just-in-time C2 compiler that can optimize your code a lot. Beware, you’ll have two unboxing and one boxing here (which have an impact on performance!): Integer j = 3; Integer l = 4; Integer k = j + l; Similarly, iterating and doing some operation over int[] will be much faster than over 🔴 Integer[] (due to unboxing and boxing). Each physical core of the CPU access two levels of cache, which are private: L1 - the first level of cache (small, very fast) L2 - the second level of cache (bigger, little slower). L3 - the third level of cache is shared by all physical cores (bigger, little slower than L2). Main memory lives outside the CPU and is accessed much slower than L3: How does a core of CPU access data from the main memory? This data will have to be transferred first to the L3 cache, then to the L2 cache, and then to the L1 cache before being available by this core of CPU. The memory is not read in a random way. If a core of CPU wants to access just an int, it will transfer line of memory, not just an int. The memory is transferred line by line from the main memory to the different levels of cache. Each line is typically 64 bytes (8 long or 16 int). When we have an array of references to the instance of the 🔴 Integer which are going to hold the values: In one read operation we are only going to transfer the references to this object. And then to get all the values it may be several read to maximum 16 reads. This is called Pointer Chasing which you need to avoid. To get all the values, we have to follow pointers to other places in the memory which has a cost due to the way that data is transferred from the main memory to the cache of the CPU. Iterating on a 🟢 LinkedList will imply much more Pointer Chasing than iterating on an 🟢 ArrayList. 🟢 LinkedList does not store references to the 🔴 Integer in an array. It stores them in a linked list of node objects. So first, you need to get the first reference to the first node object, and then you need to follow two pointers: the first one to the next node object and the second one to the 🔴 Integer itself. Cache Miss Whenever the core of a CPU needs a value and that value turns out not to be in the cache. During the Cache Miss, if the value is not in the L2 cache or L3 cache, then the CPU may decide to suspend the thread that is executing this computation and replace it by another thread. This is a much bigger performance hit than just Pointer Chasing, but it is still a consequence of Pointer Chasing. This is why 🟢 LinkedList is called cache-unfriendly structure, whereas 🟢 ArrayList is called cache-friendly structure. Fork/Join Framework has been introduced in Java 7 and slightly modified in Java 8. Going parallel means that this task is going to be split into subtasks and each subtask is going to produce a partial result (fork step). When those partial results have been computed, they are going to be sent back to the main task that has the responsibility of joining them (join step). All those tasks are sent to a special pool of thread called Fork/Join Pool and this pool has special capabilities to enable the computations of those subtasks in parallel. Fork/Join Framework decides whether the task is too big and should be split, or small enough and should be computed. Fork/Join Pool Is a pool of threads, instance of the 🟢 ForkJoinPool created when the JVM is created there is only one common 🟢 ForkJoinPool in the JVM since Java 8 it is used for all the parallel streams the size is fixed by the number of virtual cores (not necessarily a good thing) and can be changed with java.util.concurrent.ForkJoinPool.common.parallelism system property Suppose we have a common Fork/Join Pool with 2 threads in it. Each thread is also associated with a waiting queue that can accept tasks. Suppose we have a task to compute: The first step is to split this task (A) into subtasks (A11, A12). Since parent task (A) is waiting for the partial results computed by its subtasks, it will be put at the end of the waiting queue thus freeing the first thread 1️⃣ that is going to be able to handle the task A11. Since second thread 2️⃣ is not working, it is able to steal some tasks from another waiting queue. So second thread 2️⃣ will steal a task A12 from first thread 1️⃣, that is busy with A11 task. All threads will be busy. Fork/Join Framework implements a trick that is quite classical in concurrent programming that is called work stealing. Once all subtasks will finish computation, the results will be passed to A task which will apply the reduce operator. You need to bench your own computation to be able to tell where your sweet spot is going to be in your use case. E.g. computing the sum of 10 integers in array is much faster sequentially than in parallel, however computing the sum of several millions integers in array will be much faster in parallel. You also need to check that on a machine that is as close as possible to your production machine. Synchronization A feature within the Java language which prevents two threads from executing the same piece of code. In the Stream API there are operations (intermediate and terminal) that need to exchange data or exchange information with the other threads and perform hidden synchronization which is a bottleneck, e.g. ⚪ Stream#findFirst() (⚪ Stream#findAny() will provide you much better performance in parallel) and ⚪ Stream#limit(long maxSize) methods. If your ⚪ BinaryOperator from ⚪ Stream#reduce method is not associative, then you are going to compute wrong results in both: sequential and parallel computing. In parallel, you can also get different results each time. Associative Means that first computation gives out the same result as the second computation. Example: stream.reduce(0, (i1, i2) -> i1*i1 + i2*i2); (1) (2) (3) 1 Given: [1, 1, 1, 1] 2 It should return 4 3 Since it is not associative ⚪ BinaryOperator, it will compute 2 (1+1), then 5 (4+1), and it will return 26 (25+1) You can display the thread executing your parallel stream with: Set threadNames = ConcurrentHashMap.newKeySet(); stream.parallel() .(...) .peek(i -> threadNames.add(Thread.currentThread().getName())) .(...); threadNames.forEach(System.out::println); You can execute a parallel stream in a custom 🟢 ForkJoinPool, display the threads executing your parallel stream and count the number of tasks each thread executed with: Map threadMap = new ConcurrentHashMap<>(); Callable task = () -> { int result = stream.parallel() .(...) .peek(i -> threadMap.merge(Thread.currentThread().getName(), 1L, Long::sum)) .(...); return result; }; ForkJoinPool forkJoinPool = new ForkJoinPool(4); (1) ForkJoinTask submit = forkJoinPool.submit(task); submit.get(); threadMap.forEach((name, n) -> System.out.println(name + \" -> \" + n)); forkJoinPool.shutdown(); 1 Custom 🟢 ForkJoinPool with 4 threads The Fork step in Fork/Join Framework works best based on two assumptions: The number of elements is known before processing them. These sources of data do not meet this condition: ⚪ Iterator 🔴 Pattern Lines of a text file Reaching the center of the data must be easy, reliable and efficient. This source of data does not meet this condition: 🟢 LinkedList Fork/Join Framework splits the array in two pieces and doesn’t know if there is the same amount of data in the first half and in the second half. This information is not available, unless you count all the elements, one by one, in each half. The Framework doesn’t do that, because it would be too costly. Those two halves are going to be split again, and again, and again. Some of the segments of this array are going to be empty. Become higher and higher as the number of splitting increases. This is a problem with ⚪ Set-like structures. Sizeable The number of elements of the source is known. All the collections and the arrays are sizeable, but all the patterns, lines and iterators are not sizeable. Subsizeable The number of elements in both parts of a split source is known. Sets are sizeable, but they are not subsizeable. Processing data from a ⚪ List is much faster than the processing data from a ⚪ Set because iterating over the elements of a ⚪ List is faster than iterating over the elements of a ⚪ Set. Going parallel as a ⚪ List will bring you more performance gain than going parallel in a ⚪ Set. You may have data to process that, in fact, is not well spread over all the buckets of the array that is backing your ⚪ Set (e.g. lines of strings that all return 0 hash code will be handled by only one thread). Are you sure that your threads should be used to compute your streams in parallel? In case of a web application your threads are used to serve your HTTP clients, so you don’t want those threads to be used for anything else, including parallel streams. The same goes for threads that are used for SQL transactions. Threads are precious resources.","title":"The Stream API","component":"reference","version":"","name":"the-stream-api","url":"/reference/java/api/the-stream-api.html","titles":[{"text":"Map/Filter/Reduce algorithm implementation in JDK","hash":"_mapfilterreduce_algorithm_implementation_in_jdk","id":1},{"text":"The Stream API","hash":"_the_stream_api","id":2},{"text":"The Collectors API","hash":"_the_collectors_api","id":3},{"text":"Building a Stream from Data in Memory","hash":"_building_a_stream_from_data_in_memory","id":4},{"text":"Converting a For Loop to a Stream","hash":"_converting_a_for_loop_to_a_stream","id":5},{"text":"Reducing Data to compute Statistics","hash":"_reducing_data_to_compute_statistics","id":6},{"text":"Collecting Data from Streams to create Lists/Sets/Maps","hash":"_collecting_data_from_streams_to_create_listssetsmaps","id":7},{"text":"Parallelism in the Stream API","hash":"_parallelism_in_the_stream_api","id":8},{"text":"Getting the best performance gains from parallel ⚪ Stream<T>","hash":"_getting_the_best_performance_gains_from_parallel_streamt","id":9},{"text":"Fork/Join Framework implementation of parallel ⚪ Stream<T>","hash":"_forkjoin_framework_implementation_of_parallel_streamt","id":10},{"text":"Choosing the right sources of data to efficiently go parallel","hash":"_choosing_the_right_sources_of_data_to_efficiently_go_parallel","id":11}]},"15":{"id":15,"text":"Monolithic Architecture Entire application is constructed as a unified, standalone unit. It is decomposed internally into layers: Presentation Business Logic Data Access SOA (Service Oriented Architecture) also known as Centralized Architecture Application is constructed with multiple services interacting with a centralized software component (Enterprise Service Bus) to make traditional Monolithic less burden and loosely coupled. These services communicate with one another via SOAP (XML with Envelope usually consisting of Header and Body). Microservice Architecture Application is constructed with compact, autonomous, and loosely connected services. These services communicate with one another via REST. It is type of Distributed System. Microservices are about decomposing the system into more discrete units of work. Decomposition Breaking software problem into smaller pieces that are easier to understand and solve. Microservices embrace the concept of Protocol-Aware Heterogeneous Interoperability to handle all communication: Protocol-Aware means that every call within the service boundaries are solved via REST over HTTP Heterogeneous Interoperability means that we can integrate with services implemented in different programming languages In a pure Microservice Architecture each unit of work can be called from any other unit of work within the system. While smaller artifacts make development easier, deployments can become a nightmare. Continuous Delivery model should be built early in the process. Complexity It will dramatically cost you time and money as you move from a few deployed artifacts to many. In addition to the deployment complexity, determining where all the code lives and operates can increase the complexity and the costs associated with it. Distribution Tax There is a dramatic increase in network communications between the individual services as their number grows. This increases the total latency of calls across the network as a whole. The increase in call volume tends to risk congestion, causing catastrophic latency across the whole network. A single slow call in the stack can cause thread blocking that impacts other client calls. Reduction of Reliability As you put more moving parts into a system, there is a decrease in the overall reliability of the system as a whole. It becomes critical to evaluate your most core services and determine if they can withstand system unreliability. Service Design Anti-Patterns: Too fine-grained Not fine-grained enough The key to finding the sweet spot on granularity is to leverage Domain-Driven Design. There is no standard way of documenting RESTful services like there was with WSDL in the SOAP world, so developing common means of service documentation is critical especially in large organizations. In a Microservices world size isn’t as critical as operations. A Microservice handles one set of related functions with little or no cross-domain operations. The API layer is a pure proxy. If you find your API layer is doing transformations or executing logic you’re doing it wrong. The API layer is used to shield the outside world or your clients from knowing the structure, organization, or even what exact service is exposing a specific operation. A passive API is a passive API - no exceptions. This means we cannot introduce breaking API changes. Instead, versioning should be leveraged. Outbound Edge Services Expose your client’s specific needs to the outside world. Not every client that consumes your service needs the same data payload (e.g. PC vs Mobile). Inbound/Translation Edge Services Abstract you from third party dependencies. You can either call the APIs of the third party directly or build an Edge Service that you own to interact with the third party. Cloud Computing Pattern of globally distributing systems to provide increased uptime, increased scalability and increased distribution. Cloud Infrastructure can be: Public - delivered via the internet and shared across organizations Private - dedicated solely to your organization Hybrid - any environment that uses both public and private clouds The Twelve-Factor App principles are a collection of best practices for building Microservices-Based Cloud-Native applications. You can build Monolithic Cloud-Native application, and you can build Microservices that are not capable of moving to the cloud at all. In a Microservice Architecture, each application is independent of every other application in the system. As such, when an individual service comes under load it can be individually scaled. Traditional strategy of Monolith Architecture is to scale for the busiest day every day. In a well-defined Microservice Architecture, you can build your system for an average day and allow scalability to accommodate increases or decreases in traffic. Gridlock can occur: when services are under greater load and latency increases. While calls are waiting for responses, delays can become unbearable. When this occurs, there can be a catastrophic failure of the entire system due to circular calls (when a calling service is subsequently called by some downstream service) Gridlock can be controlled with: Circuit Breaker - a pattern in which a standard flow is built through application, and as latency increases and timeouts begin to occur, the circuit is broken and default behavior is executed. While you may suffer from reduced functionality of your system (e.g. search does not work, but application itself do), it’s often better to do this than to suffer a complete failure Strong Timeout Logic throughout the system One of the best strategies for dealing with reducing latency in Microservices is to not rely on a purely synchronous communication model. We are impatient by nature, and we seem to always want systems that have immediate feedback (synchronous operations). But it is not always needed. Many times we can simply defer the processing to occur in an asynchronous manner. When we do this, we reduce the latency constraints on the functions that actually are required to be executed in real time. When moving to asynchronous operations, you need to take care to handle error states correctly and recover from them. If messages cannot be processed for any reason, you cannot simply ignore them. Dead letter queues must be monitored and action must be taken to process the messages even if it’s manual processing. Traditional systems aimed for ACID model which provides a consistent system: Atomic - either succeeds completely or fails completely Consistent - constraints of underlying datastore are enforced Isolated - cannot be read by other transactions until in a specific state based on isolation rules Durable - once saved, guaranteed to be in the datastore until modified In Microservices Architecture, we embrace BASE model which provides high availability: Basically Available - availability of data is achieved by spreading and replicating it across the nodes of the database cluster Soft State - developers are responsible for consistency Eventually Consistent - at some point it will be achieved. Data reads are still possible (even though they might not reflect the reality) In a Microservices Architecture, you need to identify where you truly need ACID transactions and wrap service boundaries around those operations. Just as SQL databases are almost uniformly ACID compliant, some NoSQL databases also tend to conform to BASE principles like MongoDB, Cassandra and Redis. When an issue arises in a Microservice Architecture, it can become very difficult to see all the moving parts. Tracing Concept of creating a unique token called a trace and using that trace in all internal logging events for that call stack. Distributed Tracing across a Distributed System is achieved when each service uses the trace and then passes it downstream to all the service calls it makes. The single most effective way to be successful in a Microservice Architecture is to build it into your culture. A DevOps culture is a perfect fit, because the two compliment each other’s strengths while mitigating the weaknesses. DevOps aims to bring the conversation between development and operations into the same sphere. Most of the issues from Microservices can be seen as operational issues (e.g. Distribution Tax which needs to be monitored).","title":"Microservices","component":"reference","version":"","name":"microservices","url":"/reference/java/concepts/microservices.html","titles":[{"text":"Architectures: Monolithic vs SOA vs Microservice","hash":"_architectures_monolithic_vs_soa_vs_microservice","id":1},{"text":"Microservices","hash":"_microservices","id":2},{"text":"Costs to pay for moving to Microservice Architecture","hash":"_costs_to_pay_for_moving_to_microservice_architecture","id":3},{"text":"Service Design","hash":"_service_design","id":4},{"text":"The API layer","hash":"_the_api_layer","id":5},{"text":"Edge Services","hash":"_edge_services","id":6},{"text":"Cloud-Native","hash":"_cloud_native","id":7},{"text":"Scalability","hash":"_scalability","id":8},{"text":"Gridlock situations","hash":"_gridlock_situations","id":9},{"text":"Communication Models: Synchronous vs Asynchronous","hash":"_communication_models_synchronous_vs_asynchronous","id":10},{"text":"Database Transaction Models: ACID vs BASE","hash":"_database_transaction_models_acid_vs_base","id":11},{"text":"Logging and Distributed Tracing","hash":"_logging_and_distributed_tracing","id":12},{"text":"Embracing DevOps","hash":"_embracing_devops","id":13}]}},"components":{},"componentVersions":{"reference/":{"displayVersion":"default","title":"DEV Cheat Sheets","version":"","name":"reference","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"DEV Cheat Sheets","site-url":"https://p-marcin.github.io/dev-cheat-sheets"},"sourcemap":false},"url":"/reference/index.html","navigation":[{"items":[{"content":"☕ Java","items":[{"content":"API","items":[{"content":"Lambda Expression","url":"/reference/java/api/lambda-expression.html","urlType":"internal"},{"content":"The Stream API","url":"/reference/java/api/the-stream-api.html","urlType":"internal"}]},{"content":"Concepts","items":[{"content":"Microservices","url":"/reference/java/concepts/microservices.html","urlType":"internal"}]}]}],"root":true,"order":0}]},"reference/feature-spring":{"displayVersion":"feature-spring","title":"DEV Cheat Sheets","version":"feature-spring","name":"reference","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"DEV Cheat Sheets","site-url":"https://p-marcin.github.io/dev-cheat-sheets"},"sourcemap":false},"url":"/reference/feature-spring/index.html","navigation":[{"items":[{"content":"☕ Java","items":[{"content":"API","items":[{"content":"Lambda Expression","url":"/reference/feature-spring/java/api/lambda-expression.html","urlType":"internal"},{"content":"The Stream API","url":"/reference/feature-spring/java/api/the-stream-api.html","urlType":"internal"}]},{"content":"Concepts","items":[{"content":"Microservices","url":"/reference/feature-spring/java/concepts/microservices.html","urlType":"internal"},{"content":"Reactive Programming","url":"/reference/feature-spring/java/concepts/reactive-programming.html","urlType":"internal"}]}]}],"root":true,"order":0},{"items":[{"content":"☘️ Spring Framework","url":"/reference/feature-spring/spring-framework/index.html","urlType":"internal","items":[{"content":"Spring WebClient","url":"/reference/feature-spring/spring-framework/spring-web-client.html","urlType":"internal"},{"content":"Spring Security","url":"/reference/feature-spring/spring-framework/spring-security.html","urlType":"internal","items":[{"content":"Spring Authorization Server","url":"/reference/feature-spring/spring-framework/spring-authorization-server.html","urlType":"internal"},{"content":"Spring Resource Server","url":"/reference/feature-spring/spring-framework/spring-resource-server.html","urlType":"internal"}]},{"content":"Debugging techniques","url":"/reference/feature-spring/spring-framework/debug.html","urlType":"internal"}]}],"root":true,"order":1}]}}}})